import{_ as s,o as a,c as n,a8 as l,aj as o}from"./chunks/framework.QttzOlP4.js";const f=JSON.parse('{"title":"watch 和 watchEffect的区别","description":"","frontmatter":{},"headers":[],"relativePath":"frame/vue/watch和watchEffect的区别.md","filePath":"frame/vue/watch和watchEffect的区别.md","lastUpdated":1711372342000}'),p={name:"frame/vue/watch和watchEffect的区别.md"},t=l('<h1 id="watch-和-watcheffect的区别" tabindex="-1">watch 和 watchEffect的区别 <a class="header-anchor" href="#watch-和-watcheffect的区别" aria-label="Permalink to &quot;watch 和 watchEffect的区别&quot;">​</a></h1><img src="'+o+`" alt="Vue侦听器"><h2 id="watch" tabindex="-1">watch <a class="header-anchor" href="#watch" aria-label="Permalink to &quot;watch&quot;">​</a></h2><p><strong>侦听一个或多个响应式数据源， 并在数据源变化时调用所给的回调函数</strong></p><blockquote><p>watch() 默认是懒侦听的， 即仅在侦听源发生变化时才执行回调函数</p></blockquote><h3 id="watch参数" tabindex="-1">watch参数 <a class="header-anchor" href="#watch参数" aria-label="Permalink to &quot;watch参数&quot;">​</a></h3><p>watch有三个参数： <strong>侦听器的源</strong>, <strong>执行的回调函数</strong>, <strong>调整回调函数的操作</strong></p><h5 id="第一个参数-侦听器的源" tabindex="-1">第一个参数(侦听器的源) <a class="header-anchor" href="#第一个参数-侦听器的源" aria-label="Permalink to &quot;第一个参数(侦听器的源)&quot;">​</a></h5><ul><li>一个函数， 返回一个值</li><li>一个ref</li><li>一个响应式对象</li><li>或是由以上类型的值组成的数组</li></ul><h5 id="第二个参数-发生变化时要调用的回调函数" tabindex="-1">第二个参数(发生变化时要调用的回调函数) <a class="header-anchor" href="#第二个参数-发生变化时要调用的回调函数" aria-label="Permalink to &quot;第二个参数(发生变化时要调用的回调函数)&quot;">​</a></h5><p>这个回调函数接收三个参数， <strong>新值</strong>、<strong>旧值</strong>、 <strong>以及一个用于注册副作用清理的回调函数</strong>， 该回调函数会在副作用下一次重新执行前调用， 可以用来清除无效的副作用，例如等待中的异步请求。</p><blockquote><p><strong>当侦听多个来源时， 回调函数接收两个数组，分别对应来源数组中的新值和旧值</strong></p></blockquote><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#82AAFF;">watch</span><span style="color:#BABED8;">([fooRef</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> barRef]</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> ([</span><span style="color:#BABED8;font-style:italic;">foo</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> bar</span><span style="color:#89DDFF;">],</span><span style="color:#89DDFF;"> [</span><span style="color:#BABED8;font-style:italic;">prevFoo</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> prevBar</span><span style="color:#89DDFF;">])</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  /** */</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span></span></code></pre></div><h5 id="第三个参数-watch属性值" tabindex="-1">第三个参数(watch属性值) <a class="header-anchor" href="#第三个参数-watch属性值" aria-label="Permalink to &quot;第三个参数(watch属性值)&quot;">​</a></h5><p>第三个参数是可选的， 是一个对象：</p><ul><li><strong>immediate</strong>: 在侦听器创建时立即触发回调。 第一次调用时的旧值是 <code>undefined</code></li><li><strong>deep</strong>: 如果源是对象， 强制深度遍历，以便在深层级变更时触发回调</li><li><strong>flush</strong>: 调整回调函数的刷新时机。</li><li><strong>onTrack/onTrigger</strong>: 调试侦听器的依赖</li></ul><div class="info custom-block"><p class="custom-block-title"><strong>注意</strong></p><ul><li><strong>当直接侦听一个响应式对象时， 侦听器会自动启用深层模式：</strong></li></ul><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> state </span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;"> reactive</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> count</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 0</span><span style="color:#89DDFF;"> }</span><span style="color:#BABED8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">watch</span><span style="color:#BABED8;">(state</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> ()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  /** 深层级变更状态所触发的回调 */</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span></span></code></pre></div><ul><li><strong>侦听一个 getter 函数</strong> 当侦听一个 getter函数时， 回调只在此函数的返回值变化时才触发。 如果想让深层对象变化是， 也被侦听调用， 可以加 <code>{ deep: true }</code> 强制侦听器进入深层级模式</li></ul><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> state </span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;"> reactive</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> count</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 0</span><span style="color:#89DDFF;"> }</span><span style="color:#BABED8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">watch</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#BABED8;"> state</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">count</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> (</span><span style="color:#BABED8;font-style:italic;">count</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> prevCount</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> /** ... */</span></span>
<span class="line"><span style="color:#89DDFF;">},</span><span style="color:#89DDFF;"> {</span><span style="color:#F07178;"> deep</span><span style="color:#89DDFF;">:</span><span style="color:#FF9CAC;"> true</span><span style="color:#89DDFF;"> }</span><span style="color:#BABED8;">)</span></span></code></pre></div><ul><li><strong>侦听一个ref</strong></li></ul><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> count </span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;"> ref</span><span style="color:#BABED8;">(</span><span style="color:#F78C6C;">0</span><span style="color:#BABED8;">)</span></span>
<span class="line"><span style="color:#82AAFF;">watch</span><span style="color:#BABED8;">(count</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> (</span><span style="color:#BABED8;font-style:italic;">count</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> prevCount</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  /* ... */</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span></span></code></pre></div></div><h2 id="watcheffect" tabindex="-1">watchEffect <a class="header-anchor" href="#watcheffect" aria-label="Permalink to &quot;watchEffect&quot;">​</a></h2><p>立即运行一个函数，同时响应式的追踪其依赖， 并在依赖更改时重新执行</p><h3 id="watcheffect参数" tabindex="-1">watchEffect参数 <a class="header-anchor" href="#watcheffect参数" aria-label="Permalink to &quot;watchEffect参数&quot;">​</a></h3><p>watchEffect有两个参数, 第一个参数是数据发生变化时执行的回调函数， 第二个参数是watchEffect的属性</p><h5 id="第一个参数" tabindex="-1">第一个参数 <a class="header-anchor" href="#第一个参数" aria-label="Permalink to &quot;第一个参数&quot;">​</a></h5><p>当监听的值发生变化时， 会自动再次执行以下回调函数</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#82AAFF;">watchEffect</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 监听 objData.str</span></span>
<span class="line"><span style="color:#BABED8;">  console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">objData</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">str</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 会在 props 变化时打印</span></span>
<span class="line"><span style="color:#BABED8;">  console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">name</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> phone</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> age</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 木鱼 1234567 26</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span></span></code></pre></div><h5 id="第二个参数" tabindex="-1">第二个参数 <a class="header-anchor" href="#第二个参数" aria-label="Permalink to &quot;第二个参数&quot;">​</a></h5><p>第二个参数是一个可选的对象， 支持 flush 和 onTrack / onTrigger 选项， 功能和 watch 相同</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#82AAFF;">watchEffect</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {},</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">  flush</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">post</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  onTrack</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">e</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F78C6C;">    debugger</span></span>
<span class="line"><span style="color:#89DDFF;">  },</span></span>
<span class="line"><span style="color:#F07178;">  onTrigger</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">e</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F78C6C;">    debugger</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span></span></code></pre></div><h4 id="停止监听" tabindex="-1">停止监听 <a class="header-anchor" href="#停止监听" aria-label="Permalink to &quot;停止监听&quot;">​</a></h4><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> stop </span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;"> watchEffect</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {}</span><span style="color:#BABED8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 当不再需要此侦听器时</span></span>
<span class="line"><span style="color:#82AAFF;">stop</span><span style="color:#BABED8;">()</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title"><strong>注意</strong></p><p>watchEffect仅会在其同步执行期间， 才追综艺来。 使用异步回调时候， 只有在第一个await 之前访问的依赖才会被追踪</p></div><h2 id="watch和-watcheffect" tabindex="-1">watch和 watchEffect <a class="header-anchor" href="#watch和-watcheffect" aria-label="Permalink to &quot;watch和 watchEffect&quot;">​</a></h2><h4 id="区别" tabindex="-1">区别 <a class="header-anchor" href="#区别" aria-label="Permalink to &quot;区别&quot;">​</a></h4><p><code>watch</code> 和<code>watchEffect</code> 都能响应式地执行有副作用的回调。 它们之间的最要区别是追踪响应式依赖的方式：</p><ul><li><p><code>watch</code> 只追踪明确侦听的数据源。 它不会追踪任何在回调中访问到的东西。 另外， 仅在数据源确定改 变时才会触发回调。 <code>watch</code> 会避免在发生副作用时追踪依赖， 因此， 我们能更加<strong>精确地控制回调函数的触发时机</strong></p></li><li><p><code>watchEffect</code> 则会在副作用发生期间追踪依赖。它会在同步执行过程中， 自动追踪所有能够访问到的响应式属性。 这更方便，而且代码往往更加简洁， 但<strong>有时其响应性依赖关系会不那么明确</strong></p></li></ul><h3 id="访问-vue更新之后的dom" tabindex="-1">访问 Vue更新之后的DOM <a class="header-anchor" href="#访问-vue更新之后的dom" aria-label="Permalink to &quot;访问 Vue更新之后的DOM&quot;">​</a></h3><p><strong>在vue2.x中使用nextTick， 在vue3中， watch/watchEffect 指明 flush &#39;post&#39;选项即可</strong></p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#82AAFF;">watch</span><span style="color:#BABED8;">(source</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> callback</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">  flush</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">post</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">watchEffect</span><span style="color:#BABED8;">(callback</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">  flush</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">post</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span></span></code></pre></div><p>watchEffect 有个别名， 也可以 后置刷新 watchPostEffect():</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#89DDFF;"> {</span><span style="color:#BABED8;"> watchPostEffect</span><span style="color:#89DDFF;"> }</span><span style="color:#89DDFF;font-style:italic;"> from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">watchPostEffect</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  /** 在Vue 更新后执行 */</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span></span></code></pre></div><h2 id="小技巧" tabindex="-1">小技巧 <a class="header-anchor" href="#小技巧" aria-label="Permalink to &quot;小技巧&quot;">​</a></h2><h3 id="关闭监听器" tabindex="-1">关闭监听器 <a class="header-anchor" href="#关闭监听器" aria-label="Permalink to &quot;关闭监听器&quot;">​</a></h3><p>手动停止一个侦听器， 请调用 watch 或 watchEffect 返回的函数</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> stopWatchEffect </span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;"> watchEffect</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {}</span><span style="color:#BABED8;">)</span></span>
<span class="line"><span style="color:#82AAFF;">stopWatchEffect</span><span style="color:#BABED8;">()</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> stopWatch </span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;"> watch</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {}</span><span style="color:#BABED8;">)</span></span>
<span class="line"><span style="color:#82AAFF;">stopWatch</span><span style="color:#BABED8;">()</span></span></code></pre></div><h3 id="异步数据加载" tabindex="-1">异步数据加载 <a class="header-anchor" href="#异步数据加载" aria-label="Permalink to &quot;异步数据加载&quot;">​</a></h3><p>如果需要等待一些异步数据，你可以使用条件式地侦听逻辑</p><div class="language-javaScript"><button title="Copy Code" class="copy"></button><span class="lang">javaScript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 需要异步请求得到的数据</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> data </span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;"> ref</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">null</span><span style="color:#BABED8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">watchEffect</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">data</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">value</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 数据加载后执行某些操作</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span></span></code></pre></div>`,46),e=[t];function c(r,i,y,D,F,h){return a(),n("div",null,e)}const B=s(p,[["render",c]]);export{f as __pageData,B as default};
