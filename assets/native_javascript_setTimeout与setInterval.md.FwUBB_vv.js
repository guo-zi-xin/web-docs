import{_ as s,o as a,c as n,a8 as l}from"./chunks/framework.QttzOlP4.js";const u=JSON.parse('{"title":"setTimeout与setInterval区别","description":"","frontmatter":{},"headers":[],"relativePath":"native/javascript/setTimeout与setInterval.md","filePath":"native/javascript/setTimeout与setInterval.md","lastUpdated":1711372342000}'),o={name:"native/javascript/setTimeout与setInterval.md"},e=l(`<h1 id="settimeout与setinterval区别" tabindex="-1">setTimeout与setInterval区别 <a class="header-anchor" href="#settimeout与setinterval区别" aria-label="Permalink to &quot;setTimeout与setInterval区别&quot;">​</a></h1><p>定义：<strong>在JavaScript中，setTimeout和setInterval是两个用于执行延迟操作或定期执行代码的函数</strong></p><h3 id="settimeout" tabindex="-1">setTimeout <a class="header-anchor" href="#settimeout" aria-label="Permalink to &quot;setTimeout&quot;">​</a></h3><p>全局的 <code>setTimeout()</code> 方法设置一个定时器，一旦定时器到期，就会执行一个函数或指定的代码片段。</p><ul><li><p>语法：<code>setTimeout(function, delay)</code></p></li><li><p>作用：在指定的延迟时间（以毫秒为单位）后执行传入的函数。只执行一次。</p></li><li><p>用法：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 示例：延迟一秒后执行</span></span>
<span class="line"><span style="color:#82AAFF;">setTimeout</span><span style="color:#BABED8;">(</span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">()</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">  console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">这将在一秒后执行。</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">},</span><span style="color:#F78C6C;"> 1000</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p><code>setTimeout</code>接收两个参数，第一个是要执行的函数，第二个是延迟的时间。上述示例中，函数将在延迟一秒后执行。这是一个常用于执行一次性延迟操作的函数</p></li></ul><h3 id="setinterval" tabindex="-1">setInterval <a class="header-anchor" href="#setinterval" aria-label="Permalink to &quot;setInterval&quot;">​</a></h3><p><code>setInterval()</code> 方法重复调用一个函数或执行一个代码片段，在每次调用之间具有固定的时间间隔。</p><ul><li><p>语法：<code>setInterval(function, delay)</code></p></li><li><p>作用：以指定的时间间隔（以毫秒为单位）重复执行传入的函数</p></li><li><p>用法：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 示例：每隔一秒执行一次</span></span>
<span class="line"><span style="color:#82AAFF;">setInterval</span><span style="color:#BABED8;">(</span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">()</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">  console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">这将每隔一秒执行一次。</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">},</span><span style="color:#F78C6C;"> 1000</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p><code>setInterval</code> 也接受两个参数，第一个是要执行的函数，第二个是执行之间的时间间隔，在上述示例中，函数将每隔一秒执行一次。<code>setInterval</code>适用于需要重复执行的定时任务，直到被清除或者页面被卸载</p></li></ul><h3 id="精度问题" tabindex="-1">精度问题 <a class="header-anchor" href="#精度问题" aria-label="Permalink to &quot;精度问题&quot;">​</a></h3><p>尽管<code>setTimeout</code>与<code>setInterval</code>是Javascript中常用的定时器函数，但它们在执行上存在一些精度方面的问题。</p><ul><li><strong>Javascript是单线程执行：</strong> Javascript是单线程执行的，意味着所有任务都在同一个执行队列中，如果队列中已有任务，那么定时任务的执行可能会受到延迟。</li><li><strong>最小延迟时间：</strong> 浏览器和Node.js环境通常将<code>setTimeout</code>和<code>setinterval</code>的最小延迟时间设定为4毫秒(具体取决于浏览器或者环境)</li><li><strong>累计误差：</strong> 由于定时器的执行会受到事件循环机制和系统资源的影响，定时器的实际执行时间可能会有一些偏差，特别是在长时间运行的定时器中，累计实际误差可能导致定时器执行时间的不确定性。</li></ul><h3 id="取消调度" tabindex="-1">取消调度 <a class="header-anchor" href="#取消调度" aria-label="Permalink to &quot;取消调度&quot;">​</a></h3><p><code>setTimeout</code> 和 <code>setInterval</code> 都可以通过 <code>clearTimeout</code> 和 <code>clearInterval</code> 方法来取消之前设置的定时器</p><h3 id="利用settimeout实现一个setinterval" tabindex="-1">利用setTimeout实现一个setInterval <a class="header-anchor" href="#利用settimeout实现一个setinterval" aria-label="Permalink to &quot;利用setTimeout实现一个setInterval&quot;">​</a></h3><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> setIntervalFunctional </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> (</span><span style="color:#82AAFF;">callback</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> ()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#FFCB6B;"> void</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> delay</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> number</span><span style="color:#89DDFF;">):</span><span style="color:#FFCB6B;">void</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;">    let</span><span style="color:#BABED8;"> intervalId</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> number</span><span style="color:#89DDFF;"> |</span><span style="color:#FFCB6B;"> null</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> null;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">    const</span><span style="color:#BABED8;"> intervalFunction</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> ():</span><span style="color:#FFCB6B;">void</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#82AAFF;">        callback</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">        intervalId</span><span style="color:#89DDFF;"> =</span><span style="color:#82AAFF;"> setTimeout</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">intervalFunction</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> delay</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">    intervalFunction</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> // 启动第一次</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 示例使用</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> stopInterval </span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;"> setIntervalFunctional</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">    console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Functional Interval callback executed</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">},</span><span style="color:#F78C6C;"> 1000</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 模拟执行 5 次后停止</span></span>
<span class="line"><span style="color:#82AAFF;">setTimeout</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#82AAFF;">    stopInterval</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">    console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Functional Interval simulation stopped</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">},</span><span style="color:#F78C6C;"> 5000</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h3 id="requestanimationframe" tabindex="-1">requestAnimationFrame <a class="header-anchor" href="#requestanimationframe" aria-label="Permalink to &quot;requestAnimationFrame&quot;">​</a></h3><p><code>window.requestAnimationFrame()</code> 告诉浏览器——你希望执行一个动画，并且要求浏览器在下次重绘之前调用指定的回调函数更新动画。该方法需要传入一个回调函数作为参数，该回调函数会在浏览器下一次重绘之前执行。</p><ul><li>语法： <code>requestAnimationFrame(callback)</code></li><li>作用： 在浏览器下一次重绘之前执行指定的回调函数，确保动画在适当的时机更新，同时也能够有效地减少功耗和提高性能。</li><li>用法：</li></ul><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> startTime</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> animate </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> (</span><span style="color:#BABED8;font-style:italic;">timestamp</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">!</span><span style="color:#BABED8;">startTime</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">    startTime</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> timestamp</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> progress</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> timestamp</span><span style="color:#89DDFF;"> -</span><span style="color:#BABED8;"> startTime</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  //  执行动画操作，例如移动元素</span></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> element</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getElementById</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">some-element-you-want-to-animate</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#BABED8;">  element</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">style</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">transform</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> \`</span><span style="color:#C3E88D;">translateX(</span><span style="color:#89DDFF;">\${</span><span style="color:#BABED8;">progress </span><span style="color:#89DDFF;">*</span><span style="color:#F78C6C;"> 0.1</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">px)</span><span style="color:#89DDFF;">\`</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 设置动画执行总时间</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">progress</span><span style="color:#89DDFF;"> &lt;</span><span style="color:#F78C6C;"> 2000</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#82AAFF;">    requestAnimationFrame</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">anmiate</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 启动动画</span></span>
<span class="line"><span style="color:#82AAFF;">requestAnimationFrame</span><span style="color:#BABED8;">(animate)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h3 id="对比" tabindex="-1">对比 <a class="header-anchor" href="#对比" aria-label="Permalink to &quot;对比&quot;">​</a></h3><ul><li><code>requestAnimationFrame</code>通常比<code>setTimeout</code>和<code>setinterval</code>更精准， 因为它与浏览器的重绘同步</li><li><code>requestAnimationFrame</code>可以更好的利用浏览器的优化，避免不必要的绘制</li><li><code>requestAnimationFrame</code>更适合与动画， 因为它能够自动适应浏览器的刷新率，并在每一帧中执行</li></ul>`,21),p=[e];function t(c,r,i,F,y,D){return a(),n("div",null,p)}const m=s(o,[["render",t]]);export{u as __pageData,m as default};
