import{_ as o}from"./chunks/CustomLink.HhFLulSs.js";import{_ as i,o as s,c as n,m as t,J as l,a as d,a8 as a,ap as r,aq as c,ar as p,as as g}from"./chunks/framework.QttzOlP4.js";const A=JSON.parse('{"title":"HTML CSS 浏览器","description":"","frontmatter":{},"headers":[],"relativePath":"interview/base/native.md","filePath":"interview/base/native.md","lastUpdated":1703064251000}'),y={name:"interview/base/native.md"},h=a('<h1 id="html-css-浏览器" tabindex="-1">HTML CSS 浏览器 <a class="header-anchor" href="#html-css-浏览器" aria-label="Permalink to &quot;HTML CSS 浏览器&quot;">​</a></h1><h3 id="常用的图片的格式有哪些" tabindex="-1">常用的图片的格式有哪些 <a class="header-anchor" href="#常用的图片的格式有哪些" aria-label="Permalink to &quot;常用的图片的格式有哪些&quot;">​</a></h3><p>常用的图片格式有<code>jpeg</code>、<code>png</code>、<code>gif</code>, 比较流行的是<code>jpeg</code>格式, 可以把文件压缩到最小</p><h5 id="jpeg" tabindex="-1"><code>jpeg</code> <a class="header-anchor" href="#jpeg" aria-label="Permalink to &quot;`jpeg`&quot;">​</a></h5><p>JPEG 是一种有损压缩格式,适合存储照片和复杂的图像,可以在文件大小和图像质量之间取得平衡</p><p><em>优点</em>:文件大小相对较小,支持高度压缩；色彩丰富,适合存储真实照片。</p><p><em>缺点</em>:JPEG 是有损压缩,因此会导致图像细节的损失；不支持透明度。</p><h5 id="png" tabindex="-1"><code>png</code> <a class="header-anchor" href="#png" aria-label="Permalink to &quot;`png`&quot;">​</a></h5><p>PNG 是一种无损压缩格式,适合存储图标、简单图形和带有透明度的图像。</p><p><em>优点</em>:支持透明度、无损压缩；适合存储简单图形和带有透明背景的图像。</p><p><em>缺点</em>:文件大小通常比 JPEG 大；不适合存储真实照片。</p><h5 id="gif" tabindex="-1"><code>gif</code> <a class="header-anchor" href="#gif" aria-label="Permalink to &quot;`gif`&quot;">​</a></h5><p>GIF 是一种支持动画和简单图形的格式,同时也支持透明度。</p><p><em>优点</em>:支持动画、透明度；适合存储简单的动画图像。</p><p><em>缺点</em>:色彩表现不如 JPEG 和 PNG；不适合存储真实照片。</p><h3 id="css的盒模型" tabindex="-1">CSS的盒模型 <a class="header-anchor" href="#css的盒模型" aria-label="Permalink to &quot;CSS的盒模型&quot;">​</a></h3><p>盒模型是一个盛放内容的容器, 它由四部分组成 元素的具体内容<code>content</code>、 内边距<code>padding</code>、边框<code>border</code>、外边距<code>margin</code>组成</p><p>设置元素的宽高只是设置了内容区域的宽高,盒子真正的宽高应该是 内容宽高 + 内填充 + 边界边框 + 外边距</p><p>和模型有两种 <em>标准盒模型</em>和<em>IE盒模型</em>, 这两者的区别主要在于宽高的包含范围:</p><p>标准盒模型的宽高指的是<strong>内容区域<code>content</code>的宽高</strong>, 而IE盒模型的宽高指的是<strong>内容区<code>content</code> + 内边距<code>padding</code> + 边框<code>border</code>的宽高</strong></p><h5 id="标准盒模型" tabindex="-1">标准盒模型 <a class="header-anchor" href="#标准盒模型" aria-label="Permalink to &quot;标准盒模型&quot;">​</a></h5><img src="'+r+'" alt="标准盒模型"><h5 id="ie盒模型" tabindex="-1">IE盒模型 <a class="header-anchor" href="#ie盒模型" aria-label="Permalink to &quot;IE盒模型&quot;">​</a></h5><img src="'+c+'" alt="标准盒模型"><blockquote><p>css3中引入了<code>box-sizing</code>属性,<code>box-sizing:content-box</code> 表示标准盒子模型,<code>box-sizing:border-box</code> 表示IE盒子模型</p></blockquote><h3 id="视频-音频标签的使用" tabindex="-1">视频/音频标签的使用 <a class="header-anchor" href="#视频-音频标签的使用" aria-label="Permalink to &quot;视频/音频标签的使用&quot;">​</a></h3><h5 id="视频标签-video-src-video" tabindex="-1">视频标签 <code>&lt;video src=&quot;&quot;&gt;&lt;/video&gt;</code> <a class="header-anchor" href="#视频标签-video-src-video" aria-label="Permalink to &quot;视频标签 `&lt;video src=&quot;&quot;&gt;&lt;/video&gt;`&quot;">​</a></h5><p>属性:</p><table><thead><tr><th style="text-align:left;">属性名称</th><th style="text-align:left;">功能</th></tr></thead><tbody><tr><td style="text-align:left;"><code>src</code></td><td style="text-align:left;">需要播放的视频地址</td></tr><tr><td style="text-align:left;"><code>width</code></td><td style="text-align:left;">视频区域的宽度</td></tr><tr><td style="text-align:left;"><code>height</code></td><td style="text-align:left;">视频区域的高度</td></tr><tr><td style="text-align:left;"><code>autoplay</code></td><td style="text-align:left;">是否自动播放</td></tr><tr><td style="text-align:left;"><code>controls</code></td><td style="text-align:left;">是否显示进度条</td></tr><tr><td style="text-align:left;"><code>poster</code></td><td style="text-align:left;">没有播放之前现实的展位图片</td></tr><tr><td style="text-align:left;"><code>loop</code></td><td style="text-align:left;">是否循环播放</td></tr><tr><td style="text-align:left;"><code>perload</code></td><td style="text-align:left;">预加载视频(缓存); 与<code>autoplay</code>冲突</td></tr><tr><td style="text-align:left;"><code>muted</code></td><td style="text-align:left;">静音模式</td></tr></tbody></table><h5 id="音频标签-audio-source-src-type-source-audio" tabindex="-1">音频标签<code>&lt;audio&gt; &lt;source src=&quot;&quot; type=&quot;&quot;&gt;&lt;/source&gt; &lt;/audio&gt;</code> <a class="header-anchor" href="#音频标签-audio-source-src-type-source-audio" aria-label="Permalink to &quot;音频标签`&lt;audio&gt; &lt;source src=&quot;&quot; type=&quot;&quot;&gt;&lt;/source&gt; &lt;/audio&gt;`&quot;">​</a></h5><p>属性</p><table><thead><tr><th style="text-align:left;">属性名称</th><th style="text-align:left;">功能</th></tr></thead><tbody><tr><td style="text-align:left;"><code>src</code></td><td style="text-align:left;">需要播放的视频地址</td></tr><tr><td style="text-align:left;"><code>type</code></td><td style="text-align:left;">视频类型, 支持<em>ogg</em>、<em>mp3</em> <em>wav</em></td></tr><tr><td style="text-align:left;"><code>autoplay</code></td><td style="text-align:left;">是否自动播放</td></tr><tr><td style="text-align:left;"><code>controls</code></td><td style="text-align:left;">是否显示进度条</td></tr><tr><td style="text-align:left;"><code>loop</code></td><td style="text-align:left;">是否循环播放</td></tr><tr><td style="text-align:left;"><code>perload</code></td><td style="text-align:left;">预加载视频(缓存); 与<code>autoplay</code>冲突</td></tr><tr><td style="text-align:left;"><code>muted</code></td><td style="text-align:left;">静音模式</td></tr></tbody></table><h3 id="html5新增的内容" tabindex="-1">HTML5新增的内容 <a class="header-anchor" href="#html5新增的内容" aria-label="Permalink to &quot;HTML5新增的内容&quot;">​</a></h3><ul><li>语义化标签</li><li>表单类型</li><li>表单元素</li><li>表单属性</li><li>表单事件</li><li>多媒体标签</li></ul><h3 id="新增的语义化标签" tabindex="-1">新增的语义化标签 <a class="header-anchor" href="#新增的语义化标签" aria-label="Permalink to &quot;新增的语义化标签&quot;">​</a></h3><p>优点</p><ol><li>提升可访问性</li><li>利于<code>seo优化</code></li><li>结构清晰,利于维护</li></ol><p>种类</p><table><thead><tr><th style="text-align:left;">标签名</th><th style="text-align:left;">标签作用</th></tr></thead><tbody><tr><td style="text-align:left;"><code>header</code></td><td style="text-align:left;">页面头部</td></tr><tr><td style="text-align:left;"><code>main</code></td><td style="text-align:left;">页面主要内容</td></tr><tr><td style="text-align:left;"><code>footer</code></td><td style="text-align:left;">页面底部</td></tr><tr><td style="text-align:left;"><code>nav</code></td><td style="text-align:left;">导航栏</td></tr><tr><td style="text-align:left;"><code>aside</code></td><td style="text-align:left;">侧边栏</td></tr><tr><td style="text-align:left;"><code>article</code></td><td style="text-align:left;">加载页面一块独立内容</td></tr><tr><td style="text-align:left;"><code>section</code></td><td style="text-align:left;">英译为 部分；相当于<code>div</code></td></tr><tr><td style="text-align:left;"><code>figure</code></td><td style="text-align:left;">加载独立内容（上图下字）</td></tr><tr><td style="text-align:left;"><code>figcaption</code></td><td style="text-align:left;">figure的标题</td></tr><tr><td style="text-align:left;"><code>Hgroup</code></td><td style="text-align:left;">标题组合标签</td></tr><tr><td style="text-align:left;"><code>mark</code></td><td style="text-align:left;">高亮显示</td></tr><tr><td style="text-align:left;"><code>dialog</code></td><td style="text-align:left;">对话框（必须配合<em>open</em>属性）</td></tr><tr><td style="text-align:left;"><code>embed</code></td><td style="text-align:left;">加载插件的标签</td></tr><tr><td style="text-align:left;"><code>video</code></td><td style="text-align:left;">视频标签</td></tr><tr><td style="text-align:left;"><code>audio</code></td><td style="text-align:left;">音频标签</td></tr></tbody></table><h3 id="css3新增特性" tabindex="-1">CSS3新增特性 <a class="header-anchor" href="#css3新增特性" aria-label="Permalink to &quot;CSS3新增特性&quot;">​</a></h3><h5 id="border边框" tabindex="-1"><code>border</code>边框 <a class="header-anchor" href="#border边框" aria-label="Permalink to &quot;`border`边框&quot;">​</a></h5><table><thead><tr><th style="text-align:left;">属性名称</th><th style="text-align:left;">功能</th></tr></thead><tbody><tr><td style="text-align:left;"><code>border-radios</code></td><td style="text-align:left;">添加圆角</td></tr><tr><td style="text-align:left;"><code>border-shadow</code></td><td style="text-align:left;">边框添加阴影 (水平位移 垂直位移 模糊半径 阴影尺寸 阴影颜色 内/外部阴影)</td></tr><tr><td style="text-align:left;"><code>border-image</code></td><td style="text-align:left;">设施边框图像</td></tr><tr><td style="text-align:left;"><code>border-image-source</code></td><td style="text-align:left;">边框图片的路径</td></tr><tr><td style="text-align:left;"><code>border-image-slice</code></td><td style="text-align:left;">图片边框向内偏移</td></tr><tr><td style="text-align:left;"><code>border-image-width</code></td><td style="text-align:left;">图片边框的宽度</td></tr><tr><td style="text-align:left;"><code>border-image-outset</code></td><td style="text-align:left;">边框图像区域超出边框的量</td></tr><tr><td style="text-align:left;"><code>border-image-repeat</code></td><td style="text-align:left;">图像边框是否平铺（repeat 平铺 round 铺满stretch 拉伸）</td></tr></tbody></table><h5 id="background背景" tabindex="-1"><code>background</code>背景 <a class="header-anchor" href="#background背景" aria-label="Permalink to &quot;`background`背景&quot;">​</a></h5><table><thead><tr><th style="text-align:left;">属性名称</th><th style="text-align:left;">功能</th></tr></thead><tbody><tr><td style="text-align:left;"><code>background-size</code></td><td style="text-align:left;">背景图片尺寸</td></tr><tr><td style="text-align:left;"><code>background-origin</code></td><td style="text-align:left;">规定<code>background-position</code>属性相对于什么位置定位</td></tr><tr><td style="text-align:left;"><code>background-clip</code></td><td style="text-align:left;">规定背景的绘制区域（<code>padding-box</code>,<code>border-box</code>,<code>content-box</code>）</td></tr></tbody></table><h5 id="gradient渐变" tabindex="-1"><code>gradient</code>渐变 <a class="header-anchor" href="#gradient渐变" aria-label="Permalink to &quot;`gradient`渐变&quot;">​</a></h5><table><thead><tr><th style="text-align:left;">属性名称</th><th style="text-align:left;">功能</th></tr></thead><tbody><tr><td style="text-align:left;"><code>linear-gradient</code></td><td style="text-align:left;">线性渐变</td></tr><tr><td style="text-align:left;"><code>radial-gradient</code></td><td style="text-align:left;">径向渐变</td></tr></tbody></table><h5 id="word文本效果" tabindex="-1"><code>word</code>文本效果 <a class="header-anchor" href="#word文本效果" aria-label="Permalink to &quot;`word`文本效果&quot;">​</a></h5><table><thead><tr><th style="text-align:left;">属性名称</th><th style="text-align:left;">功能</th></tr></thead><tbody><tr><td style="text-align:left;"><code>word-break</code></td><td style="text-align:left;">定义如何换行</td></tr><tr><td style="text-align:left;"><code>word-wrap</code></td><td style="text-align:left;">允许长的内容可以自动换行</td></tr><tr><td style="text-align:left;"><code>text-overflow</code></td><td style="text-align:left;">指定当文本溢出包含它的元素</td></tr><tr><td style="text-align:left;"><code>text-shadow</code></td><td style="text-align:left;">文字阴影（水平位移,垂直位移,模糊半径,阴影颜色）转换</td></tr></tbody></table><h5 id="transform转换" tabindex="-1"><code>transform</code>转换 <a class="header-anchor" href="#transform转换" aria-label="Permalink to &quot;`transform`转换&quot;">​</a></h5><table><thead><tr><th style="text-align:left;">属性名称</th><th style="text-align:left;">功能</th></tr></thead><tbody><tr><td style="text-align:left;"><code>transform</code></td><td style="text-align:left;">应用于 2D3D 转换,可以将元素旋转,缩放,移动,倾斜</td></tr><tr><td style="text-align:left;"><code>transform-origin</code></td><td style="text-align:left;">可以更改元素转换的位置,（改变 xyz 轴）</td></tr><tr><td style="text-align:left;"><code>transform-style</code></td><td style="text-align:left;">指定嵌套元素怎么样在三位空间中呈现</td></tr></tbody></table><blockquote><p>2D 转换方法: rotate 旋转 translate（x,y）指定元素在二维空间的位移 scale（n）定义缩放转换</p></blockquote><blockquote><p>3D 转换方法:Perspective（n）为 3D 转换 translate rotate scale</p></blockquote><h5 id="transition过渡" tabindex="-1"><code>transition</code>过渡 <a class="header-anchor" href="#transition过渡" aria-label="Permalink to &quot;`transition`过渡&quot;">​</a></h5><table><thead><tr><th style="text-align:left;">属性名称</th><th style="text-align:left;">功能</th></tr></thead><tbody><tr><td style="text-align:left;"><code>transition-proprety</code></td><td style="text-align:left;">过渡属性名</td></tr><tr><td style="text-align:left;"><code>transition-duration</code></td><td style="text-align:left;">完成过渡效果需要花费的时间</td></tr><tr><td style="text-align:left;"><code>transition-timing-function</code></td><td style="text-align:left;">指定切换效果的速度</td></tr><tr><td style="text-align:left;"><code>transition-delay</code></td><td style="text-align:left;">指定什么时候开始切换效果</td></tr></tbody></table><h5 id="animation动画" tabindex="-1"><code>animation</code>动画 <a class="header-anchor" href="#animation动画" aria-label="Permalink to &quot;`animation`动画&quot;">​</a></h5><table><thead><tr><th style="text-align:left;">属性名称</th><th style="text-align:left;">功能</th></tr></thead><tbody><tr><td style="text-align:left;"><code>animation-name</code></td><td style="text-align:left;">为@keyframes 动画名称</td></tr><tr><td style="text-align:left;"><code>animation-duration</code></td><td style="text-align:left;">动画需要花费的时间</td></tr><tr><td style="text-align:left;"><code>animation-timing-function</code></td><td style="text-align:left;">动画如何完成一个周期</td></tr><tr><td style="text-align:left;"><code>animation-delay</code></td><td style="text-align:left;">动画启动前的延迟间隔</td></tr><tr><td style="text-align:left;"><code>animation-iteration-count</code></td><td style="text-align:left;">动画播放次数</td></tr><tr><td style="text-align:left;"><code>animation-direction</code></td><td style="text-align:left;">是否轮流反向播放动画</td></tr></tbody></table><h3 id="清除浮动-float" tabindex="-1">清除浮动(<code>float</code>) <a class="header-anchor" href="#清除浮动-float" aria-label="Permalink to &quot;清除浮动(`float`)&quot;">​</a></h3><blockquote><p>当设置浮动属性时,并且父元素没有设置高度时, 父元素会出现高度塌陷问题</p></blockquote><ol><li><p>给父元素单独定义高度</p><p>这个方法简单快速, 代码量少 但不利于响应式布局</p></li><li><p>父级定义 <code>overflow:hidden; zoom:1</code>两个属性 其中<code>zoom: 1</code>属性是对IE6的兼容</p></li></ol><p>这个方法简单快速,代码量少,兼容性高,但是设置<code>overflow:hidden</code>之后, 超出部分会被隐藏 3. 在浮动元素后面加一个空标签并设置属性 :<code>clear:both; height:0; overflow:hidden</code></p><p>这个方法简单快速,代码量少,兼容性高, 但增加了新标签,不利于页面优化 4. 父级定义 <code>overflow:auto</code></p><p>这个方法简单快速,代码量少,兼容性高,但内部宽高超过父级时,会出现滚动条 5. 给塌陷元素添加微对象</p><p>这个写法固定 兼容性高, 但代码比较多</p><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#89DDFF;">  .</span><span style="color:#FFCB6B;">content</span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#BABED8;">    &amp;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;">after {</span></span>\n<span class="line"><span style="color:#BABED8;">      content: </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">1</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#B2CCD6;">      clear</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;">both</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#B2CCD6;">      display</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;">block</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#B2CCD6;">      height</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#B2CCD6;">      overflow</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;">hidden</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#B2CCD6;">      visibility</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> hidden</span></span>\n<span class="line"><span style="color:#89DDFF;">    }</span></span>\n<span class="line"><span style="color:#BABED8;">  }</span></span></code></pre></div><h3 id="定位属性position" tabindex="-1">定位属性<code>position</code> <a class="header-anchor" href="#定位属性position" aria-label="Permalink to &quot;定位属性`position`&quot;">​</a></h3><ul><li><code>reactive</code>: 相对定位,不脱离文档流,相对于自身定位</li><li><code>absolute</code>: 绝对定位,脱离文档流,相对于父级定位</li><li><code>fixed</code>: 固定定位,脱离文档流,相对于浏览器窗口定位</li><li><code>static</code>: 默认值, 元素出现在正常的文档流中</li><li><code>sticky</code>: 粘性定位，元素先按照普通文档流进行相对定位，相对于块级元素的祖先元素定位。当超过设置的阈值之后，就会变成固定定位</li><li><code>inherit</code>: 表示元素会继承父级元素的定位属性</li></ul><h3 id="元素居中" tabindex="-1">元素居中 <a class="header-anchor" href="#元素居中" aria-label="Permalink to &quot;元素居中&quot;">​</a></h3><h5 id="水平居中" tabindex="-1">水平居中 <a class="header-anchor" href="#水平居中" aria-label="Permalink to &quot;水平居中&quot;">​</a></h5><ol><li>子父元素宽度固定,子元素设置<em>margin: auto</em> 并且子元素不能设置浮动(<code>float</code>)。否则居中失效</li><li>子父元素款素固定,父元素设置<em>text-algin:center</em>; 子元素设置<em>display:inline-block</em>,并且子元素不能设置浮动, 否则居中失效</li></ol><h5 id="垂直居中" tabindex="-1">垂直居中 <a class="header-anchor" href="#垂直居中" aria-label="Permalink to &quot;垂直居中&quot;">​</a></h5><ol><li>设置子元素和父元素的行高一样</li><li>子元素设置为行内块,再加 <em>vertical-align:middle</em></li><li>已知父元素高度,子元素相对定位,通过 <em>transform:translateY(-50%)</em></li><li>不知道父元素高度,子绝对定位父相对定位,子元素 <em>top:50%</em>,<em>transform:translateY(-50%)</em></li><li>创建一个隐藏节点,让隐藏节点的 <em>height</em> 为剩余高度的一半</li><li>给父元素 <em>display:table</em>,子元素 <em>display:table-cell</em>,<em>vertical-align:middle</em></li><li>给父元素添加伪元素</li><li>弹性盒,父元素 <em>display:flex</em>,子元素 <em>align-self:center</em></li></ol><h5 id="水平垂直居中" tabindex="-1">水平垂直居中 <a class="header-anchor" href="#水平垂直居中" aria-label="Permalink to &quot;水平垂直居中&quot;">​</a></h5><ol><li><p>子元素相对于父元素绝对定位,子元素<em>top</em>、<em>left</em>设置 50%,子元素的<em>margin-left</em>和<em>margin-top</em>减去各自宽高的一半</p></li><li><p>子元素相对于父元素绝对定位,子元素上下左右全为0,然后设置子元素<em>margin:auto</em></p></li><li><p>父元素设置<em>display:table-cell; vertical-align: middle</em>,子元素设置<em>margin:auto</em></p></li><li><p>子元素相对定位,子元素 <em>top</em>,<em>left</em> 值为 50%,<em>transform:translate(-50%,-50%)</em></p></li><li><p>子元素相对父元素绝对定位,子元素 <em>top</em>,<em>left</em> 值为 50%,<em>transform:translate(-50%,-50%)</em></p></li><li><p>父元素设置弹性盒:</p><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">content</span><span style="color:#89DDFF;"> {</span></span>\n<span class="line"><span style="color:#B2CCD6;"> display</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> flex</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#BABED8;"> justfy-content</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;">center</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#BABED8;"> align-item</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;">center</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div></li></ol><h5 id="三栏布局方式两边固定-中间自适应" tabindex="-1">三栏布局方式两边固定, 中间自适应 <a class="header-anchor" href="#三栏布局方式两边固定-中间自适应" aria-label="Permalink to &quot;三栏布局方式两边固定, 中间自适应&quot;">​</a></h5><ol><li><em>margin</em> 负值法：左右两栏均左浮动, 左右两栏采用负的<em>margin</em>值。中间栏被宽度为100%的浮动元素包起来</li><li>自身浮动法：左栏左浮动, 右栏右浮动, 中间栏放最后</li><li>绝对定位法：左右两栏采用绝对定位, 分别固定于页面的左右两侧, 中间的主体栏用左右 <em>margin</em> 值撑开距离</li><li><em>flex</em> 左右固定宽 中间 <em>flex: 1</em></li><li>网格布局</li><li>table 布局</li></ol><h3 id="浏览器显示小于12px的文字" tabindex="-1">浏览器显示小于12px的文字 <a class="header-anchor" href="#浏览器显示小于12px的文字" aria-label="Permalink to &quot;浏览器显示小于12px的文字&quot;">​</a></h3><ol><li>可以添加谷歌私有属性<em>webkit-text-size-adjust:none</em></li><li>使用 <em>-webkit-transform:scale(0.5)</em></li></ol><h3 id="css选择器" tabindex="-1">CSS选择器 <a class="header-anchor" href="#css选择器" aria-label="Permalink to &quot;CSS选择器&quot;">​</a></h3><h5 id="种类" tabindex="-1">种类 <a class="header-anchor" href="#种类" aria-label="Permalink to &quot;种类&quot;">​</a></h5><table><thead><tr><th style="text-align:left;">选择器</th><th style="text-align:left;">功能</th></tr></thead><tbody><tr><td style="text-align:left;"></td><td style="text-align:left;">后代选择器</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">元素选择器</td></tr><tr><td style="text-align:left;"><code>.</code></td><td style="text-align:left;">类名选择器</td></tr><tr><td style="text-align:left;"><code>#</code></td><td style="text-align:left;">id选择器</td></tr><tr><td style="text-align:left;"><code>*</code></td><td style="text-align:left;">通配符选择器</td></tr><tr><td style="text-align:left;">空格、<code>&gt;</code> <code>+</code></td><td style="text-align:left;">相邻兄弟选择器</td></tr><tr><td style="text-align:left;"><code>~</code></td><td style="text-align:left;">通用选择器</td></tr><tr><td style="text-align:left;"><code>a:link/visited/hover/active</code></td><td style="text-align:left;">CSS2伪类选择器</td></tr><tr><td style="text-align:left;">结构伪类选择器</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;"><code>nth-child(n)</code></td><td style="text-align:left;">查找第几个子元素</td></tr><tr><td style="text-align:left;"><code>nth-of-type</code></td><td style="text-align:left;">查找同已类型第几个</td></tr><tr><td style="text-align:left;"><code>only-of-type</code></td><td style="text-align:left;">查找唯一类型</td></tr><tr><td style="text-align:left;"><code>[attr=value]</code></td><td style="text-align:left;">属性选择器</td></tr><tr><td style="text-align:left;"><code>:root</code></td><td style="text-align:left;">查找根元素html标签</td></tr><tr><td style="text-align:left;"><code>:empty</code></td><td style="text-align:left;">查找空标签</td></tr><tr><td style="text-align:left;">目标伪类选择器(表单)</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;"><code>:enabled</code></td><td style="text-align:left;">查找可以使用的标签</td></tr><tr><td style="text-align:left;"><code>:disabled</code></td><td style="text-align:left;">查找禁止使用的标签</td></tr><tr><td style="text-align:left;"><code>:checked</code></td><td style="text-align:left;">查找被选中的标签</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;"><code>:selection</code></td><td style="text-align:left;">设置选中文本内容的高亮显示(只能用于背景色和文本颜色)</td></tr><tr><td style="text-align:left;"><code>not()</code></td><td style="text-align:left;">否定伪类选择器</td></tr><tr><td style="text-align:left;"><code>lang</code></td><td style="text-align:left;">语言伪类选择器</td></tr></tbody></table><h5 id="优先级-权重" tabindex="-1">优先级(权重) <a class="header-anchor" href="#优先级-权重" aria-label="Permalink to &quot;优先级(权重)&quot;">​</a></h5><table><thead><tr><th style="text-align:left;">选择器</th><th style="text-align:left;">权重</th></tr></thead><tbody><tr><td style="text-align:left;">元素选择器</td><td style="text-align:left;">1</td></tr><tr><td style="text-align:left;">伪元素选择器</td><td style="text-align:left;">1</td></tr><tr><td style="text-align:left;">class选择器</td><td style="text-align:left;">10</td></tr><tr><td style="text-align:left;">伪类选择器</td><td style="text-align:left;">10</td></tr><tr><td style="text-align:left;">属性选择器</td><td style="text-align:left;">10</td></tr><tr><td style="text-align:left;">Id选择器</td><td style="text-align:left;">100</td></tr><tr><td style="text-align:left;">内联样式的权重</td><td style="text-align:left;">1000</td></tr><tr><td style="text-align:left;">包含选择器权重</td><td style="text-align:left;">包含的所有的权重之和</td></tr></tbody></table><h5 id="可继承属性" tabindex="-1">可继承属性 <a class="header-anchor" href="#可继承属性" aria-label="Permalink to &quot;可继承属性&quot;">​</a></h5><table><thead><tr><th style="text-align:left;">类型</th><th style="text-align:left;">属性</th></tr></thead><tbody><tr><td style="text-align:left;">所有元素</td><td style="text-align:left;"><code>visibility</code>和<code>cursor</code></td></tr><tr><td style="text-align:left;">块级元素</td><td style="text-align:left;"><code>text-indent</code>和<code>text-align</code></td></tr><tr><td style="text-align:left;">列表元素</td><td style="text-align:left;"><code>list-style</code>,<code>list-style-type</code>,<code>list-style-position</code>,<code>list-style-image</code></td></tr><tr><td style="text-align:left;">内联元素</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">字母间距</td><td style="text-align:left;"><code>letter-spacing</code></td></tr><tr><td style="text-align:left;">段落间距</td><td style="text-align:left;"><code>word-spacing</code></td></tr><tr><td style="text-align:left;">行高</td><td style="text-align:left;"><code>line-height</code></td></tr><tr><td style="text-align:left;">字体颜色</td><td style="text-align:left;"><code>color</code></td></tr><tr><td style="text-align:left;"><code>font</code></td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">字体种类</td><td style="text-align:left;"><code>font-family</code></td></tr><tr><td style="text-align:left;">字体大小</td><td style="text-align:left;"><code>font-size</code></td></tr><tr><td style="text-align:left;">字体样式</td><td style="text-align:left;"><code>font-style</code></td></tr><tr><td style="text-align:left;">字体变体</td><td style="text-align:left;"><code>font-variant</code></td></tr><tr><td style="text-align:left;">字体粗细</td><td style="text-align:left;"><code>font-weight</code></td></tr><tr><td style="text-align:left;">文本装饰性线条的外观</td><td style="text-align:left;"><code>text-decoration</code></td></tr><tr><td style="text-align:left;">元素的文本大小写</td><td style="text-align:left;"><code>text-transform</code></td></tr><tr><td style="text-align:left;">文本方向</td><td style="text-align:left;"><code>direction</code></td></tr></tbody></table><h3 id="图片加载缓慢问题" tabindex="-1">图片加载缓慢问题 <a class="header-anchor" href="#图片加载缓慢问题" aria-label="Permalink to &quot;图片加载缓慢问题&quot;">​</a></h3><ol><li>图片懒加载, 在图片未可视区域加一个滚动条事件, 判断图片位置与浏览器顶端和页面的距离, 如果前者小于后者, 优先加载</li><li>使用图片预加载技术, 将当前展示图片的前一张和后一张优先下载</li><li>使用 <code>csssprite</code>css精灵图 或者 <code>svgsprite</code>svg精灵图</li></ol><h3 id="行内元素-块级元素" tabindex="-1">行内元素/块级元素 <a class="header-anchor" href="#行内元素-块级元素" aria-label="Permalink to &quot;行内元素/块级元素&quot;">​</a></h3><p>行内元素: 相邻的行内元素会排列在同一行, 不会独占一行 设置宽高无效 <code>span</code>、<code>a</code>、<code>br</code> <code>I</code> <code>em</code> <code>img</code> <code>input</code> <code>select</code> <code>sub</code> <code>sup</code> <code>u</code> <code>textarea</code></p><p>块级元素: 会独占一行 可以设置宽高等属性 <code>div</code> <code>h1</code>-<code>h6</code> <code>hr</code> <code>p</code> <code>ul</code> <code>ol</code> <code>table</code> <code>address</code> <code>blockquote</code> <code>dir</code> <code>frommenu</code></p><p>可变元素: 根据上下文预警决定该元素为块元素还是内联元素 <code>button</code> <code>del</code> <code>iframe</code> <code>ins</code></p><h3 id="margin与padding使用场景" tabindex="-1"><em>margin</em>与<em>padding</em>使用场景 <a class="header-anchor" href="#margin与padding使用场景" aria-label="Permalink to &quot;*margin*与*padding*使用场景&quot;">​</a></h3><p><em>margin</em>: 外边距 自身边框到另一个边框之间的距离</p><p><em>padding</em>: 内边距 自身边距到自身内容之间的距离</p><p>当需要在 <em>border</em> 外侧添加空白时用 <em>margin</em>; 当需要在 <em>border</em> 内侧添加空白时用 <em>padding</em></p><h3 id="flex属性" tabindex="-1"><code>flex</code>属性 <a class="header-anchor" href="#flex属性" aria-label="Permalink to &quot;`flex`属性&quot;">​</a></h3><p>原理： 通过给父盒子添加 flex 属性, 来控制子盒子的位置和排列方式</p><table><thead><tr><th style="text-align:left;">属性名</th><th style="text-align:left;">功能</th></tr></thead><tbody><tr><td style="text-align:left;"><code>flex-direction</code></td><td style="text-align:left;">弹性容器中子元素排列方式(主轴排列方式)</td></tr><tr><td style="text-align:left;"><code>flex-wrap</code></td><td style="text-align:left;">设置弹性盒子的子元素超出父容器时是否换行</td></tr><tr><td style="text-align:left;"><code>flex-flow</code></td><td style="text-align:left;">是 <code>flex-direction</code> 和 <code>flex-wrap</code> 简写形式</td></tr><tr><td style="text-align:left;"><code>align-item</code></td><td style="text-align:left;">设置弹性盒子元素在侧轴上的对齐方式</td></tr><tr><td style="text-align:left;"><code>align-content</code></td><td style="text-align:left;">设置行对齐</td></tr><tr><td style="text-align:left;"><code>justify-content</code></td><td style="text-align:left;">设置弹性盒子元素在主轴上的对齐方式</td></tr></tbody></table><h3 id="标签的禁用" tabindex="-1">标签的禁用 <a class="header-anchor" href="#标签的禁用" aria-label="Permalink to &quot;标签的禁用&quot;">​</a></h3><p>添加<em>disable</em>属性</p><h3 id="px、rem、em区别" tabindex="-1"><code>px</code>、<code>rem</code>、<code>em</code>区别 <a class="header-anchor" href="#px、rem、em区别" aria-label="Permalink to &quot;`px`、`rem`、`em`区别&quot;">​</a></h3><ul><li><p><code>px</code></p><p>绝对长度单位, 像素 <code>px</code> 是相对于显示器屏幕分辨率来说的</p></li><li><p><code>em</code></p><p>相对长度单位, 相对于当前对象内文本的字体尺寸</p><p><code>em</code> 的值并不是固定的</p><p><code>em</code> 会继承父级元素的字体大小（参考物是父元素的 <code>font-size</code>）</p><p><code>em</code> 中所有的字体都是相对于父元素的大小决定的</p></li><li><p><code>rem</code></p><p>相对于 <code>html</code>根元素的 <code>font-size</code></p></li></ul><p><code>1em</code> = <code>1rem</code> = <code>16px</code> 在 <code>body</code> 中加入 <code>font-size：62.5%</code> 这样直接就是原来的px数值除以10加上em就可以</p><blockquote><p><code>rem</code>缺点； 屏幕越小的移动设备如果用了 rem 肯定文字就越小, 就会导致看文章的时候看不清</p></blockquote><h3 id="媒体查询" tabindex="-1">媒体查询 <a class="header-anchor" href="#媒体查询" aria-label="Permalink to &quot;媒体查询&quot;">​</a></h3><p>媒体查询扩展了 <strong>media</strong> 属性, 就是根据不同的媒体类型设置不同的css样式, 达到自适应的目的。</p><h3 id="网页的三层结构" tabindex="-1">网页的三层结构 <a class="header-anchor" href="#网页的三层结构" aria-label="Permalink to &quot;网页的三层结构&quot;">​</a></h3><p>结构(<code>html</code> 或 <code>xhtm</code> 标记语言) 表现(<code>css</code> 样式表) 行为(<code>js</code>)</p><h3 id="doctype-作用" tabindex="-1">DOCTYPE 作用 <a class="header-anchor" href="#doctype-作用" aria-label="Permalink to &quot;DOCTYPE 作用&quot;">​</a></h3><p>DOCTYPE 是 HTML5 中的文档声明, 通过它可以告诉浏览器, 使用哪一个 HTML 的版本标准来解析文档, 如果没有 DOCTYPE, 会导致 HTML文档以混杂模式出现(不仅会降低解析效率, 而且会在解析过程中产生一些难以预料的bug)</p><ul><li>标准模式: 以浏览器支持的最高标准执行</li><li>混杂模式: 中页面是一种比较宽松的像后兼容的方式显示</li></ul><h3 id="html5-dragapi" tabindex="-1">HTML5 <code>drag</code>API <a class="header-anchor" href="#html5-dragapi" aria-label="Permalink to &quot;HTML5 `drag`API&quot;">​</a></h3><table><thead><tr><th style="text-align:left;">属性</th><th style="text-align:left;">功能</th></tr></thead><tbody><tr><td style="text-align:left;"><code>dragstart</code></td><td style="text-align:left;">事件主体是被拖放元素, 在开始拖放被拖放元素时触发</td></tr><tr><td style="text-align:left;"><code>darg</code></td><td style="text-align:left;">事件主体是被拖放元素, 在正在拖放被拖放元素时触发</td></tr><tr><td style="text-align:left;"><code>dragenter</code></td><td style="text-align:left;">事件主体是目标元素, 在被拖放元素进入某元素时触发</td></tr><tr><td style="text-align:left;"><code>dragover</code></td><td style="text-align:left;">事件主体是目标元素, 在被拖放在某元素内移动时触发</td></tr><tr><td style="text-align:left;"><code>dragleave</code></td><td style="text-align:left;">事件主体是目标元素, 在被拖放元素移出目标元素是触发</td></tr><tr><td style="text-align:left;"><code>drop</code></td><td style="text-align:left;">事件主体是目标元素, 在目标元素完全接受被拖放元素时触发</td></tr><tr><td style="text-align:left;"><code>dragend</code></td><td style="text-align:left;">事件主体是被拖放元素, 在整个拖放操作结束时触发</td></tr></tbody></table><h3 id="浏览器性能优化-🌍" tabindex="-1">浏览器性能优化 🌍 <a class="header-anchor" href="#浏览器性能优化-🌍" aria-label="Permalink to &quot;浏览器性能优化 🌍&quot;">​</a></h3><p>如何让页面能够更快地显示和响应， 这里分为三个阶段</p><ul><li>加载阶段：发出请求到网页渲染完成的这段过程，这里影响和优化的主要是网络和 JavaScript 脚本。</li><li>交互阶段：页面加载完成，用户交互的这段过程，影响的主要是 JavaScript 脚本。</li><li>关闭阶段：关闭后的一些清理操作，影响的主要也是 JavaScript 脚本。</li></ul><h5 id="加载阶段的优化" tabindex="-1">加载阶段的优化 <a class="header-anchor" href="#加载阶段的优化" aria-label="Permalink to &quot;加载阶段的优化&quot;">​</a></h5><p>加载阶段能做的主要优化：</p><ul><li><p>减少关键资源个数</p><ul><li>例如把css和js改为内联形式，关键资源比如原来有3个就减少到1个了</li><li>变成非关键资源: 如果JS代码没有 DOM 操作，则可以改成 async 或者 defer； 同样的， CSS如果不是在页面构建前加载，则可以加上取消阻止显示的标志</li></ul></li><li><p>降低关键资源大小</p><ul><li>压缩 CSS 和 JavaScript 资源</li><li>minify / gzip 压缩、webp图片压缩</li><li>图片懒加载</li><li>移除一些注释内容</li><li>变成非关键资源</li></ul></li><li><p>降低关键资源的RTT次数</p><ul><li>实现前两者的优化</li><li>使用 CDN</li></ul></li></ul><h5 id="交互阶段的优化" tabindex="-1">交互阶段的优化 <a class="header-anchor" href="#交互阶段的优化" aria-label="Permalink to &quot;交互阶段的优化&quot;">​</a></h5><p>交互阶段的优化，其实就是说 优化渲染进程中渲染帧的速度，帧的速度决定了交互的流畅性</p><blockquote><p>大部分情况下，生成一个新的帧，是由 JavaScript 通过修改 DOM 或者 CSSOM 来触发的</p></blockquote><ul><li>降低请求量: 合并资源，减少 http次数</li><li>缓存: HTTP 协议缓存请求，离线缓存 manifest, 离线数据缓存localStorage</li><li>渲染: 服务端渲染</li></ul><h3 id="回流和重绘" tabindex="-1">回流和重绘 <a class="header-anchor" href="#回流和重绘" aria-label="Permalink to &quot;回流和重绘&quot;">​</a></h3>',123),f=t("h3",{id:"浏览器缓存机制",tabindex:"-1"},[d("浏览器缓存机制 "),t("a",{class:"header-anchor",href:"#浏览器缓存机制","aria-label":'Permalink to "浏览器缓存机制"'},"​")],-1),x=a('<h3 id="浏览器输入网址到页面渲染的全过程" tabindex="-1">浏览器输入网址到页面渲染的全过程 <a class="header-anchor" href="#浏览器输入网址到页面渲染的全过程" aria-label="Permalink to &quot;浏览器输入网址到页面渲染的全过程&quot;">​</a></h3><ol><li><p><strong>用户输入URL</strong> 用户在输入URL时候，浏览器会根据URL的协议， 在这段内容上加伤协议合成合法的URL， 按下回车后，导航栏显示加载状态；</p><p>当用户输入的是关键字的时候，浏览器会讲输入内容作为搜索条件，使用用户的默认设置的搜索引擎来进行搜索</p></li><li><p><strong>网络进程处理</strong> 网络进程接收到url请求后会先检查本地缓存， 如果有缓存文件，则先走缓存，没有则进行网络请求，开始<strong>DNS解析</strong></p><p><em>DNS解析的详细过程</em></p><p>DNS翻译过来就是域名系统，是互联网上作为域名和IP地址相互映射的一个分布式数据库</p><p>因为浏览器不能直接通过域名找到对应服务器的IP地址，所以需要进行DNS解析，查找到对应IP进行访问</p><ul><li>用户在浏览器中输入域名，操作系统会先检查浏览器的缓存和本地的<code>host</code>文件， 是否有这个网址记录，有的话就从记录里找到对应IP地址，完成域名解析</li><li>没有的话接着使用<code>TCP/IP</code>参数设置的<code>DNS</code>服务器进行查询，如果查询的域名包含在本地配置区域资源中，则返回解析结果， 完成域名解析</li><li>没有的话再接着检查本地<code>DNS</code>服务器是否缓存有该网址的记录，有的话返回解析结果，完成域名解析</li><li>如果还没有，本地<code>DNS</code>服务器会发送查询豹纹到根<code>DNS</code>服务器，在根<code>DNS</code>服务器收到报文之后会返回顶级域<code>DNS</code>服务器地址，然后本地<code>DNS</code>服务器会发送查询报文到顶级域名服务器， 顶级域名服务器收到请求后会返回权威<code>DNS</code>地址,然后本地<code>DNS</code>服务器地址再发送查询报文到权威<code>DNS</code>服务器，权威<code>DNS</code>服务器接收到请求后，返回最终的<code>IP</code>地址，完成域名解析</li></ul></li><li><p><strong>TCP三次握手建立连接</strong></p></li></ol><details class="details custom-block"><summary>网络模型</summary><p>网络模型可以分为七层、四层或五层模型， 这里我们将其分为五层<a href="./../../native/javascript/TCP四层五层与OSI七层模型区别">^1</a><img src="'+p+'" alt="网络模型(五层)"></p><p>自上而下，分为应用层、传输层、网络层、链接层和实体层(物理层), 每层都有相关的协议和功能，并且需要下一层的支持。他们的功能以及依赖关系，如下图 <img src="'+g+'" alt="网络传输数据包装"></p><ol><li>应用层HTTP协议的通信请求，规定应用程序的数据格式，基于传输层TCP协议的TCP连接</li><li>传输层的TCP连接，负责传输数据包，基于网络层IP协议分配IP地址连通网络和链接层MAC地址(网卡地址)，确认接收主机</li><li>网络层的数据发送，基于连接层将实体层发出的电信号分组并且解读，通过ARP协议利用IP地址获取到MAC地址(网卡地址)</li><li>实体层(物理层)，就是电脑间链接的介质，比如光纤、电缆等等，主要负责传送0和1的电信号</li></ol><p>由此我们可得知Internet通信的前提必须是知道双方的IP地址和MAC地址(网卡地址，以太网的物理地址)，IP地址负责确定接收方的子网，MAC地址负责确定接收方的主机地址。</p></details>',3),m={class:"details custom-block"},u=t("summary",null,"TCP协议",-1),b=t("p",null,[t("strong",null,"TCP协议："),d(" TCP协议(Transmission Control Protocol 传输控制协议)是一种面向连接的，可靠的，基于字节流的"),t("strong",null,"传输层协议")],-1),D=t("p",null,"TCP协议的主要功能是当应用层向TCP层发送用于网间传输的，用8位字节表示的数据流，TCP则把数据流分割成适当长度的报文段，最大传输段大小(MISS)通常受该计算机连接的网络的数据链路层的最大 传送单元(MTU)限制。之后TCP把数据包传给IP层，由他来通过将包传送给接收端实体的TCP层。",-1),q=a('<ol start="4"><li><strong>发送HTTP/HTTPS请求</strong></li></ol><ul><li>建立连接后就可以停过 HTTP 进行数据传输了</li><li>如果使用了 HTTPS ，会在 TCP 和 HTTP 之间多添加一层协议作为加密和认证的服务， HTTPS 使用 SSL 和 TLS 协议 保证了信息的安全</li><li>SSL 协议的作用是认证客户端和服务端，确保数据发送到正确的客户端和服务器，加密数据防止数据中途被窃取，维护数据的完整性，确保数据在书参数过程中不被改变</li><li>TLS 协议的作用是在两个通信应用程序之间提供保密性和数据完整性， TLS 协议有两层协议组成 TLS 记录协议和 TLS 握手协议</li></ul><ol start="5"><li><p><strong>服务器响应请求</strong></p><p>当浏览器到web服务器建立连接后，浏览器会发送一个初始的 HTTP GET请求， 请求目标通常是一个HTML文件，服务器收到请求后，将返回一个 HTTP 的响应报文，内容包括响应头和 HTML 正文</p></li></ol><div class="language-txt"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span>GET /index.html HTTP1.1</span></span></code></pre></div><ol start="6"><li><strong>浏览器解析渲染页面</strong></li></ol><p>浏览器接收到服务端的响应之后，开始渲染解析页面</p><p>浏览器会处理 HTML 并且构建 DOM 树</p><p>处理 CSS 标记并构建 CSSDOM 树</p><p>将 DOM 树和 CSSDOM 树合并成一个渲染树</p><p>根据渲染树来布局， 以计算每个节点的集合信息</p><p>将各个节点渲染到屏幕上， 这样就完成了页面渲染</p><ol start="7"><li><strong>传输完成，TCP四次挥手</strong></li></ol>',12),P=a(`<h3 id="如何画一条0-5px的线" tabindex="-1">如何画一条0.5px的线 <a class="header-anchor" href="#如何画一条0-5px的线" aria-label="Permalink to &quot;如何画一条0.5px的线&quot;">​</a></h3><ul><li>采用 <code>meta viewport</code>的方式</li></ul><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">meta</span><span style="color:#C792EA;"> name</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">viewport</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;"> content</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">initial-scale=1.0, maxmum-scale=1.0, user-scalable=no</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">/&gt;</span></span></code></pre></div><ul><li>采用border-image的方式</li><li>采用<code>transform:scale()</code>的方式</li></ul><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">content</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#B2CCD6;">  width</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">100px</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#B2CCD6;">  height</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">1px</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#B2CCD6;">  transform</span><span style="color:#89DDFF;">:</span><span style="color:#82AAFF;"> scale</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">0.5</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h3 id="关于-js动画和css3动画的差异" tabindex="-1">关于 JS动画和CSS3动画的差异 <a class="header-anchor" href="#关于-js动画和css3动画的差异" aria-label="Permalink to &quot;关于 JS动画和CSS3动画的差异&quot;">​</a></h3><p>渲染县城分为<code>main thread</code> 和 <code>compositor thread</code>, 如果css动画只改变 <code>transfoem</code> 和 <code>opacity</code>, 这时整个CSS动画得以在 <code>compositor trhead</code> 完成， 而 JS动画 则会在<code>main thread</code>执行，然后触发<code>compositor thread</code>进行下一步操作，需要特别注意的是，如果改变<code>transfoem</code> 和 <code>opacity</code>是不会layout或者paint的</p><p>区别：</p><ul><li>功能涵盖方面： JS动画比CSS动画功能强大</li><li>实现/重构难度：难度不一， CSS动画比 JS动画更简单，</li><li>性能方面：JS动画在低版本浏览器下表现并不好， CSS动画可以做到自然降级</li><li>事件方面： CSS动画有天然提供的事件支持， JS动画则没有</li><li>兼容性问题： CSS动画存在兼容性问题</li></ul><h3 id="双边距重叠-外边距折叠" tabindex="-1">双边距重叠(外边距折叠) <a class="header-anchor" href="#双边距重叠-外边距折叠" aria-label="Permalink to &quot;双边距重叠(外边距折叠)&quot;">​</a></h3><p>多个相邻(兄弟或者父子关系)普通流的块级元素垂直方向的 <em>margin</em> 会重叠， 重叠结果为：</p><ul><li>两者相邻的外边距皆为正数时： 折叠结果是比较他们两者之间较大的值。</li><li>两者相邻的外边距都是负数时： 折叠结果是两者绝对值的较大的值。</li><li>两者相邻的外边距为一正一负时： 折叠结果是两者相加的和。</li></ul>`,12);function C(S,F,T,k,_,v){const e=o;return s(),n("div",null,[h,t("ul",null,[t("li",null,[l(e,{title:"回流和重绘",href:"../../native/javascript/回流与重绘"})])]),f,t("ul",null,[t("li",null,[l(e,{title:"浏览器缓存",href:"../../native/javascript/浏览器缓存"})])]),x,t("details",m,[u,b,D,t("p",null,[d("TCP三次握手："),l(e,{title:"TCP三次握手与四次挥手",href:"../../native/javascript/TCP三次握手与四次挥手.md"})])]),q,l(e,{title:"TCP三次握手与四次挥手",href:"../../native/javascript/TCP三次握手与四次挥手"}),P])}const I=i(y,[["render",C]]);export{A as __pageData,I as default};
