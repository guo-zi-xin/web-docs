import{_ as s,o as n,c as a,a8 as l,ah as o,ai as p}from"./chunks/framework.Qf1t7Yq5.js";const A=JSON.parse('{"title":"Vue生命周期","description":"","frontmatter":{},"headers":[],"relativePath":"frame/vue/vue生命周期.md","filePath":"frame/vue/vue生命周期.md","lastUpdated":1703580156000}'),e={name:"frame/vue/vue生命周期.md"},t=l('<h1 id="vue生命周期" tabindex="-1">Vue生命周期 <a class="header-anchor" href="#vue生命周期" aria-label="Permalink to &quot;Vue生命周期&quot;">​</a></h1><p><strong>vue2</strong> 的生命周期与 <strong>vue3</strong> 的声明是有所区别的，</p><p><strong>vue2</strong> 的生命周期主要是：</p><ul><li><code>beforeCreate</code></li><li><code>created</code></li><li><code>beforeMount</code></li><li><code>mounted</code></li><li><code>beforeupdate</code></li><li><code>updated</code></li><li><code>beforeDestroy</code></li><li><code>Destroyed</code></li></ul><p>而在 vue3 中， 在 vue2 的基础上做了一些改变， 主要是针对最后两个生命周期：</p><ul><li><code>beforeDestroy</code> -&gt; <code>beforeunmount</code></li><li><code>Destroyed</code> -&gt; <code>Unmounted</code></li></ul><p>另外， <code>options API</code> 和 <code>composition API</code> 在生命周期上也有一些小的不同：</p><p><code>conposition API</code> 提供了 setup 函数作为入口函数， 替换了 <code>beforeCreate</code> 和 <code>created</code> 这两个生命周期钩子, 并且<code>setup()</code>在两者之间执行。</p><p>所以在实际开发中， 我们可以简单地把 <code>setup</code> 理解为 <code>created</code> 来使用</p><h3 id="vue2" tabindex="-1">Vue2 <a class="header-anchor" href="#vue2" aria-label="Permalink to &quot;Vue2&quot;">​</a></h3><table><thead><tr><th style="text-align:left;">生命周期钩子</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">beforeCreate</td><td style="text-align:left;">组件实例被创建之初</td></tr><tr><td style="text-align:left;">createed</td><td style="text-align:left;">组件实例已被完全创建</td></tr><tr><td style="text-align:left;">beforeMount</td><td style="text-align:left;">组件挂载之前</td></tr><tr><td style="text-align:left;">mounted</td><td style="text-align:left;">组件挂载到实例上去之后</td></tr><tr><td style="text-align:left;">beforeUpdate</td><td style="text-align:left;">组件数据发生变化，更新之前</td></tr><tr><td style="text-align:left;">update</td><td style="text-align:left;">组件数据更新之后</td></tr><tr><td style="text-align:left;">beforeDestroy</td><td style="text-align:left;">组件实例销毁之前</td></tr><tr><td style="text-align:left;">destroy</td><td style="text-align:left;">组件实例销毁之后</td></tr><tr><td style="text-align:left;">activated</td><td style="text-align:left;">keep-alive 缓存的组件激活时</td></tr><tr><td style="text-align:left;">deactivated</td><td style="text-align:left;">keep-alive 缓存的组件停用时调用</td></tr><tr><td style="text-align:left;">errorCaptured</td><td style="text-align:left;">捕获一个来自子孙组件的错误时被调用</td></tr></tbody></table><img src="'+o+'" alt="vue2生命周期"><h5 id="具体分析" tabindex="-1">具体分析 <a class="header-anchor" href="#具体分析" aria-label="Permalink to &quot;具体分析&quot;">​</a></h5><ul><li><p><strong>beforeCreate -&gt; created</strong></p><p>初始化 vue 实例，进行数据观测</p></li><li><p><strong>created</strong></p><p>完成数据观测，属性和方法的运算，<code>watch</code>、<code>event</code>事件回调的配置</p><p>可调用 <code>methods</code>中的方法，访问和修改data数据触发响应式渲染 <code>dom</code> 可通过 <code>computed</code> 和 <code>watch</code> 完成数据计算</p><p>此时 <code>vm.$el</code> 并没有被创建</p></li><li><p><strong>created -&gt; beforeMount</strong></p><p>判断是否存在 <code>el</code> 选项， 若不存在则停止编译，直到调用 <code>vm.$mount(el)</code> 才会继续编译</p><p>优先级： <code>render</code> &gt; <code>template</code> &gt; <code>outerHTML</code></p><p><code>vm.el</code> 获取到的是挂载<code>DOM</code>的</p></li><li><p><strong>beforeMount</strong></p><p>在此阶段可获取到<code>vm.el</code></p><p>此阶段<code>vm.el</code>虽已完成DOM初始化， 但并未挂载在<code>el</code>选项上</p></li><li><p><strong>beforeMount -&gt; mounted</strong></p><p>此阶段<code>vm.el</code>完成挂载，<code>vm.$el</code>生成的<code>DOM</code>替换了<code>el</code>选项所对应的<code>DOM</code></p></li><li><p><strong>mounted</strong></p><p>此阶段<code>vm.el</code>完成挂载与渲染，此刻打印<code>vm.$el</code> 发现之前的挂载点及内容已被替换成新的DOM</p></li><li><p><strong>beforeUpdate</strong></p><p>更新的数据必须是被渲染在模版上的(<code>el</code>、<code>template</code>、<code>render</code>之一)</p><p>此时 <code>view</code> 层还未更新</p><p>若在<code>beforeUpdate</code> 中再次修改数据，不会再次触发更新方法</p></li><li><p><strong>updated</strong></p><p>完成 <code>view</code>层更新</p><p>若在<code>update</code>中再次修改数据，会再次触发更新方法(<code>beforeUpdate</code>, <code>updated</code>)</p></li><li><p><strong>beforeDestroy</strong></p><p>实例被销毁前调用，此时实例属性与方法仍可访问</p></li><li><p><strong>destroyed</strong></p><p>完全销毁一个实例，可清理它与其他实例的连接，接棒他的全部指令以及事件监听器</p><p>并不能清除DOM， 仅仅销毁实例</p></li></ul><h5 id="题外话-数据请求在created和mouted的区别" tabindex="-1">题外话：数据请求在created和mouted的区别 <a class="header-anchor" href="#题外话-数据请求在created和mouted的区别" aria-label="Permalink to &quot;题外话：数据请求在created和mouted的区别&quot;">​</a></h5><p><code>created</code>是在组件实例一旦创建完成的时候立刻调用，这时候页面<code>dom</code>节点并未生成；</p><p><code>mounted</code>是在页面<code>dom</code>节点渲染完毕之后就立刻执行的。触发时机上<code>created</code>是比<code>mounted</code>要更早的，</p><p>两者的相同点：</p><p>都能拿到实例对象的属性和方法。 讨论这个问题本质就是触发的时机，放在<code>mounted</code>中的请求有可能导致页面闪动（因为此时页面<code>dom</code>结构已经生成），但如果在页面加载前完成请求，则不会出现此情况。 建议对页面内容的改动放在<code>created</code>生命周期当中。</p><h3 id="vue3" tabindex="-1">Vue3 <a class="header-anchor" href="#vue3" aria-label="Permalink to &quot;Vue3&quot;">​</a></h3><p>在 Vue3 中， 除了 <code>setup()</code>替代了 <code>created</code> 和 <code>beforeCreate</code> 之外，</p><p><code>beforeMount</code> 和 <code>mounted</code> 函数被替换成了 <code>onBeforeMount</code> 和 <code>onMounted</code>；</p><p><code>beforeUpdate</code> 和 <code>update</code> 被替换为 <code>onBeforeUpdate</code> 和 <code>onUpdate</code>;</p><p><code>beforeDestroy</code>和 <code>destroyed</code>被替换为 <code>beforeUnmount</code> 和 <code>unmounted</code>。</p><p>这些钩子函数的执行顺序与vue2的版本相同，但有所不同的是，在vue3中，他们是使用ES6类定义的。</p><table><thead><tr><th style="text-align:left;">生命周期钩子</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">setup</td><td style="text-align:left;">替代了vue2中的 <code>created</code> 和 <code>beforeCreate</code>的作用</td></tr><tr><td style="text-align:left;">onBeforeMount</td><td style="text-align:left;">组件挂载之前</td></tr><tr><td style="text-align:left;">onMounted</td><td style="text-align:left;">组件挂载到实例上去之后</td></tr><tr><td style="text-align:left;">onBeforeUpdate</td><td style="text-align:left;">组件数据发生变化，更新之前</td></tr><tr><td style="text-align:left;">onUpdate</td><td style="text-align:left;">组件数据更新之后</td></tr><tr><td style="text-align:left;">beforeUnmount</td><td style="text-align:left;">组件实例卸载之前</td></tr><tr><td style="text-align:left;">unmounted</td><td style="text-align:left;">组件实例卸载之后</td></tr><tr><td style="text-align:left;">activated</td><td style="text-align:left;">keep-alive 缓存的组件激活时</td></tr><tr><td style="text-align:left;">deactivated</td><td style="text-align:left;">keep-alive 缓存的组件停用时调用</td></tr><tr><td style="text-align:left;">errorCaptured</td><td style="text-align:left;">捕获一个来自子孙组件的错误时被调用</td></tr></tbody></table><img src="'+p+`" alt="vue生命周期"><h5 id="具体功能" tabindex="-1">具体功能 <a class="header-anchor" href="#具体功能" aria-label="Permalink to &quot;具体功能&quot;">​</a></h5><ul><li><p><strong>setup</strong></p><p><code>setup</code> 函数是一个全新的组件选项，它是 Composition API 的核心，用于初始化组件实例</p><p><code>setup</code> 接收两个参数：<code>props</code> 和 <code>context</code>。 其中 <code>props</code> 是父组件传递给当前组件实例的属性，而 <code>context</code>属性则包含了一些 helper 的方法和组件选项，(如 <code>attrs</code>， <code>slots</code>, <code>emit</code> 等)</p><p>在<code>setup</code>中， 我们可以使用Vue3提供多个工具函数来定义响应式数据，监听生命周期钩子，处理计算属性、声明事件处理函数等， 这些函数包括：</p><ul><li><code>reactive</code>: 用于创建响应式对象</li><li><code>ref</code>: 用于创建一个单一的响应式值</li><li><code>computed</code>: 用于创建计算属性</li><li><code>watch</code>: 用于监听响应式数据的变化</li><li><code>onMounted</code>和<code>onUpdate</code>和<code>onUnmounted</code>: 用于监听生命周期钩子</li><li><code>toRefs</code>: 用于将响应式对象转换为普通对象</li><li><code>inject</code> 和 <code>provide</code>: 用于跨层级组件传递数据</li><li><code>getCurrentInstance</code>: 用于访问当前组件实例</li></ul><p>使用<code>setup</code> 函数的优点是可以讲相似的逻辑组织在一起，便于代码的维护和重用。此外。 <code>setup</code>函数需要返回一个对象，用于暴露组件状态和方法给模版使用， 因此也提高了代码的可读性和组件的封装性</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#89DDFF;font-style:italic;"> default</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">  setup</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">props</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;">context</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 透传 Attributes(非响应式对象， 等价于$attrs)</span></span>
<span class="line"><span style="color:#BABED8;">    console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">context</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">attrs</span><span style="color:#F07178;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 插槽，(非响应式对象，等价于$slots)</span></span>
<span class="line"><span style="color:#BABED8;">    console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">context</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">slots</span><span style="color:#F07178;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 触发事件(函数，等价于 $emit)</span></span>
<span class="line"><span style="color:#BABED8;">    console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">context</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">emit</span><span style="color:#F07178;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 暴露公共属性</span></span>
<span class="line"><span style="color:#BABED8;">    console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">context</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">expose</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><ul><li><p><strong>onBeforeMount和onMounted</strong></p><p><code>onBeforeMount</code> 和 <code>onMounted</code> 都是 Vue3 中的生命周期钩子，它们分别在组件<code>挂载</code>之前和之后运行</p><ul><li><p><strong>onBeforeMount</strong></p><p><code>onBeforeMount</code>钩子函数会在组件挂载到DOM前运行， 可以用来在组件挂载前执行一些初始化操作</p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#C792EA;"> lang</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">ts</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;"> setup</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  import</span><span style="color:#89DDFF;"> {</span><span style="color:#BABED8;"> onBeforeMount</span><span style="color:#89DDFF;"> }</span><span style="color:#89DDFF;font-style:italic;"> from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">  onBeforeMount</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">    console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">before mount</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span><span style="color:#BABED8;">)</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div></li><li><p><strong>onMounted</strong></p><p><code>onMounted</code> 钩子函数会在组件挂载到 DOM 后运行， 通常用于获取数据和初始化页面状态等操作</p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">  &lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;{{</span><span style="color:#BABED8;"> message </span><span style="color:#89DDFF;">}}&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#C792EA;"> setup</span><span style="color:#C792EA;"> lang</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">ts</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  import</span><span style="color:#89DDFF;"> {</span><span style="color:#BABED8;"> onMounted</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> reactive</span><span style="color:#89DDFF;"> }</span><span style="color:#89DDFF;font-style:italic;"> from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> state </span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;"> reactive</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> message</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;&#39;</span><span style="color:#89DDFF;"> }</span><span style="color:#BABED8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">  onMounted</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 发送 AJAX 请求， 获取数据</span></span>
<span class="line"><span style="color:#82AAFF;">    fetch</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/api/data</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">then</span><span style="color:#F07178;">(</span><span style="color:#BABED8;font-style:italic;">res</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span><span style="color:#F07178;"> </span></span>
<span class="line"><span style="color:#BABED8;">      res</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">json</span><span style="color:#F07178;">() </span></span>
<span class="line"><span style="color:#89DDFF;">    }</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">then</span><span style="color:#F07178;">(</span><span style="color:#BABED8;font-style:italic;">data</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span><span style="color:#F07178;"> </span></span>
<span class="line"><span style="color:#BABED8;">      state</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">message</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> data</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">message</span><span style="color:#F07178;"> </span></span>
<span class="line"><span style="color:#89DDFF;">    }</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span><span style="color:#BABED8;">)</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div></li></ul><p>需要注意的是 <code>onBeforeMount</code>钩子 和 <code>onMounted</code> 钩子需要在 <code>setup</code>函数中使用</p></li><li><p><strong>onBeforeUpdate 和 onUpdated</strong></p></li></ul><p><code>onBeforeMount</code> 和 <code>onMounted</code> 都是 Vue3 中的生命周期钩子，它们分别在组件<code>更新</code>之前和之后运行</p><ul><li><p><strong>onBeforeUpdate</strong></p><p><code>onBeforeUpdate</code> 钩子函数会在数据重新渲染之前运行，可以用来在组件更新前执行一些操作</p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#C792EA;"> lang</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">ts</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;"> setup</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  import</span><span style="color:#89DDFF;"> {</span><span style="color:#BABED8;"> onBeforeUpdate</span><span style="color:#89DDFF;"> }</span><span style="color:#89DDFF;font-style:italic;"> from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">  let</span><span style="color:#BABED8;"> count </span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;"> 1</span></span>
<span class="line"><span style="color:#82AAFF;">  onBeforeUpdate</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">    console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">before update</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> count</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span><span style="color:#BABED8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> handleClick </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> ()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">    count</span><span style="color:#89DDFF;">++</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">  &lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">    &lt;</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;{{</span><span style="color:#BABED8;"> count </span><span style="color:#89DDFF;">}}&lt;/</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">    &lt;</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;"> @</span><span style="color:#C792EA;">click</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">handleClick</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;">增加</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">  &lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><p>在上面的示例中，我们通过 <code>onBeforeUpdate</code> 钩子注册了 一个函数，在每次组件更新之前输出计数器数据的值，同时， 在方法中添加了一个按钮点击事件， 用于修改计数器的值</p><ul><li><p><strong>onUpdated</strong></p><p><code>onMounted</code> 钩子函数会在数据重新渲染后运行，通常用于更新 DOM 执行动画或获取最新的状态等操作</p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#C792EA;"> lang</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">ts</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;"> setup</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  import</span><span style="color:#89DDFF;"> {</span><span style="color:#BABED8;"> onMounted</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> onUpdated</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> ref</span><span style="color:#89DDFF;"> }</span><span style="color:#89DDFF;font-style:italic;"> from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;"> </span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> message </span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;"> ref</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">hello</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">  onMounted</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 模拟异步消息</span></span>
<span class="line"><span style="color:#82AAFF;">    setTimeout</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">      message</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">value</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">vue3</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">    },</span><span style="color:#F78C6C;">2000</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span><span style="color:#BABED8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">  onUpdate</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">    console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">DOM updated</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span><span style="color:#BABED8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> handleClick </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> ()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#82AAFF;">    alert</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">message</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">value</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">  &lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">   &lt;</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span><span style="color:#89DDFF;"> {{</span><span style="color:#BABED8;"> message </span><span style="color:#89DDFF;">}}</span><span style="color:#89DDFF;"> &lt;/</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">   &lt;</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;"> #</span><span style="color:#C792EA;">click</span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;">handleClick</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;">获取最新的值</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">  &lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div></li></ul></li><li><p><strong>onBeforeUnmount 和 onUnmounted</strong></p></li></ul><p>当组件不再被需要时， Vue3 将依次执行 beforeUnmount 和 unmount 钩子函数。 beforeUnmount钩子函数在组件卸载之前调用 通常用于处理一些事件监听器或者一些异步任务</p><p>Unmounted钩子函数在组件完全被卸载后调用，此时，组件可以回收内存等资源</p><ul><li><p><strong>onBeforeUnmount</strong></p><p><code>onBeforeUnmount</code>钩子会在组件卸载之前进行 通常可以用来清除定时器、取消事件监听器等操作</p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#C792EA;"> lang</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">ts</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;"> setup</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  import</span><span style="color:#89DDFF;"> {</span><span style="color:#BABED8;"> onBeforeUnmount</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> ref</span><span style="color:#89DDFF;"> }</span><span style="color:#89DDFF;font-style:italic;"> from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> timer </span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;"> ref</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">null</span><span style="color:#BABED8;">)</span></span>
<span class="line"><span style="color:#82AAFF;">  onBeforeUnmount</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#82AAFF;">    clearInterval</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">timer</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">value</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span><span style="color:#BABED8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> startTimer </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> ()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">    timer</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">value</span><span style="color:#89DDFF;"> =</span><span style="color:#82AAFF;"> setInterval</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">      console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">hello</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">    },</span><span style="color:#F78C6C;"> 1000</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> clearTimer </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> ()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#82AAFF;">    clearInterval</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">timer</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">value</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">  &lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">    &lt;</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;">定时器示例</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">    &lt;</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;"> @</span><span style="color:#C792EA;">click</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">startTimer</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;">开始</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">    &lt;</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;"> @</span><span style="color:#C792EA;">click</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">stopTimer</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;">停止</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">  &lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div></li><li><p><strong>onUnmount</strong></p><p><code>onUnmounted</code> 钩子函数会在组件卸载后运行，通常用于清理一些资源或取消订阅。</p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#C792EA;"> lang</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">ts</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;"> setup</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  import</span><span style="color:#89DDFF;"> {</span><span style="color:#BABED8;"> onMounted</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> onUnmounted</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> ref</span><span style="color:#89DDFF;"> }</span><span style="color:#89DDFF;font-style:italic;"> from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> message </span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;"> ref</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;&#39;</span><span style="color:#BABED8;">)</span></span>
<span class="line"><span style="color:#C792EA;">  let</span><span style="color:#BABED8;"> subscription </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> null</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">  onMounted</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 模拟创建一个订阅</span></span>
<span class="line"><span style="color:#BABED8;">    subscription</span><span style="color:#89DDFF;"> =</span><span style="color:#82AAFF;"> setInterval</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">      message</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">value</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> new</span><span style="color:#82AAFF;"> Date</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toLocaleTimeString</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#89DDFF;">    },</span><span style="color:#F78C6C;"> 1000</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span><span style="color:#BABED8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">  onUnmounted</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 在组件卸载后取消订阅</span></span>
<span class="line"><span style="color:#82AAFF;">    clearInterval</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">subscription</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span><span style="color:#BABED8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> unsubscribe </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> ()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#82AAFF;">    clearInterval</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">subscription</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">  &lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">    &lt;</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;{{</span><span style="color:#BABED8;"> message </span><span style="color:#89DDFF;">}}&lt;/</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">    &lt;</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;"> @</span><span style="color:#C792EA;">click</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">unsubscribe</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;">取消订阅</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">  &lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div></li></ul></li></ul>`,29),c=[t];function r(F,D,y,d,i,u){return n(),a("div",null,c)}const g=s(e,[["render",r]]);export{A as __pageData,g as default};
