import{_ as s,o as a,c as n,a8 as l}from"./chunks/framework.Qf1t7Yq5.js";const A=JSON.parse('{"title":"Array.reduce 方法的使用场景","description":"","frontmatter":{},"headers":[],"relativePath":"native/javascript/reduce方法的使用场景.md","filePath":"native/javascript/reduce方法的使用场景.md","lastUpdated":1709109134000}'),p={name:"native/javascript/reduce方法的使用场景.md"},o=l(`<h1 id="array-reduce-方法的使用场景" tabindex="-1">Array.reduce 方法的使用场景 <a class="header-anchor" href="#array-reduce-方法的使用场景" aria-label="Permalink to &quot;Array.reduce 方法的使用场景&quot;">​</a></h1><h3 id="功能" tabindex="-1">功能 <a class="header-anchor" href="#功能" aria-label="Permalink to &quot;功能&quot;">​</a></h3><p><code>Array.prototype.reduce</code> 方法泛用性很强, 这个方法功能主要是对数组中每个元素执 行一个提供的reducer函数， 每一次运行reducer函数会将先前的结果作为参数传入，最后 将其结果汇总为单个返回值</p><p>第一次执行回调函数时， 不存在&#39;上一次计算结果&#39;。 如果需要回调函数从数组索引为0的 元素开始执行，则需要传入初始值。 否则，<strong>数组索引为0的元素将被作为初始值，迭代器将从第二个元素开始执行(即索引为1的位置而不是索引0的位置开始)</strong></p><h3 id="参数值" tabindex="-1">参数值 <a class="header-anchor" href="#参数值" aria-label="Permalink to &quot;参数值&quot;">​</a></h3><p><strong>reduce</strong>方法主要接收两个参数， 一个是执行操作的回调函数， 一个初始值(可选)。</p><h5 id="回调函数" tabindex="-1">回调函数 <a class="header-anchor" href="#回调函数" aria-label="Permalink to &quot;回调函数&quot;">​</a></h5><p>回调函数是数组中每个元素执行的函数， 其返回值将作为下一次调用回调函数时的 <code>accumulator</code> 参数。对于最后一次调用， 返回值将作为reducd方法的返回值， 这个回调函数支持传入四个参数：</p><ul><li><p><strong>accumulator</strong></p><p>上一次调用 回调函数的结果。 在第一次调用时， 如果指定了 <code>initialValue</code>, 则为指定的<code>initialValue</code>, 否则为Array[0]的值</p></li><li><p><strong>currentValue</strong></p><p>当前元素的值。在第一次调用时，如果指定了 <code>initialValue</code>， 则为Array[0]的值， 否则为Array[1]</p></li><li><p><strong>currentIndex</strong></p></li></ul><p>参数<code>currentValue</code>在数组中的索引的位置。，如果指定了 <code>initialValue</code> 则为 0，否则为 1</p><ul><li><strong>array</strong></li></ul><p>调用了reduce方法的原数组本身。</p><h5 id="initialvalue" tabindex="-1">initialValue <a class="header-anchor" href="#initialvalue" aria-label="Permalink to &quot;initialValue&quot;">​</a></h5><p>第一次调用回调函数初始化 <code>accumulator</code>的值。 如果指定了 <code>initialValue</code>， 则回调函数从数组中第一个元素<code>currentValue</code>开始执行。 如果没有 <code>initialValue</code>， 则 <code>accumulator</code>初始 化为数组中的第一个值， 回调函数从数组中的第二个值作为<code>currentValue</code>开始执行。在这种情况下，在这种情况下，如果数组为空（没有第一个值可以作为 <code>accumulator</code> 返回），则会抛出错误。</p><h3 id="使用场景" tabindex="-1">使用场景 <a class="header-anchor" href="#使用场景" aria-label="Permalink to &quot;使用场景&quot;">​</a></h3><h5 id="一维数组求和" tabindex="-1">一维数组求和 <a class="header-anchor" href="#一维数组求和" aria-label="Permalink to &quot;一维数组求和&quot;">​</a></h5><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> arr</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> number</span><span style="color:#BABED8;">[] </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> [</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;"> 1</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;"> 2</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;"> 3</span><span style="color:#BABED8;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// acc: 表示的是累加器 accumulator</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// cur： 表示的是当前元素</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> sum </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> arr</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">reduce</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">acc</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> cur</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  return</span><span style="color:#BABED8;"> acc</span><span style="color:#89DDFF;"> +</span><span style="color:#BABED8;"> cur</span></span>
<span class="line"><span style="color:#89DDFF;">},</span><span style="color:#F78C6C;"> 0</span><span style="color:#BABED8;">)</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(sum) </span><span style="color:#676E95;font-style:italic;">// 输出 6</span></span></code></pre></div><h5 id="累加对象数组里的值" tabindex="-1">累加对象数组里的值 <a class="header-anchor" href="#累加对象数组里的值" aria-label="Permalink to &quot;累加对象数组里的值&quot;">​</a></h5><p><code>reduce</code>方法不仅可以求纯数字数组的和， 针对对象数组里的值也可以求和</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">type</span><span style="color:#FFCB6B;"> Item</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> {</span><span style="color:#F07178;">x</span><span style="color:#89DDFF;"> :</span><span style="color:#FFCB6B;"> number</span><span style="color:#89DDFF;"> }</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> initValue </span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;"> 0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> arr</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> Item</span><span style="color:#BABED8;">[] </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> [ </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> x</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 1</span><span style="color:#89DDFF;"> },</span><span style="color:#89DDFF;"> {</span><span style="color:#F07178;"> x</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 2</span><span style="color:#89DDFF;"> },</span><span style="color:#89DDFF;"> {</span><span style="color:#F07178;"> x</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 3</span><span style="color:#89DDFF;"> }</span><span style="color:#BABED8;"> ]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> sum </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> arr</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">reduce</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">acc</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> cur</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  return</span><span style="color:#BABED8;"> acc</span><span style="color:#89DDFF;"> +</span><span style="color:#BABED8;"> cur</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">x</span></span>
<span class="line"><span style="color:#89DDFF;">},</span><span style="color:#BABED8;"> initValue)</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(sum) </span><span style="color:#676E95;font-style:italic;">// 输出为6</span></span></code></pre></div><h5 id="展平嵌套数组" tabindex="-1">展平嵌套数组 <a class="header-anchor" href="#展平嵌套数组" aria-label="Permalink to &quot;展平嵌套数组&quot;">​</a></h5><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> arr</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> [</span><span style="color:#FFCB6B;">number</span><span style="color:#89DDFF;">,</span><span style="color:#FFCB6B;"> number</span><span style="color:#BABED8;">] </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> [[</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;"> 1</span><span style="color:#BABED8;">]</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> [</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;"> 3</span><span style="color:#BABED8;">]</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> [</span><span style="color:#F78C6C;">4</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;"> 5</span><span style="color:#BABED8;">]]</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> sum </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> arr</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">reduce</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">acc</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> cur</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  return</span><span style="color:#BABED8;"> acc</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">concat</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">cur</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">},</span><span style="color:#BABED8;">[])</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(sum) </span><span style="color:#676E95;font-style:italic;">// 输出结果为 [0, 1, 2, 3, 4, 5]</span></span></code></pre></div><h5 id="统计对象中值出现的次数" tabindex="-1">统计对象中值出现的次数 <a class="header-anchor" href="#统计对象中值出现的次数" aria-label="Permalink to &quot;统计对象中值出现的次数&quot;">​</a></h5><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> names</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> string</span><span style="color:#BABED8;">[] </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> [</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">陈大</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">李二</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">张三</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">朱四</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">王五</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">张三</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">]</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> countNames </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> names</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">reduce</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">acc</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> cur</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> counts</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;">number</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> acc</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">cur</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">??</span><span style="color:#F78C6C;"> 0</span><span style="color:#676E95;font-style:italic;"> // 判断累加器的结果中是否有未记录的名称key</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  return</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;">    ...</span><span style="color:#BABED8;">acc</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    [</span><span style="color:#BABED8;">cur</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> counts</span><span style="color:#89DDFF;"> +</span><span style="color:#F78C6C;"> 1</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;">},</span><span style="color:#89DDFF;"> {}</span><span style="color:#BABED8;">) </span><span style="color:#676E95;font-style:italic;">// 通过传入一个空对象，表示累加器通过对象操作来控制名称key出现的次数</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(countNames) </span><span style="color:#676E95;font-style:italic;">// 输出值为 { &#39;陈大&#39;: 1, &#39;李二&#39;: 1, &#39;张三&#39;: 2, &#39;朱四&#39;: 1, &#39;王五&#39;: 1 }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 第二种写法， 只是实现方法不同</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> countNames </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> names</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">reduce</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">acc</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> cur</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">cur</span><span style="color:#89DDFF;"> in</span><span style="color:#BABED8;"> acc</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">    acc</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">cur</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">++</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span><span style="color:#89DDFF;font-style:italic;"> else</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">    acc</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">cur</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;"> 1</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;">},</span><span style="color:#89DDFF;"> {}</span><span style="color:#BABED8;">)</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(countNames) </span><span style="color:#676E95;font-style:italic;">// 输出值为 { &#39;陈大&#39;: 1, &#39;李二&#39;: 1, &#39;张三&#39;: 2, &#39;朱四&#39;: 1, &#39;王五&#39;: 1 }</span></span></code></pre></div><h5 id="按属性对对象进行分组" tabindex="-1">按属性对对象进行分组 <a class="header-anchor" href="#按属性对对象进行分组" aria-label="Permalink to &quot;按属性对对象进行分组&quot;">​</a></h5><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">type</span><span style="color:#FFCB6B;"> Item</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> {</span><span style="color:#F07178;"> name</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> string</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> age</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> number</span><span style="color:#89DDFF;"> }</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> objArr</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> Item</span><span style="color:#BABED8;">[] </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> [</span></span>
<span class="line"><span style="color:#89DDFF;">  {</span><span style="color:#F07178;"> name</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">Alice</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> age</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 21</span><span style="color:#89DDFF;"> },</span></span>
<span class="line"><span style="color:#89DDFF;">  {</span><span style="color:#F07178;"> name</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">Max</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> age</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 20</span><span style="color:#89DDFF;"> },</span></span>
<span class="line"><span style="color:#89DDFF;">  {</span><span style="color:#F07178;"> name</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">Jane</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> age</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 20</span><span style="color:#89DDFF;"> },</span></span>
<span class="line"><span style="color:#BABED8;">]</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> groupBy </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> (</span><span style="color:#BABED8;font-style:italic;">arr</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> prop</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  return</span><span style="color:#BABED8;"> arr</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">reduce</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">acc</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> cur</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;">    const</span><span style="color:#BABED8;"> key</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> cur</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">prop</span><span style="color:#F07178;">]</span></span>
<span class="line"><span style="color:#C792EA;">    const</span><span style="color:#BABED8;"> curGroup</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> acc</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">key</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">??</span><span style="color:#F07178;"> []</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    return</span><span style="color:#89DDFF;"> {</span><span style="color:#89DDFF;"> ...</span><span style="color:#BABED8;">acc</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> [</span><span style="color:#BABED8;">key</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> [</span><span style="color:#89DDFF;">...</span><span style="color:#BABED8;">curGroup</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> cur</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">  },</span><span style="color:#89DDFF;"> {}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> groupePeople </span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;"> groupBy</span><span style="color:#BABED8;">(objArr</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">age</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(groupePeople)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 输出结果为 </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//   20: [</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//     { name: &#39;Max&#39;, age: 20 },</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//     { name: &#39;Jane&#39;, age: 20 }</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//   ],</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//   21: [</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//     { name: &#39;Alice&#39;, age: 21 }</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//   ]</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 第二种写法</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> groupBy </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> (</span><span style="color:#BABED8;font-style:italic;">arr</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> prop</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  return</span><span style="color:#BABED8;"> arr</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">reduce</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">acc</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> cur</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;">    const</span><span style="color:#BABED8;"> key</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> cur</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">prop</span><span style="color:#F07178;">]</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">!</span><span style="color:#BABED8;">acc</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">key</span><span style="color:#F07178;">]) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">      acc</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">key</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> []</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#BABED8;">    acc</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">key</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">cur</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    return</span><span style="color:#BABED8;"> acc</span></span>
<span class="line"><span style="color:#89DDFF;">  },</span><span style="color:#89DDFF;"> {}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> groupePeople </span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;"> groupBy</span><span style="color:#BABED8;">(objArr</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">age</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(groupePeople)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 输出结果为 </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//   20: [</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//     { name: &#39;Max&#39;, age: 20 },</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//     { name: &#39;Jane&#39;, age: 20 }</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//   ],</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//   21: [</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//     { name: &#39;Alice&#39;, age: 21 }</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//   ]</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// }</span></span></code></pre></div><h5 id="使用扩展运算符和-initialvalue-连接包含在对象数组中的数组" tabindex="-1">使用扩展运算符和 <code>initialValue</code> 连接包含在对象数组中的数组 <a class="header-anchor" href="#使用扩展运算符和-initialvalue-连接包含在对象数组中的数组" aria-label="Permalink to &quot;使用扩展运算符和 \`initialValue\` 连接包含在对象数组中的数组&quot;">​</a></h5><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">type</span><span style="color:#FFCB6B;"> Item</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">  name</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> string</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  books</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> string</span><span style="color:#BABED8;">[]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  age</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> number</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> friends</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;">Item</span><span style="color:#BABED8;">[] </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> [</span></span>
<span class="line"><span style="color:#89DDFF;">  {</span></span>
<span class="line"><span style="color:#F07178;">    name</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">Anna</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    books</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> [</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Bible</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">harry Potter</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    age</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 21</span></span>
<span class="line"><span style="color:#89DDFF;">  },</span></span>
<span class="line"><span style="color:#89DDFF;">  {</span></span>
<span class="line"><span style="color:#F07178;">    name</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">Bob</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    books</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> [</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">War and Sapce</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">Romeo and Juliet</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">]</span></span>
<span class="line"><span style="color:#BABED8;">    age: </span><span style="color:#F78C6C;">26</span></span>
<span class="line"><span style="color:#89DDFF;">  },</span></span>
<span class="line"><span style="color:#89DDFF;">  {</span></span>
<span class="line"><span style="color:#F07178;">    name</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">Alice</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    books</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> [</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">The lord of the Rings</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">The Shining</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    age</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 18</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#BABED8;">]</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> allBooks </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> friends</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">reduce</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">acc</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> cur</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  return</span><span style="color:#F07178;"> [</span><span style="color:#89DDFF;">...</span><span style="color:#BABED8;">acc</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> ...</span><span style="color:#BABED8;">cur</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">books</span><span style="color:#F07178;">]</span></span>
<span class="line"><span style="color:#89DDFF;">},</span><span style="color:#BABED8;"> [</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Alphabet</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">])</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(allBooks) </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 输出结果为</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// [&#39;Alphabet&#39;, &#39;Bible&#39;, &#39;Harry Potter&#39;, &#39;War and Space&#39;, &#39;Romeo and Juliet&#39;, &#39;The Lord of the Rings&#39;, &#39;The Shining&#39;]</span></span></code></pre></div><h5 id="数组去重" tabindex="-1">数组去重 <a class="header-anchor" href="#数组去重" aria-label="Permalink to &quot;数组去重&quot;">​</a></h5><div class="info custom-block"><p class="custom-block-title">备注</p><p>可以使用 <code>Set</code> 和 <code>Array.from()</code>来实现同样的效果， 如<code>const arr = Array.from(new Set(myArray))</code>, 并且性能更好。</p></div><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> myArray</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> string</span><span style="color:#BABED8;">[] </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;">  [</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">a</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">b</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">a</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">b</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">c</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">e</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">e</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">c</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">d</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">d</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">d</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">d</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">]</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> myArr </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> myArray</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">reduce</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">acc</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> crr</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">!</span><span style="color:#BABED8;">acc</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">includes</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">cur</span><span style="color:#F07178;">)) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    return</span><span style="color:#F07178;"> [</span><span style="color:#89DDFF;">...</span><span style="color:#BABED8;">acc</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> cur</span><span style="color:#F07178;">]</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  return</span><span style="color:#BABED8;"> acc</span></span>
<span class="line"><span style="color:#89DDFF;">},</span><span style="color:#BABED8;"> [])</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(myArr) </span><span style="color:#676E95;font-style:italic;">// 输出结果为 [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//第二种实现方式</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> myArr </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> myArray</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">reduce</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">acc</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> cur</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">acc</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">length</span><span style="color:#89DDFF;"> ===</span><span style="color:#F78C6C;"> 0</span><span style="color:#89DDFF;"> ||</span><span style="color:#BABED8;"> acc</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">acc</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">length</span><span style="color:#89DDFF;"> -</span><span style="color:#F78C6C;"> 1</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">!==</span><span style="color:#BABED8;"> cur</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">    acc</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">cur</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  return</span><span style="color:#BABED8;"> acc</span></span>
<span class="line"><span style="color:#89DDFF;">},</span><span style="color:#BABED8;"> [])</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(myArr) </span><span style="color:#676E95;font-style:italic;">// 输出结果为 [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;]</span></span></code></pre></div><h5 id="使用-reduce-来替代-filer-map" tabindex="-1">使用 reduce() 来替代 .filer().map() <a class="header-anchor" href="#使用-reduce-来替代-filer-map" aria-label="Permalink to &quot;使用 reduce() 来替代 .filer().map()&quot;">​</a></h5><blockquote><p>使用<code>.filter()</code> 和 <code>.map()</code>会遍历数组两次，但是可以使用<code>reduce()</code>只遍历一次并实现相同的效果， 从而更高效 (如果你喜欢使用<code>for</code>循环， 你可以再遍历一次时使用<code>forEach()</code>进行过滤和映射)</p></blockquote><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> arr</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> number</span><span style="color:#BABED8;">[] </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> [</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">5</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;"> 6</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;"> 2</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;"> 0</span><span style="color:#BABED8;">]</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> newArr </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> arr</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">reduce</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">acc</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> cur</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;">=&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  if</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">cur</span><span style="color:#89DDFF;"> &gt;</span><span style="color:#F78C6C;"> 0</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#C792EA;">    const</span><span style="color:#BABED8;"> doubled</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> cur</span><span style="color:#89DDFF;"> *</span><span style="color:#F78C6C;"> 2</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    return</span><span style="color:#F07178;"> [</span><span style="color:#89DDFF;">...</span><span style="color:#BABED8;">acc</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> doubled</span><span style="color:#F07178;">]</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  return</span><span style="color:#BABED8;"> acc</span></span>
<span class="line"><span style="color:#89DDFF;">},</span><span style="color:#BABED8;"> [])</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(newArr) </span><span style="color:#676E95;font-style:italic;">// 输出为[12, 4]</span></span></code></pre></div><h5 id="按顺序运行promise" tabindex="-1">按顺序运行promise <a class="header-anchor" href="#按顺序运行promise" aria-label="Permalink to &quot;按顺序运行promise&quot;">​</a></h5><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * 链接一系列 Promise 处理程序。</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * </span><span style="color:#89DDFF;font-style:italic;">@</span><span style="color:#C792EA;font-style:italic;">param</span><span style="color:#89DDFF;font-style:italic;"> {</span><span style="color:#FFCB6B;font-style:italic;">array</span><span style="color:#89DDFF;font-style:italic;">}</span><span style="color:#BABED8;font-style:italic;"> arr</span><span style="color:#676E95;font-style:italic;">——一个 Promise 处理程序列表，每个处理程序接收前一个处理程序解决的结果并返回另一个 Promise。</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * </span><span style="color:#89DDFF;font-style:italic;">@</span><span style="color:#C792EA;font-style:italic;">param</span><span style="color:#89DDFF;font-style:italic;"> {</span><span style="color:#FFCB6B;font-style:italic;">*</span><span style="color:#89DDFF;font-style:italic;">}</span><span style="color:#BABED8;font-style:italic;"> input</span><span style="color:#676E95;font-style:italic;">——开始调用 Promise 链的初始值</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * </span><span style="color:#89DDFF;font-style:italic;">@</span><span style="color:#C792EA;font-style:italic;">return</span><span style="color:#89DDFF;font-style:italic;"> {</span><span style="color:#FFCB6B;font-style:italic;">Object</span><span style="color:#89DDFF;font-style:italic;">}</span><span style="color:#676E95;font-style:italic;">——由一系列 Promise 链接而成的 Promise</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#82AAFF;"> runPromiseInSequence</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">arr</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> input</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  return</span><span style="color:#BABED8;"> arr</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">reduce</span><span style="color:#F07178;">(</span></span>
<span class="line"><span style="color:#89DDFF;">    (</span><span style="color:#BABED8;font-style:italic;">acc</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> curFunc</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#BABED8;"> acc</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">then</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">curFunc</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#FFCB6B;">    Promise</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">resolve</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">input</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  )</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// Promise 函数 1</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#82AAFF;"> p1</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">a</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  return</span><span style="color:#89DDFF;"> new</span><span style="color:#FFCB6B;"> Promise</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">resolve</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> reject</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#82AAFF;">    resolve</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">a</span><span style="color:#89DDFF;"> *</span><span style="color:#F78C6C;"> 5</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// Promise 函数 2</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#82AAFF;"> p2</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">a</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  return</span><span style="color:#89DDFF;"> new</span><span style="color:#FFCB6B;"> Promise</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">resolve</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> reject</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#82AAFF;">    resolve</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">a</span><span style="color:#89DDFF;"> *</span><span style="color:#F78C6C;"> 2</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 函数 3——将由 \`.then()\` 包装在已解决的 Promise 中</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#82AAFF;"> f3</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">a</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  return</span><span style="color:#BABED8;"> a</span><span style="color:#89DDFF;"> *</span><span style="color:#F78C6C;"> 3</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// Promise 函数 4</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#82AAFF;"> p4</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">a</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  return</span><span style="color:#89DDFF;"> new</span><span style="color:#FFCB6B;"> Promise</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">resolve</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> reject</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#82AAFF;">    resolve</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">a</span><span style="color:#89DDFF;"> *</span><span style="color:#F78C6C;"> 4</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#BABED8;"> </span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> promiseArr </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> [p1</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> p2</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> f3</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> p4]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#82AAFF;">runPromiseInSequence</span><span style="color:#BABED8;">(promiseArr</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;"> 10</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">then</span><span style="color:#BABED8;">(console</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">log)</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> // 1200</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">注意</p><blockquote><p>这个方法与<code>promise.all</code>相似， 但并不完全相同，</p></blockquote><p><code>promise.all</code>方法主要侧重于多个<code>promise</code>并行执行, 并在所有 Promise 都成功时才返回结果;</p><p>这个方法则侧重于按顺序执行<code>Promise</code>操作, 并允许处理程序之间的传递结果</p></div><h5 id="在稀疏数组中使用reduce" tabindex="-1">在稀疏数组中使用reduce <a class="header-anchor" href="#在稀疏数组中使用reduce" aria-label="Permalink to &quot;在稀疏数组中使用reduce&quot;">​</a></h5><blockquote><p><code>reduce()</code>会跳过稀疏数组中缺失的元素， 但不会跳过<code>undefined</code> 值</p></blockquote><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">([</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;"> 2</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> ,</span><span style="color:#F78C6C;"> 4</span><span style="color:#BABED8;">]</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">reduce</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">acc</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> cur</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#BABED8;"> acc </span><span style="color:#89DDFF;">+</span><span style="color:#BABED8;"> cur)) </span><span style="color:#676E95;font-style:italic;">// 输出为7</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">([</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;"> 2</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> undefined,</span><span style="color:#F78C6C;"> 4</span><span style="color:#BABED8;">]</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">reduce</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">acc</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> cur</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#BABED8;"> acc </span><span style="color:#89DDFF;">+</span><span style="color:#BABED8;"> cur)) </span><span style="color:#676E95;font-style:italic;">// 输出为NaN</span></span></code></pre></div><h5 id="非数组对象上调用reduce" tabindex="-1">非数组对象上调用reduce <a class="header-anchor" href="#非数组对象上调用reduce" aria-label="Permalink to &quot;非数组对象上调用reduce&quot;">​</a></h5><blockquote><p><code>reduce()</code>方法读取<code>this</code>的<code>length</code> 属性， 然后访问每个整数索引</p></blockquote><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> arrLike </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">  length</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 3</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F78C6C;">  0</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 2</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F78C6C;">  1</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 3</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F78C6C;">  2</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 4</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(</span><span style="color:#FFCB6B;">Array</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">reduce</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">call</span><span style="color:#BABED8;">(arrLike</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> (</span><span style="color:#BABED8;font-style:italic;">x</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> y</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#BABED8;"> x </span><span style="color:#89DDFF;">+</span><span style="color:#BABED8;"> y)) </span><span style="color:#676E95;font-style:italic;">// 输出结果为9</span></span></code></pre></div><h5 id="功能性函数管道" tabindex="-1">功能性函数管道 <a class="header-anchor" href="#功能性函数管道" aria-label="Permalink to &quot;功能性函数管道&quot;">​</a></h5><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 组合使用的构建块</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> double </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> (</span><span style="color:#BABED8;font-style:italic;">x</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#F78C6C;"> 2</span><span style="color:#89DDFF;"> *</span><span style="color:#BABED8;"> x</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> triple </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> (</span><span style="color:#BABED8;font-style:italic;">x</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#F78C6C;"> 3</span><span style="color:#89DDFF;"> *</span><span style="color:#BABED8;"> x</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> quadruple </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> (</span><span style="color:#BABED8;font-style:italic;">x</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#F78C6C;"> 4</span><span style="color:#89DDFF;"> *</span><span style="color:#BABED8;"> x</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 函数组合，实现管道功能</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> pipe </span><span style="color:#89DDFF;">=</span></span>
<span class="line"><span style="color:#89DDFF;">  (...</span><span style="color:#BABED8;font-style:italic;">functions</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;"> =&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">  (</span><span style="color:#BABED8;font-style:italic;">initialValue</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;"> =&gt;</span></span>
<span class="line"><span style="color:#BABED8;">    functions</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">reduce</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">acc</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> fn</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#82AAFF;"> fn</span><span style="color:#BABED8;">(acc)</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> initialValue)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 组合的函数，实现特定值的乘法</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> multiply6 </span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;"> pipe</span><span style="color:#BABED8;">(double</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> triple)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> multiply9 </span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;"> pipe</span><span style="color:#BABED8;">(triple</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> triple)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> multiply16 </span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;"> pipe</span><span style="color:#BABED8;">(quadruple</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> quadruple)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> multiply24 </span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;"> pipe</span><span style="color:#BABED8;">(double</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> triple</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> quadruple)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 用例</span></span>
<span class="line"><span style="color:#82AAFF;">multiply6</span><span style="color:#BABED8;">(</span><span style="color:#F78C6C;">6</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> // 36</span></span>
<span class="line"><span style="color:#82AAFF;">multiply9</span><span style="color:#BABED8;">(</span><span style="color:#F78C6C;">9</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> // 81</span></span>
<span class="line"><span style="color:#82AAFF;">multiply16</span><span style="color:#BABED8;">(</span><span style="color:#F78C6C;">16</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> // 256</span></span>
<span class="line"><span style="color:#82AAFF;">multiply24</span><span style="color:#BABED8;">(</span><span style="color:#F78C6C;">10</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> // 240</span></span></code></pre></div>`,45),e=[o];function t(c,r,y,D,F,i){return a(),n("div",null,e)}const E=s(p,[["render",t]]);export{A as __pageData,E as default};
