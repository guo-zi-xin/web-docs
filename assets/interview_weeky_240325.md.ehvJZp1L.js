import{_ as o}from"./chunks/CustomLink.HhFLulSs.js";import{_ as t,o as r,c as l,m as a,J as p,a8 as e}from"./chunks/framework.QttzOlP4.js";const g=JSON.parse('{"title":"24-03-25 面试 Vue","description":"","frontmatter":{},"headers":[],"relativePath":"interview/weeky/240325.md","filePath":"interview/weeky/240325.md","lastUpdated":1711377820000}'),d={name:"interview/weeky/240325.md"},n=e('<h1 id="_24-03-25-面试-vue" tabindex="-1">24-03-25 面试 Vue <a class="header-anchor" href="#_24-03-25-面试-vue" aria-label="Permalink to &quot;24-03-25 面试 Vue&quot;">​</a></h1><h3 id="项目中遇到过什么难点" tabindex="-1">项目中遇到过什么难点 <a class="header-anchor" href="#项目中遇到过什么难点" aria-label="Permalink to &quot;项目中遇到过什么难点&quot;">​</a></h3><h3 id="拖拽的功能实现主要使用的什么api" tabindex="-1">拖拽的功能实现主要使用的什么API <a class="header-anchor" href="#拖拽的功能实现主要使用的什么api" aria-label="Permalink to &quot;拖拽的功能实现主要使用的什么API&quot;">​</a></h3><h5 id="drag-events-api" tabindex="-1">Drag Events API <a class="header-anchor" href="#drag-events-api" aria-label="Permalink to &quot;Drag Events API&quot;">​</a></h5><ul><li><p><code>dragstart</code>：当拖动操作开始时触发。</p></li><li><p><code>drag</code>：在拖动过程中连续触发。</p></li><li><p><code>dragenter</code>：当拖动元素进入可放置区域时触发。</p></li><li><p><code>dragover</code>：在拖动元素在可放置区域内移动时触发。</p></li><li><p><code>dragleave</code>：当拖动元素离开可放置区域时触发。</p></li><li><p><code>drop</code>：当拖动元素被放置在可放置区域内时触发。</p></li><li><p><code>dragend</code>：当拖动操作结束时触发。</p></li></ul><h5 id="html5-drag-and-drop-api" tabindex="-1">HTML5 Drag and Drop API <a class="header-anchor" href="#html5-drag-and-drop-api" aria-label="Permalink to &quot;HTML5 Drag and Drop API&quot;">​</a></h5><ul><li><p><code>draggable</code> 属性：用于设置元素是否可拖动。</p></li><li><p><code>dataTransfer</code> 对象：用于在拖放操作之间传递数据，包括拖动元素的数据和效果等。</p></li></ul><h5 id="css-属性" tabindex="-1">CSS 属性 <a class="header-anchor" href="#css-属性" aria-label="Permalink to &quot;CSS 属性&quot;">​</a></h5><ul><li><p><code>cursor</code>：用于指定鼠标悬停在拖动元素上时的光标样式。</p></li><li><p><code>user-select</code>：用于指定用户是否可以选择文本。</p></li></ul><h5 id="javascript-编程" tabindex="-1">JavaScript 编程 <a class="header-anchor" href="#javascript-编程" aria-label="Permalink to &quot;JavaScript 编程&quot;">​</a></h5><ul><li><p>通过事件监听器监听拖拽相关事件，如 <code>dragstart</code>、<code>dragover</code>、<code>drop</code> 等。</p></li><li><p>在事件处理函数中实现拖拽操作的逻辑，包括设置拖动元素的样式、处理拖动数据、处理拖动过程中的位置变化等。</p></li></ul><h3 id="typescript常用的类型工具" tabindex="-1">Typescript常用的类型工具 <a class="header-anchor" href="#typescript常用的类型工具" aria-label="Permalink to &quot;Typescript常用的类型工具&quot;">​</a></h3>',12),c=e('<h3 id="vuex和pinia的区别" tabindex="-1">Vuex和Pinia的区别 <a class="header-anchor" href="#vuex和pinia的区别" aria-label="Permalink to &quot;Vuex和Pinia的区别&quot;">​</a></h3><h3 id="option-api-和-composition-api-区别" tabindex="-1">option API 和 Composition API 区别 <a class="header-anchor" href="#option-api-和-composition-api-区别" aria-label="Permalink to &quot;option API 和 Composition API 区别&quot;">​</a></h3><ul><li><p>在逻辑组织和逻辑复用方面，Composition API是优于Options API</p></li><li><p>因为Composition API几乎是函数，会有更好的类型推断。</p></li><li><p>Composition API 对 tree-shaking 友好，代码也更容易压缩</p></li><li><p>Composition API中见不到this的使用，减少了this指向不明的情况</p></li><li><p>如果是小型组件，可以继续使用Options API，也是十分友好的</p></li></ul>',3);function s(h,u,_,m,P,A){const i=o;return r(),l("div",null,[n,a("ul",null,[a("li",null,[p(i,{title:"Typescript常用类型工具",href:"/native/typescript/常用类型工具"})])]),c])}const v=t(d,[["render",s]]);export{g as __pageData,v as default};
