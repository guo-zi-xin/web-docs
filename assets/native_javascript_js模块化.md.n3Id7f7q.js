import{_ as s,o as a,c as n,a8 as l}from"./chunks/framework.QttzOlP4.js";const u=JSON.parse('{"title":"JS模块化","description":"","frontmatter":{},"headers":[],"relativePath":"native/javascript/js模块化.md","filePath":"native/javascript/js模块化.md","lastUpdated":1700734386000}'),p={name:"native/javascript/js模块化.md"},o=l(`<h1 id="js模块化" tabindex="-1">JS模块化 <a class="header-anchor" href="#js模块化" aria-label="Permalink to &quot;JS模块化&quot;">​</a></h1><p><strong>JavaScript的 <code>ESM</code> <code>AMD</code> <code>UMD</code> <code>CJS</code></strong></p><ul><li><strong><code>ESM</code></strong></li></ul><blockquote><p>​<strong>ESM代表ES模块，是Javascript提出的实现一个标准模块的系统方案。类似:</strong></p></blockquote><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">  import</span><span style="color:#BABED8;"> React </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">react</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  import</span><span style="color:#BABED8;"> Vue </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">&#39;</span></span></code></pre></div><p>或者</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">  import</span><span style="color:#89DDFF;"> {</span><span style="color:#BABED8;">foo</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> bar</span><span style="color:#89DDFF;">}</span><span style="color:#89DDFF;font-style:italic;"> from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">./myLib</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#BABED8;">  ···</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  export</span><span style="color:#89DDFF;font-style:italic;"> default</span><span style="color:#C792EA;"> function</span><span style="color:#89DDFF;"> ()</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // your Funciton</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  export</span><span style="color:#C792EA;"> const</span><span style="color:#BABED8;"> function1() {...}</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  export</span><span style="color:#C792EA;"> const</span><span style="color:#BABED8;"> function2() {...}</span></span></code></pre></div><ul><li><p>在很多现代浏览器可以使用</p></li><li><p>它兼具两方面的优点：具有<code>CJS</code>的简单语法和<code>AMD</code>的异步;</p></li><li><p>得益于ES6的静态模块结构，可以进行<code>Tree Shaking</code>;</p></li><li><p><code>ESM</code>允许像<code>Rollup</code> 这样的打包器，删除不必要的代码，减少代码包可以获得更快的加载;</p></li></ul><p><strong>可以在HTML中调用， 只要如下:</strong></p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#89DDFF;">  &lt;</span><span style="color:#F07178;">script</span><span style="color:#C792EA;"> type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">module</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#BABED8;">    import </span><span style="color:#89DDFF;">{</span><span style="color:#BABED8;">func1</span><span style="color:#89DDFF;">}</span><span style="color:#BABED8;"> from &#39;my-lib&#39;</span></span>
<span class="line"><span style="color:#BABED8;">    func1()</span></span>
<span class="line"><span style="color:#89DDFF;">  &lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><ul><li><p><strong><code>CJS</code></strong></p><ul><li>CJS是CommonJS的缩写，经常是这么使用</li></ul><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#676E95;font-style:italic;">  // importing(导入)</span></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> doSomething </span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;"> require</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./doSomething.js</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span></span>
<span class="line"><span style="color:#BABED8;">  </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // exporting(导出)</span></span>
<span class="line"><span style="color:#89DDFF;">  module.exports</span><span style="color:#89DDFF;"> =</span><span style="color:#C792EA;"> function</span><span style="color:#82AAFF;"> doSomething</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">n</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // do something</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span></code></pre></div><ul><li><p>CJS是同步导入模块</p><ul><li><p>可以从node_modules中引入一个库或者从本地目录引入一个文件，例如</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> myLocalModule </span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;"> require</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./some/local/file.js</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 或者</span></span>
<span class="line"><span style="color:#C792EA;">  var</span><span style="color:#BABED8;"> React </span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;"> require</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">react</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span></span></code></pre></div></li></ul><p>都会生效</p></li><li><p>当CJS导入时，他会给你一个导入对象的副本</p></li><li><p>CJS不能在浏览器中工作，他必须经过转换和打包</p></li></ul></li><li><p><strong><code>AMD</code></strong></p></li></ul><p><strong>AMD代表异步模块定义，例如:</strong></p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#82AAFF;">define</span><span style="color:#BABED8;">([</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">dep1</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">dep2</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">]</span><span style="color:#89DDFF;">,</span><span style="color:#C792EA;"> function</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">dep1</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> dep2</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // Define the module value by returning a value</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  return</span><span style="color:#C792EA;"> function</span><span style="color:#89DDFF;">()</span><span style="color:#89DDFF;"> {}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span></span></code></pre></div><p>或者</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#82AAFF;">define</span><span style="color:#BABED8;">(</span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">require</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;">  var</span><span style="color:#BABED8;"> dep1</span><span style="color:#89DDFF;"> =</span><span style="color:#82AAFF;"> require</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">dep1</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#BABED8;">  dep2</span><span style="color:#89DDFF;"> =</span><span style="color:#82AAFF;"> require</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">dep2</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  return</span><span style="color:#C792EA;"> function</span><span style="color:#89DDFF;"> ()</span><span style="color:#89DDFF;"> {}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span></span></code></pre></div><ul><li><p>AMD是异步（asynchronously）导入模块的（因此得名</p></li><li><p>一开始被提议的时候，AMD是为前端而做的（而CJS是后端</p></li><li><p>AMD语法不如CJS直观</p></li><li><p><strong><code>UMD</code></strong>（Universal Module Definition）</p></li></ul><p><strong>通用模块定义</strong></p><ul><li>在前端和后端都适用（“通用”因此而得名）</li><li>与CJS或AMD不同， UMD更像是一种配置多个模块系统的模式</li><li>当使用Rollup/webpack之类的打包器时， UMD通常用作备用模块</li></ul>`,18),e=[o];function t(c,r,i,D,y,F){return a(),n("div",null,e)}const A=s(p,[["render",t]]);export{u as __pageData,A as default};
