import{_ as e}from"./chunks/CustomLink.YXjObPrq.js";import{_ as t,o as c,c as r,k as s,a,t as l,I as o,R as n,an as F}from"./chunks/framework.AonOEUEq.js";const L=JSON.parse('{"title":"Vue","description":"","frontmatter":{},"headers":[],"relativePath":"interview/frame/vue.md","filePath":"interview/frame/vue.md","lastUpdated":1704197441000}'),D={name:"interview/frame/vue.md"},y=n('<h1 id="vue" tabindex="-1">Vue <a class="header-anchor" href="#vue" aria-label="Permalink to &quot;Vue&quot;">​</a></h1><h3 id="vue的核心" tabindex="-1">vue的核心 <a class="header-anchor" href="#vue的核心" aria-label="Permalink to &quot;vue的核心&quot;">​</a></h3><p>Vue是一套构建用户界面的渐进式、自底向上增量开发的 MVVM 模型的框架， vue的核心只关注视图层</p><h5 id="核心思想" tabindex="-1">核心思想 <a class="header-anchor" href="#核心思想" aria-label="Permalink to &quot;核心思想&quot;">​</a></h5><ul><li>数据驱动(视图内容随着数据的改变而改变)</li><li>组件话(可以增加代码复用性、可维护性、可测试性，提高了开发效率， 方便重复使用， 体现了高内聚低耦合)</li></ul><details class="details custom-block"><summary>MVVM模型</summary><p><strong>定义</strong></p><p>MVVM(Model-View-ViewModel)是一种前端设计模式，它将应用程序分为三个部分：模型(Model)、视图(View)和视图模型(ViewModel)。 这种设计模式有助于实现前端应用程序的解耦和可维护性</p><p><strong>基本概念</strong></p><ul><li>模型(Model): 模型是应用程序的数据部分，包含了应用程序的数据和业务逻辑，模型通常通过AJAX请求与后端交互，以获取或更新数据</li><li>视图(View): 视图是用户界面的一部分，负则呈现模型数据，视图通常是用 HTML 和 CSS 编写的，可以使用模版引擎来渲染动态数据。</li><li>视图模型(ViewModel): ViewModel是链接模型和视图的桥梁，它负责将模型数据映射到视图上，并将用户的交互事件传递给模型。 ViewModel可以使用数据绑定来自动更新视图，当模型数据发生改变时 视图自动更新</li></ul><p>在 MVVM 中， 最重要的部分是数据绑定和双向数据绑定</p><p><em>数据绑定</em> 是指将视图中的元素绑定到模型数据的过程，当模型数据发生变化时， 视图将自动更新</p><p><em>双向数据绑定</em> 是指同时将视图中的元素绑定到模型数据，并将模型数据绑定到视图中的元素，当视图或模型中的数据发生变化时，另一部分将自动更新</p><p><strong>MVVM优点</strong></p><ol><li><em>关注点分离</em>: MVVM模式通过明确的分层将数据、用户界面和业务逻辑分离开来。这有助于提高代码可维护性和可测试性，使开发人员更容易地修改、扩展和维护不同的部分</li><li><em>代码重用</em>: VIewModel 可以根据不同的视图需求进行调整，从而实现业务逻辑的重用。这允许在不同的视图之间共享共同的ViewModel</li><li><em>团队协作</em>: MVVM模式的分层结构可以使不同的团队成员在不同层次上独立工作，减少了彼此的依赖性</li><li><em>可维护性</em>: 由于数据逻辑与展示逻辑分开，所以对逻辑的修改和调试不影响用户界面的呈现</li><li><em>数据绑定</em>: MVVM模式通常具有双向数据绑定的功能，使视图与数据保持同步，从而实现了更实时的用户体验</li><li><em>响应式编程</em>: MVVM模式通常设计响应式编程范式，使数据的变化能够自动传播到相关的视图中</li></ol><p><strong>MVVM缺点</strong></p><ol><li><em>复杂性</em>: MVVM模式引入了额外的层次和概念，可能会增加项目的初始学习成本，特别是对于初学者来说</li><li><em>性能</em>: 在某些情况下，MVVM模式可能引入额外的性能开销，特别是实现数据绑定和观察者模式时。虽然现在前端框架会优化这些问题，但仍然需要注意这些问题</li><li><em>过度工程</em>: 在小型应用中， 采用 MVVM 模式可能会导致过度设计，增加不必要的复杂性</li><li><em>状态管理</em>: 在一些复杂的应用中，随着视图和数据逻辑的增加，可能会涉及到复杂的状态管理问题，如果不恰当地管理好状态，可能会导致应用变得难以理解和维护</li></ol></details><details class="details custom-block"><summary>MVVM与MVC的区别</summary><p><code>MVC</code>是<em>Model</em>-<em>View</em>-<em>Controller</em>的简写。即模型-视图-控制器。M和V指的意思和MVVM中的M和V意思一样。C即Controller指的是页面业务逻辑， 使用MVC的目的就是将M和V的代码分离。MVC是单向通信。也就是View跟Model，必须通过Controller来承上启下。</p><p><strong>两者区别</strong></p><p>MVC和MVVM其实区别并不大，都是一种设计思想， MVC和MVVM的区别并不是VM完全取代了C，只是在MVC的基础上增加了一层VM，不过是弱化了C的概念</p><p>ViewModel存在目的在于抽离Controller中展示的业务逻辑，而不是替代Controller，其它视图操作业务等还是应该放在Controller中实现， 也就是说MVVM实现的是业务逻辑组件的重用，使开发更高效，结构更清晰，增加代码的复用性。</p></details><h3 id="vue中的单项数据流" tabindex="-1">Vue中的单项数据流 <a class="header-anchor" href="#vue中的单项数据流" aria-label="Permalink to &quot;Vue中的单项数据流&quot;">​</a></h3><p>父级 prop 的更新都会向下流动到子组件中，每次父组件发生更新，子组件所有的 prop 都会刷新为最新的值</p><p>数据从父组件传递给子组件，只能单向绑定，子组件内部不能直接修改父组件传递过来的数据，(可以使用 data 和 computed 解决)</p><h3 id="vue中常用的修饰符" tabindex="-1">Vue中常用的修饰符 <a class="header-anchor" href="#vue中常用的修饰符" aria-label="Permalink to &quot;Vue中常用的修饰符&quot;">​</a></h3><table><thead><tr><th style="text-align:left;">修饰符</th><th style="text-align:left;">功能</th></tr></thead><tbody><tr><td style="text-align:left;">修饰符</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;"><code>.lazy</code></td><td style="text-align:left;">改变后触发，光标离开 input 输入框的时候值才会改变</td></tr><tr><td style="text-align:left;"><code>.number</code></td><td style="text-align:left;">将输出字符串转化为 number 类型</td></tr><tr><td style="text-align:left;"><code>.trim</code></td><td style="text-align:left;">自动过滤用户输入的首尾空格</td></tr><tr><td style="text-align:left;">事件修饰符</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;"><code>.stop</code></td><td style="text-align:left;">阻止点击事件冒泡，相当于原生中<code>event.stopPropagation()</code></td></tr><tr><td style="text-align:left;"><code>.prevent</code></td><td style="text-align:left;">防止执行预设的行为, 相当于原生中的<code>event.preventDefault()</code></td></tr><tr><td style="text-align:left;"><code>.captrue</code></td><td style="text-align:left;">添加事件侦听器时使用事件捕获模式，就是谁有该事件修饰符，就先触发谁</td></tr><tr><td style="text-align:left;"><code>.self</code></td><td style="text-align:left;">只会触发自己范围内的事件，不包括子元素</td></tr><tr><td style="text-align:left;"><code>.once</code></td><td style="text-align:left;">只执行一次</td></tr><tr><td style="text-align:left;"><code>.passive</code></td><td style="text-align:left;">一般触摸事件的修饰符，常用于改善移动端设备的滚屏性能</td></tr><tr><td style="text-align:left;">键盘修饰符</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;"><code>.enter</code></td><td style="text-align:left;">回车键</td></tr><tr><td style="text-align:left;"><code>.delete</code></td><td style="text-align:left;">捕获 Delete 和 Backspace 两个键位</td></tr><tr><td style="text-align:left;"><code>.tab</code></td><td style="text-align:left;">制表键</td></tr><tr><td style="text-align:left;"><code>.esc</code></td><td style="text-align:left;">返回键</td></tr><tr><td style="text-align:left;"><code>.space</code></td><td style="text-align:left;">空格键</td></tr><tr><td style="text-align:left;"><code>.up</code>/<code>.down</code>/<code>.left</code>/<code>.right</code></td><td style="text-align:left;">向上/下/左/右</td></tr><tr><td style="text-align:left;">系统按键修饰符</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;"><code>.ctrl</code>/<code>.alt</code>/<code>.shift</code>/<code>.meta</code></td><td style="text-align:left;">按下对应键位触发</td></tr></tbody></table>',12),i={id:"v-text、-、v-html区别",tabindex:"-1"},d=s("code",null,"v-text",-1),u=s("code",null,"v-html",-1),B=s("a",{class:"header-anchor",href:"#v-text、-、v-html区别","aria-label":'Permalink to "`v-text`、`{{}}`、`v-html`区别"'},"​",-1),g=s("hr",null,null,-1),E=s("h5",{id:"",tabindex:"-1"},[s("code",null,"{ { } }"),a(),s("a",{class:"header-anchor",href:"#","aria-label":'Permalink to "`{ { } }`"'},"​")],-1),A=s("p",null,[a("模版插值"),s("code",null,"{ { } }"),a(" 将数据解析成纯文本，并不能显示输出 html")],-1),h=s("h5",{id:"v-text",tabindex:"-1"},[s("code",null,"v-text"),a(),s("a",{class:"header-anchor",href:"#v-text","aria-label":'Permalink to "`v-text`"'},"​")],-1),C=s("code",null,"v-text",-1),m=s("code",null,"v-text",-1),v=s("code",null,"v-text",-1),f=n('<h5 id="v-html" tabindex="-1"><code>v-html</code> <a class="header-anchor" href="#v-html" aria-label="Permalink to &quot;`v-html`&quot;">​</a></h5><p><code>v-html</code>可以渲染输出 html</p><h3 id="v-on是否可以绑定多个方法" tabindex="-1"><code>v-on</code>是否可以绑定多个方法 <a class="header-anchor" href="#v-on是否可以绑定多个方法" aria-label="Permalink to &quot;`v-on`是否可以绑定多个方法&quot;">​</a></h3><p>可以的， 如果绑定多个事件，可以使用键值对形式：事件类型: 事件名；</p><p>如果绑定的是多个相同事件， 直接使用逗号分隔就可以</p><h3 id="vue-v-for循环中-key的作用" tabindex="-1">Vue <code>v-for</code>循环中 <code>key</code>的作用 <a class="header-anchor" href="#vue-v-for循环中-key的作用" aria-label="Permalink to &quot;Vue `v-for`循环中 `key`的作用&quot;">​</a></h3><p>设置的 <code>key</code> 是保证唯一性， Vue在执行时，会对节点进行检查，如果没有key值，那么vue检查到这里有 DOM 节点，就会对内容清空并赋新值，如果有 <code>key</code> 存在，那么会对新老节点进行对比，比较两者 <code>key</code> 是否相同，进行调换位置或删除操作</p><h3 id="计算属性-computed" tabindex="-1">计算属性(<code>computed</code>) <a class="header-anchor" href="#计算属性-computed" aria-label="Permalink to &quot;计算属性(`computed`)&quot;">​</a></h3><p>计算属性是用来声明式地描述一个值依赖了其他的值，当它依赖的这个值发生改变时，就更新 DOM</p><p>当在模版中把数据绑定到一个计算属性上时， Vue会在它依赖的任何值导致该计算属性改变时更新 DOM</p><p>每个计算属性都包括一个 getter 和 setter， 读取时触发 getter ， 修改时触发 setter</p><h3 id="vue中跳转路由的方式" tabindex="-1">Vue中跳转路由的方式 <a class="header-anchor" href="#vue中跳转路由的方式" aria-label="Permalink to &quot;Vue中跳转路由的方式&quot;">​</a></h3><p>Vue中路由跳转的方式有两种，分别是 声明式 和 编程式</p><p>用 js 方式进行跳转的叫做编程式导航 <code>this.$router.push()</code></p><p>用 router-link 进行跳转的叫声明式 router-view 路由出口， 路由模版显示的位置</p><p><strong>路由中name的作用</strong></p><p>在 router-link 中使用 name 导航到对应路由</p><p>使用 name 导航的同时，给子路由传递参数</p><h3 id="vue-跨域解决方案" tabindex="-1">Vue 跨域解决方案 <a class="header-anchor" href="#vue-跨域解决方案" aria-label="Permalink to &quot;Vue 跨域解决方案&quot;">​</a></h3><ol><li>后台更改<code>header</code></li><li>使用 <code>http-proxy-middleware</code> (配置代理服务器的中间件)</li></ol><h3 id="vue-生命周期" tabindex="-1">Vue 生命周期 <a class="header-anchor" href="#vue-生命周期" aria-label="Permalink to &quot;Vue 生命周期&quot;">​</a></h3>',21),b=n(`<h3 id="vue-路由的实现" tabindex="-1">Vue 路由的实现 <a class="header-anchor" href="#vue-路由的实现" aria-label="Permalink to &quot;Vue 路由的实现&quot;">​</a></h3><p>vue路由有三种模式，分别是 <code>hash</code>、<code>history</code>、<code>abstract</code></p><ul><li><code>hash</code>: 使用 URL的 hash值来做路由，支持所有浏览器，包括不支持 HTML5 History API的浏览器</li><li><code>history</code>: 依赖 HTML5 History API和服务器配置</li><li><code>abstract</code>: 支持所有 Javascript运行环境，如 Node.js服务器端。如果发现没有浏览器的API，路由强制进入这个模式</li></ul><h5 id="基本原理" tabindex="-1">基本原理 <a class="header-anchor" href="#基本原理" aria-label="Permalink to &quot;基本原理&quot;">​</a></h5><p>useRouter() 中的 push 和 replace 是手动调用内部路径切换方法 transitionTo，go、back、 forward 方法实际调用的是 window.history.go(), 以及浏览器的前进后退会触发相应的监听事件 然后调用 transitionTo， 之后更新路由， 触发 <code>&lt;router-view&gt;</code> 的重新渲染</p><ul><li><code>hash</code> 模式是优先监听 popstate 事件，不行就降级为 hashchange 事件， <code>history</code> 模式监听 popstate 事件</li><li>history.pushState() 和 history.replaceState() 修改浏览器历史栈后 url 改变但不会刷新页面， 不会触发 popstate 事件</li><li>window.location.hash = &#39;#/b&#39; 修改 hash 不会刷新页面，会触发 hashchange 事件， hash的改变会自动添加到浏览器历史记录中</li></ul><h3 id="vue-路由模式-hash-和-history" tabindex="-1">Vue 路由模式 hash 和 history <a class="header-anchor" href="#vue-路由模式-hash-和-history" aria-label="Permalink to &quot;Vue 路由模式 hash 和 history&quot;">​</a></h3><h5 id="hash" tabindex="-1">hash <a class="header-anchor" href="#hash" aria-label="Permalink to &quot;hash&quot;">​</a></h5><p>hash 模式是用 <code>createWebHashHistory()</code> 创建的</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#89DDFF;"> {</span><span style="color:#BABED8;"> createRouter</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> createWebHashHistory</span><span style="color:#89DDFF;"> }</span><span style="color:#89DDFF;font-style:italic;"> from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">vue-router</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> router </span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;"> createRouter</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  history</span><span style="color:#89DDFF;">:</span><span style="color:#82AAFF;"> createWebHashHistory</span><span style="color:#BABED8;">()</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  routes</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> [</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // ...</span></span>
<span class="line"><span style="color:#BABED8;">  ]</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span></span></code></pre></div><p>hash 模式在内部传递的实际URL之前使用了一个哈希字符(<code>#</code>)，</p><p>由于这部分 URL 从未被发送到服务器，所以它不需要在服务器里面进行任何特殊处理，对后端没啥影响</p><p>改变Hash值不会重新加载页面，因为浏览器可以通过<code>onHashChange()</code>事件监听Hash的辩护，从而实现前端路由切换</p><p>浏览器支持度友好，包括低版本IE浏览器，已经成为SPA标配</p><p><strong>原理</strong>: Hash模式的主要原理是<code>onhashchange</code>事件，无需向后端发起请求，浏览器可以监听哈希值的变化，并按照规则加载相应的代码，同时， Hash值的变化会被浏览器记录，实现页面的前进和后退功能</p><p>不过，<strong>它在SEO中的确有不好的影响</strong></p><h5 id="history" tabindex="-1">history <a class="header-anchor" href="#history" aria-label="Permalink to &quot;history&quot;">​</a></h5><p>history就是 HTML5模式， 使用<code>createWebHistory()</code>创建 HTML5 模式，推荐使用这个模式</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#89DDFF;"> {</span><span style="color:#BABED8;"> createRouter</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> createWebHistory</span><span style="color:#89DDFF;"> }</span><span style="color:#89DDFF;font-style:italic;"> from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">vue-router</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> router </span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;"> createRouter</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  history</span><span style="color:#89DDFF;">:</span><span style="color:#82AAFF;">createWebHistory</span><span style="color:#BABED8;">()</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  routes</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> [</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // ...</span></span>
<span class="line"><span style="color:#BABED8;">  ]</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span></span></code></pre></div><p>History模式的URL中没有<code>#</code>号，采用传统的路由分发模式，即用户输入 URL 时， 服务器接收请求并解析 URL， 然后进行相应的逻辑处理</p><p>当使用这种模式时， 会导致一个问题，由于我们是一个单页的客户端应用，如果没有适当的服务器配置，用户在浏览器中直接访问没有配置的路由时，会返回404</p><p><strong>API</strong>: history模式使用 History API， 包括 <code>pushState()</code>和 <code>replaceState()</code>方法用于修改历史状态，以及 <code>forward()</code>、<code>back()</code>、<code>go()</code> 方法用于切换历史状态</p><h5 id="两者区别" tabindex="-1">两者区别 <a class="header-anchor" href="#两者区别" aria-label="Permalink to &quot;两者区别&quot;">​</a></h5><ul><li><p>History模式优势</p><p><code>pushState()</code> 设置的新URL可以与当前URL同源的URL，而 Hash只能修改<code>#</code>的部分</p><p>可以设置与当前URL一样的新的URL，将记录添加到栈中</p><p>可以通过<code>stateObject</code>参数添加任意类型的数据到记录中，而Hash只能添加短字符串</p><p>可以额外设置title属性供后续使用</p></li><li><p>URL处理</p><p>在Hash模式下，仅Hash符号之前的URL会被包含在请求中，后端如果没有覆盖所有路由，也不会返回404错误</p></li></ul><h3 id="vue-路由传参的两种方式-params-和-query方式与区别" tabindex="-1">Vue 路由传参的两种方式，params 和 query方式与区别 <a class="header-anchor" href="#vue-路由传参的两种方式-params-和-query方式与区别" aria-label="Permalink to &quot;Vue 路由传参的两种方式，params 和 query方式与区别&quot;">​</a></h3><h5 id="路由参数-params" tabindex="-1">路由参数(params) <a class="header-anchor" href="#路由参数-params" aria-label="Permalink to &quot;路由参数(params)&quot;">​</a></h5><p>路由参数通常用于标识性的信息，如资源ID、用户ID等，他们直接包含在路由的路径中，这些参数作为路径的一部分，提供了对特定资源的访问</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 路由定义</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#FFCB6B;">  path</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">/user/:id</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#FFCB6B;">  component</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> UseProfile</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>在页面中调用：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#BABED8;">router</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">path</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">/user/123</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span></span></code></pre></div><p><strong>优点</strong></p><p>直观， 路由参数直接体现在url中，用户可以直接看到传递的信息</p><p><strong>缺点</strong></p><p>有限性，路由参数通常只能传递有限数量的信息，因为他们必须以路径的一部分存在</p><h5 id="查询参数-query" tabindex="-1">查询参数(query) <a class="header-anchor" href="#查询参数-query" aria-label="Permalink to &quot;查询参数(query)&quot;">​</a></h5><p>查询参数适合用于传递非标识性信息，如筛选条件、搜索关键字、分页信息等，他们不包含在路由的路径中，而是作为键值对附加到URL后面</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 导航到搜索页面并传递查询参数</span></span>
<span class="line"><span style="color:#BABED8;">router</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> path</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">/search</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> query</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> {</span><span style="color:#F07178;"> q</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> category</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">framework</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;"> }</span><span style="color:#89DDFF;"> }</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p><strong>优点</strong></p><p>查询参数可以传递多个键值对，因此更灵活，适用于各种场景。</p><p>查询参数式可选的，因此可以选择何时传递它们</p><p><strong>缺点</strong></p><p>查询参数不像路由参数那么直观，因为他们不包含在路径中，用户不容易传递信息</p><h5 id="何时使用" tabindex="-1">何时使用 <a class="header-anchor" href="#何时使用" aria-label="Permalink to &quot;何时使用&quot;">​</a></h5><ul><li><p><strong>params</strong></p><p>标识性信息：当需要传递标识性信息，如用户ID，帖子ID等，使用路由参数更合适</p><p>确保信息直接可见：如果希望用户能够在URL中看到传递的信息，使用路由参数</p></li><li><p><strong>query</strong></p><p>非标识性信息：当需要传递筛选条件、搜索关键字、分页信息等非标识性信息时，查询参数更合适</p><p>灵活性: 如果需要传递多个键值对或灵活地控制何时传递参数、使用查询参数</p><p>非必要信息: 查询参数通常用于传递可选信息，不影响访问资源的关键性标识</p></li></ul><h3 id="vue-数据绑定的几种方式" tabindex="-1">Vue 数据绑定的几种方式 <a class="header-anchor" href="#vue-数据绑定的几种方式" aria-label="Permalink to &quot;Vue 数据绑定的几种方式&quot;">​</a></h3><h5 id="插值-interpolation" tabindex="-1">插值(interpolation) <a class="header-anchor" href="#插值-interpolation" aria-label="Permalink to &quot;插值(interpolation)&quot;">​</a></h5>`,46),q=n(`<div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#C792EA;"> lang</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">ts</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;"> setup</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#89DDFF;"> {</span><span style="color:#BABED8;"> ref</span><span style="color:#89DDFF;"> }</span><span style="color:#89DDFF;font-style:italic;"> from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> message </span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;"> ref</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">hello world</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">  &lt;</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;">{{message}}</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><h5 id="绑定属性-binding-attributes" tabindex="-1">绑定属性(Binding Attributes) <a class="header-anchor" href="#绑定属性-binding-attributes" aria-label="Permalink to &quot;绑定属性(Binding Attributes)&quot;">​</a></h5><p>使用 <code>v-bind</code> 指令可以将一个变量的值绑定到HTML元素属性上</p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#C792EA;"> lang</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">ts</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;"> setup</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#89DDFF;"> {</span><span style="color:#BABED8;"> ref</span><span style="color:#89DDFF;"> }</span><span style="color:#89DDFF;font-style:italic;"> from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> url </span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;"> ref</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">www.baidu.com</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">  &lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">    &lt;</span><span style="color:#F07178;">a</span><span style="color:#C792EA;"> v-bind:href</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">url</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;">点击跳转</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">a</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">  &lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><h5 id="动态类绑定-dynamic-class-binding" tabindex="-1">动态类绑定(Dynamic Class Binding) <a class="header-anchor" href="#动态类绑定-dynamic-class-binding" aria-label="Permalink to &quot;动态类绑定(Dynamic Class Binding)&quot;">​</a></h5><p>使用<code>v-bind:class</code>可以根据条件动态绑定类名</p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#C792EA;"> lang</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">ts</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;"> setup</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#89DDFF;"> {</span><span style="color:#BABED8;"> ref</span><span style="color:#89DDFF;"> }</span><span style="color:#89DDFF;font-style:italic;"> from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> isActive </span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;"> ref</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">boolean</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;">(</span><span style="color:#FF9CAC;">false</span><span style="color:#BABED8;">)</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> hasError </span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;"> ref</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">boolean</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;">(</span><span style="color:#FF9CAC;">false</span><span style="color:#BABED8;">)</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">  &lt;</span><span style="color:#F07178;">div</span><span style="color:#C792EA;"> v-bind:class</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">{&#39;active&#39;: isActive, &#39;text-danger&#39;: hasError}</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;">类名</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">style</span><span style="color:#C792EA;"> lang</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">scss</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;"> scoped</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">active</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#B2CCD6;">  display</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> inline-block</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">text-danger</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#B2CCD6;">  color</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> red</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">style</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><p>也可以使用数组语法</p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#C792EA;"> lang</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">ts</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;"> setup</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#89DDFF;"> {</span><span style="color:#BABED8;"> ref</span><span style="color:#89DDFF;"> }</span><span style="color:#89DDFF;font-style:italic;"> from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> isActive </span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;"> ref</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">boolean</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;">(</span><span style="color:#FF9CAC;">false</span><span style="color:#BABED8;">)</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> hasError </span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;"> ref</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">boolean</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;">(</span><span style="color:#FF9CAC;">false</span><span style="color:#BABED8;">)</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">  &lt;</span><span style="color:#F07178;">div</span><span style="color:#C792EA;"> v-bind:class</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">[isActive ? &#39;active&#39;: &#39;&#39;, hasError ? &#39;text-danger&#39; : &#39;&#39;]</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;">类名</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">style</span><span style="color:#C792EA;"> lang</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">scss</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;"> scoped</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">active</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#B2CCD6;">  display</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> inline-block</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">text-danger</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#B2CCD6;">  color</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> red</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">style</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><h5 id="动态样式绑定-dynamic-style-binding" tabindex="-1">动态样式绑定(Dynamic Style Binding) <a class="header-anchor" href="#动态样式绑定-dynamic-style-binding" aria-label="Permalink to &quot;动态样式绑定(Dynamic Style Binding)&quot;">​</a></h5><p>使用 <code>v-bind:style</code> 可以根据条件动态绑定样式</p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#C792EA;"> lang</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">ts</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;"> setup</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#89DDFF;"> {</span><span style="color:#BABED8;"> ref</span><span style="color:#89DDFF;"> }</span><span style="color:#89DDFF;font-style:italic;"> from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> activeColor </span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;"> ref</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">red</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> fontSize </span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;"> ref</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">number</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;">(</span><span style="color:#F78C6C;">14</span><span style="color:#BABED8;">)</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">  &lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">    &lt;</span><span style="color:#F07178;">p</span><span style="color:#C792EA;"> v-bind:style</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">&#39;color&#39;: activeColor; &#39;fontSize&#39;: fontSize + &#39;px&#39;</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;">样式信息</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">  &lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><p>也可以使用对象语法</p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#C792EA;"> lang</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">ts</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;"> setup</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#89DDFF;"> {</span><span style="color:#BABED8;"> ref</span><span style="color:#89DDFF;"> }</span><span style="color:#89DDFF;font-style:italic;"> from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> activeColor </span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;"> ref</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">red</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> fontSize </span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;"> ref</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">number</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;">(</span><span style="color:#F78C6C;">14</span><span style="color:#BABED8;">)</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">  &lt;</span><span style="color:#F07178;">div</span><span style="color:#C792EA;"> :style</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">{ &#39;color&#39;: activeColor, &#39;font-size&#39;: fontSize + &#39;px&#39; }</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;">样式信息</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><h5 id="表单输入绑定-form-input-binding" tabindex="-1">表单输入绑定(Form input Binding) <a class="header-anchor" href="#表单输入绑定-form-input-binding" aria-label="Permalink to &quot;表单输入绑定(Form input Binding)&quot;">​</a></h5><p>使用<code>v-model</code> 可以实现表单输入和数据的双向绑定</p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#C792EA;"> lang</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">ts</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;"> setup</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#89DDFF;"> {</span><span style="color:#BABED8;"> ref</span><span style="color:#89DDFF;"> }</span><span style="color:#89DDFF;font-style:italic;"> from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> message </span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;"> ref</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;&#39;</span><span style="color:#BABED8;">)</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">form</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">  &lt;</span><span style="color:#F07178;">input</span><span style="color:#C792EA;"> v-model</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">message</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">/&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">form</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><h5 id="事件绑定-event-binding" tabindex="-1">事件绑定(Event Binding) <a class="header-anchor" href="#事件绑定-event-binding" aria-label="Permalink to &quot;事件绑定(Event Binding)&quot;">​</a></h5><p>使用 <code>v-on</code> 可以将 DOM 事件绑定到 Vue 实例中的方法。</p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#C792EA;"> lang</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">ts</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;"> setup</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> doSomething </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> ():</span><span style="color:#FFCB6B;">void</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">    console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">do something</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">  &lt;</span><span style="color:#F07178;">button</span><span style="color:#C792EA;"> v-on:click</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">doSomething</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;">Click me</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><p>也可以使用缩写形式</p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#C792EA;"> lang</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">ts</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;"> setup</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> doSomething </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> ():</span><span style="color:#FFCB6B;">void</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">    console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">do something</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">  &lt;</span><span style="color:#F07178;">button</span><span style="color:#C792EA;"> @click</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">doSomething</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;">Click me</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><h3 id="vue-的路由钩子函数-路由守卫有哪些" tabindex="-1">Vue 的路由钩子函数/路由守卫有哪些 <a class="header-anchor" href="#vue-的路由钩子函数-路由守卫有哪些" aria-label="Permalink to &quot;Vue 的路由钩子函数/路由守卫有哪些&quot;">​</a></h3><h5 id="全局路由钩子-global-before-guards" tabindex="-1">全局路由钩子(Global Before Guards) <a class="header-anchor" href="#全局路由钩子-global-before-guards" aria-label="Permalink to &quot;全局路由钩子(Global Before Guards)&quot;">​</a></h5><p><code>beforeEach(to. from, next)</code> 在路由改变前触发，常用于全局的身份验证检查等</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> router </span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;"> createRouter</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">{</span><span style="color:#89DDFF;"> ...</span><span style="color:#89DDFF;"> }</span><span style="color:#BABED8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">router</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">beforeEach</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">to</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> from</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> next</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">to</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">path</span><span style="color:#89DDFF;"> ===</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">/login</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#82AAFF;"> next</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  //获取token</span></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> tokenStr</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> window</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">sessionStorage</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getItem</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">token</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">!</span><span style="color:#BABED8;">tokenStr</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#82AAFF;"> next</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/login</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#82AAFF;">  next</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span></span></code></pre></div><h5 id="路由独享守卫-per-route-guards" tabindex="-1">路由独享守卫(Per-Route Guards) <a class="header-anchor" href="#路由独享守卫-per-route-guards" aria-label="Permalink to &quot;路由独享守卫(Per-Route Guards)&quot;">​</a></h5><p><code>beforeEnter(to, from, next)</code>：在某个路由独享的守卫。</p><h5 id="组件内守卫-in-component-guards" tabindex="-1">组件内守卫(In-Component Guards) <a class="header-anchor" href="#组件内守卫-in-component-guards" aria-label="Permalink to &quot;组件内守卫(In-Component Guards)&quot;">​</a></h5><p><code>beforeRouteEnter(to, from, next)</code>：在路由进入的时候，但是在组件渲染之前被调用。</p><p><code>beforeRouteUpdate(to, from, next)</code>：在当前路由改变，但是该组件被复用时调用。</p><p><code>beforeRouteLeave(to, from, next)</code>：导航离开该组件的对应路由时调用。</p><p>接收三个参数：</p><p>to: Route 对象，表示要进入的目标路由。</p><p>from: Route 对象，表示当前导航正要离开的路由。</p><p>next: 一个函数，用于进入下一个钩子。</p><p><code>beforeResolve(to, from, mext)</code> 在导航被确认之前，也就是所有组件的<code>beforeRouterEnter</code> 被调用之后触发</p><p>在这些守卫中，通过调用 next 方法，可以控制路由导航的行为：</p><p>调用 <code>next()</code> 表示继续导航。</p><p>调用 <code>next(false)</code> 中止当前的导航。</p><p>调用 <code>next(&#39;/&#39;)</code> 或 <code>next({ path: &#39;/&#39; })</code> 重定向到一个不同的地址。</p><p>调用 <code>next(error)</code> 将会把导航终止，并把错误传递给 <code>router.onError</code> 注册过的回调。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#BABED8;"> Vue </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#BABED8;"> VueRouter </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">vue-router</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">Vue</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">use</span><span style="color:#BABED8;">(VueRouter)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> router </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> new</span><span style="color:#82AAFF;"> VueRouter</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  routes</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> [</span></span>
<span class="line"><span style="color:#89DDFF;">    {</span></span>
<span class="line"><span style="color:#F07178;">      path</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">/home</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">      component</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> Home</span></span>
<span class="line"><span style="color:#89DDFF;">    },</span></span>
<span class="line"><span style="color:#89DDFF;">    {</span></span>
<span class="line"><span style="color:#F07178;">      path</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">/dashboard</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">      component</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> Dashboard</span></span>
<span class="line"><span style="color:#89DDFF;">    },</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // ...其他路由配置</span></span>
<span class="line"><span style="color:#BABED8;">  ]</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">router</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">beforeEach</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">to</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> from</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> next</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 在进入每个路由前进行身份验证等操作</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">to</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">path</span><span style="color:#89DDFF;"> ===</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">/dashboard</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;"> &amp;&amp;</span><span style="color:#89DDFF;"> !</span><span style="color:#BABED8;">auth</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">isAuthenticated</span><span style="color:#F07178;">()) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#82AAFF;">    next</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/login</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> // 未登录时重定向到登录页</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span><span style="color:#89DDFF;font-style:italic;"> else</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#82AAFF;">    next</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> // 继续导航</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#89DDFF;font-style:italic;"> default</span><span style="color:#BABED8;"> router</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h3 id="vue-中如何自定义指令" tabindex="-1">Vue 中如何自定义指令 <a class="header-anchor" href="#vue-中如何自定义指令" aria-label="Permalink to &quot;Vue 中如何自定义指令&quot;">​</a></h3><p>vue中， 除了内置的一些列指令(如<code>v-model</code>和 <code>v-show</code>)之外， 还可以注册自定义的指令(Custom Directives)</p><p>自定义指令主要是为了重用涉及普通元素的底层DOM访问逻辑</p><h5 id="组成" tabindex="-1">组成 <a class="header-anchor" href="#组成" aria-label="Permalink to &quot;组成&quot;">​</a></h5><p>一个自定义指令是由一个包含类似组件生命周期钩子的对象来定义，钩子函数会接收到指令所绑定元素作为其参数</p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#C792EA;"> setup</span><span style="color:#C792EA;"> lang</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">ts</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 在模版中启用 v-focus</span></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> vFocus </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> (</span></span>
<span class="line"><span style="color:#82AAFF;">    mounted</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> (</span><span style="color:#BABED8;font-style:italic;">el</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#FFCB6B;"> el</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">focus</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#BABED8;">  )</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">  &lt;</span><span style="color:#F07178;">input</span><span style="color:#C792EA;"> v-focus</span><span style="color:#89DDFF;">/&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><p>在<code>&lt;script setup&gt;</code>中，任何以<code>v</code>开头的驼峰事命名的变量都可以被用作一个自定义指令，但在没有使用<code>&lt;script setup&gt;</code>的情况下，自定义指令需要通过<code>directive</code> 选项注册</p><p>也可以注册到全局</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> app </span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;"> createApp</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">{}</span><span style="color:#BABED8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 使 v-focus在所有组件中都可用</span></span>
<span class="line"><span style="color:#BABED8;">app</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">directive</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">focus</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // ...</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">TIP</p><p>只有当所需功能智能通过直接的 DOM 操作来实现时候，才应该使用自定义指令，其他情况下应该尽可能使用<code>v-bind</code>等内置指令来声明式地使用模版，这样更高效，也对服务端渲染更加友好</p></div><h3 id="vue-中指令" tabindex="-1">Vue 中指令 <a class="header-anchor" href="#vue-中指令" aria-label="Permalink to &quot;Vue 中指令&quot;">​</a></h3>`,54),x=n(`<h3 id="vue-如何定义一个过滤器" tabindex="-1">Vue 如何定义一个过滤器 <a class="header-anchor" href="#vue-如何定义一个过滤器" aria-label="Permalink to &quot;Vue 如何定义一个过滤器&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">注意</p><p>Vue3中， 过滤器这一概念已经被移除了，vue3变更为组合式API(Composition API)后, 移除了一些vue2中不太推荐使用的特性，包括全局过滤器, 官方建议用方法调用或计算属性替换自定义过滤器</p></div><p>Vue 允许自定义过滤器，可被用于一些常见的文本格式化，过滤器可以用在两个地方，双花括号插值和 v-bind表达式， 过滤器应该被添加在Javascript表达式的尾部，由<code>管道</code>符号<code>&#39;|&#39;</code>表示</p><h5 id="注册过滤器方式" tabindex="-1">注册过滤器方式 <a class="header-anchor" href="#注册过滤器方式" aria-label="Permalink to &quot;注册过滤器方式&quot;">​</a></h5><ul><li><strong>全局注册</strong></li></ul><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#676E95;font-style:italic;"> // Vue.filter() 注册一个自定义过滤器，它接收两个参数：过滤器 ID 和过滤器函数。过滤器函数以值为参数，返回</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> // 转换后的值</span></span>
<span class="line"><span style="color:#BABED8;"> Vue </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">filter</span><span style="color:#BABED8;">( </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">reverse</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;"> ,</span><span style="color:#C792EA;"> function</span><span style="color:#89DDFF;"> (</span><span style="color:#BABED8;font-style:italic;">value</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span><span style="color:#F07178;"> </span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">   return</span><span style="color:#BABED8;"> value</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">split</span><span style="color:#F07178;">( </span><span style="color:#89DDFF;">&#39;&#39;</span><span style="color:#F07178;"> )</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">reverse</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">join</span><span style="color:#F07178;">( </span><span style="color:#89DDFF;">&#39;&#39;</span><span style="color:#F07178;"> )    </span></span>
<span class="line"><span style="color:#89DDFF;"> }</span><span style="color:#BABED8;">)</span></span>
<span class="line"><span style="color:#BABED8;">     </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> // 这样我们就可以在全局使用reverse过滤器了</span></span>
<span class="line"><span style="color:#89DDFF;"> &lt;</span><span style="color:#F07178;">span</span><span style="color:#C792EA;"> v-text</span><span style="color:#89DDFF;"> = </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">message | reverse</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">span</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><ul><li><strong>局部注册</strong></li></ul><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 首先在共用文件里写好一个过滤方法，然后引入你的共用文件</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  import</span><span style="color:#BABED8;"> util </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">@/libs/util.methods</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 在你的页面代码里添加过滤器</span></span>
<span class="line"><span style="color:#FFCB6B;">  filters</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;">    &#39;</span><span style="color:#C3E88D;">filtersName</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">: </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;"> (</span><span style="color:#BABED8;font-style:italic;">value</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">      // return你的共用过滤方法</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">      return</span><span style="color:#BABED8;"> util</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">YourFilterName</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">value</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>然后在 HTML 代码里面就可以使用管道符来调用这个过滤器了</p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">  &lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;">{{ item.deviceGroupId | filtersName }}</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><h3 id="对-vue-中-keep-alive-的理解" tabindex="-1">对 Vue 中 keep-alive 的理解 <a class="header-anchor" href="#对-vue-中-keep-alive-的理解" aria-label="Permalink to &quot;对 Vue 中 keep-alive 的理解&quot;">​</a></h3>`,11),k=s("h3",{id:"vue双向绑定原理",tabindex:"-1"},[a("Vue双向绑定原理 "),s("a",{class:"header-anchor",href:"#vue双向绑定原理","aria-label":'Permalink to "Vue双向绑定原理"'},"​")],-1),V=n(`<h3 id="vue组件传值" tabindex="-1">Vue组件传值 <a class="header-anchor" href="#vue组件传值" aria-label="Permalink to &quot;Vue组件传值&quot;">​</a></h3><h4 id="父组件传递给子组件" tabindex="-1">父组件传递给子组件 <a class="header-anchor" href="#父组件传递给子组件" aria-label="Permalink to &quot;父组件传递给子组件&quot;">​</a></h4><ul><li><p><code>引用组件</code> - <code>注册组件</code> - <code>使用组件</code> - <code>传递数据</code></p></li><li><p>通过 自定义属性名=&quot;属性值&quot; 的形式传递数据</p></li></ul><h5 id="setup-函数版本" tabindex="-1">setup 函数版本 <a class="header-anchor" href="#setup-函数版本" aria-label="Permalink to &quot;setup 函数版本&quot;">​</a></h5><p><strong>父组件</strong></p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#C792EA;"> lang</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">ts</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  import</span><span style="color:#89DDFF;"> {</span><span style="color:#BABED8;"> reactive</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> toRefs</span><span style="color:#89DDFF;"> }</span><span style="color:#89DDFF;font-style:italic;"> from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> // 引入声明依赖</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  import</span><span style="color:#BABED8;"> child </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">@components/child.vue</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  export</span><span style="color:#89DDFF;font-style:italic;"> default</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">    name</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">AboutView</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 注册组件</span></span>
<span class="line"><span style="color:#F07178;">    componsnet</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> {</span><span style="color:#BABED8;"> child </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#F07178;">    setup</span><span style="color:#89DDFF;">()</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;">      const</span><span style="color:#BABED8;"> data</span><span style="color:#89DDFF;"> =</span><span style="color:#82AAFF;"> reactive</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        text</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">文字</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">        list</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> [</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;"> 2</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;"> 3</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;"> 4</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;"> 5</span><span style="color:#F07178;">]</span></span>
<span class="line"><span style="color:#89DDFF;">      }</span><span style="color:#F07178;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">      return</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">        // 解构输出</span></span>
<span class="line"><span style="color:#89DDFF;">        ...</span><span style="color:#82AAFF;">toRefs</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">data</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">      }</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">  &lt;</span><span style="color:#F07178;">div</span><span style="color:#C792EA;"> class</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">box</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    &lt;!-- 使用组件，通过： 自定义属性名=&quot;属性值&quot;的形式传递 --&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">    &lt;</span><span style="color:#F07178;">child</span><span style="color:#C792EA;"> :text</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">text</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;"> :list</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">list</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">/&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">  &lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">style</span><span style="color:#C792EA;"> scoped</span><span style="color:#C792EA;"> lang</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">scss</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">style</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><p><strong>子组件</strong></p><ul><li>props接收父组件传递过来的数据， 是一个对象， 但是不要直接去找操作修改props的值</li><li>type属性定义接收的数据类型</li><li>default属性设置默认值， 在当前属性没有值传入时调用</li><li>props也可以定义为 <code>props:[&#39;text&#39;, &#39;list&#39;]</code></li><li>为了开启 对props类型的推导， 必须使用<code>defineComponent</code></li></ul><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#C792EA;"> lang</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">ts</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  import</span><span style="color:#89DDFF;"> {</span><span style="color:#BABED8;"> defineComponent</span><span style="color:#89DDFF;"> }</span><span style="color:#89DDFF;font-style:italic;"> from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">&#39;</span><span style="color:#676E95;font-style:italic;"> // 引入自动提示函数</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  export</span><span style="color:#89DDFF;font-style:italic;"> default</span><span style="color:#82AAFF;"> defineComponent</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    name</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">child</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    props</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">      text</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">        type</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> String</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">        default</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">默认展示</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">      },</span></span>
<span class="line"><span style="color:#F07178;">      list</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">        type</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> Array</span><span style="color:#89DDFF;">&lt;</span><span style="color:#BABED8;">number</span><span style="color:#89DDFF;">&gt;,</span></span>
<span class="line"><span style="color:#F07178;">        default</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> []</span></span>
<span class="line"><span style="color:#89DDFF;">      }</span></span>
<span class="line"><span style="color:#89DDFF;">    },</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // props 是一个对象，包含父组件传递给子组件的所有数据</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // context： 上下文，包括 attrs、emit、slots</span></span>
<span class="line"><span style="color:#F07178;">    setup</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">props</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> context</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">      console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">props</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">text</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> props</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">list</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span><span style="color:#BABED8;">)</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">  &lt;</span><span style="color:#F07178;">div</span><span style="color:#C792EA;"> class</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">box</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">    &lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;">{{ text }}</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">    &lt;</span><span style="color:#F07178;">div</span><span style="color:#C792EA;"> v-for</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">item in list</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;"> :key</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">item</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;">{{ item }}</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">  &lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">style</span><span style="color:#C792EA;"> scoped</span><span style="color:#C792EA;"> lang</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">scss</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">style</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><h5 id="setup标签版本" tabindex="-1">setup标签版本 <a class="header-anchor" href="#setup标签版本" aria-label="Permalink to &quot;setup标签版本&quot;">​</a></h5><p>setup标签版本传递数据的方法还是跟函数版本一致，只是写法上有所不同：</p><p><strong>父组件</strong></p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#C792EA;"> setup</span><span style="color:#C792EA;"> lang</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">ts</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#89DDFF;"> {</span><span style="color:#BABED8;"> reactive</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> toRefs</span><span style="color:#89DDFF;"> }</span><span style="color:#89DDFF;font-style:italic;"> from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">&#39;</span><span style="color:#676E95;font-style:italic;"> // 引入</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#BABED8;"> assembly </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">@/components/assembly.vue</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">type</span><span style="color:#FFCB6B;"> IReactive</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">  list</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> number</span><span style="color:#BABED8;">[]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  text</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> string</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> data </span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;"> reactive</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">IReactive</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  text</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">文本</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  list</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> [</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;"> 2</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;"> 3</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;"> 4</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;"> 5</span><span style="color:#BABED8;">]</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#89DDFF;"> {</span><span style="color:#BABED8;"> text</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> list </span><span style="color:#89DDFF;">}</span><span style="color:#89DDFF;"> =</span><span style="color:#82AAFF;"> toRefs</span><span style="color:#BABED8;">(data)</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">  &lt;</span><span style="color:#F07178;">div</span><span style="color:#C792EA;"> class</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">box</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">    &lt;</span><span style="color:#F07178;">assembly</span><span style="color:#C792EA;"> :text</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">text</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">,</span><span style="color:#C792EA;"> :list</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">list</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">/&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">  &lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">style</span><span style="color:#C792EA;"> scoped</span><span style="color:#C792EA;"> lang</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">scss</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">style</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><p><strong>子组件</strong></p><ul><li>子组件接受通过<code>defineProps()</code> 接收父组件传递的值</li><li><code>type</code> 属性定义接受的数据类型</li><li><code>default</code>属性设置默认值，在当前属性没有值传入时调用</li><li>可通过<code>{ }</code>进行解构</li></ul><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#C792EA;"> setup</span><span style="color:#C792EA;"> lang</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">ts</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  import</span><span style="color:#89DDFF;"> {</span><span style="color:#BABED8;"> defineProps</span><span style="color:#89DDFF;"> }</span><span style="color:#89DDFF;font-style:italic;"> from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#C792EA;">  type</span><span style="color:#FFCB6B;"> IProps</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">    text</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> string</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    list</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> Array</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">number</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 通过定义变量的接收或解构数据进行使用 接收的值可直接在 setup 语法糖中直接使用</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 直接使用变量</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/*   const props = defineProps&lt;IProps&gt;({</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    text: {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">      type: String,</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">      default: &#39;默认展示&#39;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    },</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    list: {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">      type: Array,</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">      default: []</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    }</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  }) */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 直接解构参数</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#89DDFF;"> {</span><span style="color:#BABED8;"> list</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> text </span><span style="color:#89DDFF;">}</span><span style="color:#89DDFF;"> =</span><span style="color:#82AAFF;"> defineProps</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">IProps</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    text</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">      type</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> String</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">      default</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">默认展示</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">    },</span></span>
<span class="line"><span style="color:#F07178;">    list</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">      type</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> Array</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">      default</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> []</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span><span style="color:#BABED8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">  console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(text</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> list)</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">  &lt;</span><span style="color:#F07178;">div</span><span style="color:#C792EA;"> class</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">box</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">    &lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;">{{ text }}</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">    &lt;</span><span style="color:#F07178;">div</span><span style="color:#C792EA;"> v-for</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">item in list</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;"> :key</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">item</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;">{{ item }}</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">  &lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">style</span><span style="color:#C792EA;"> scoped</span><span style="color:#C792EA;"> lang</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">scss</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">style</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><h4 id="子组件传递给父组件参数" tabindex="-1">子组件传递给父组件参数 <a class="header-anchor" href="#子组件传递给父组件参数" aria-label="Permalink to &quot;子组件传递给父组件参数&quot;">​</a></h4><h5 id="setup函数-子组件传参版本" tabindex="-1">setup函数 子组件传参版本 <a class="header-anchor" href="#setup函数-子组件传参版本" aria-label="Permalink to &quot;setup函数 子组件传参版本&quot;">​</a></h5><p><strong>子组件传值</strong></p><ul><li>setup函数中 context 的 emit 用于传递事件给父组件</li><li>第一个参数要为传递的参数名，第二个参数为传递的值</li></ul><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#C792EA;"> lang</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">ts</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  import</span><span style="color:#89DDFF;"> {</span><span style="color:#BABED8;"> reactive</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> defineComponentt</span><span style="color:#89DDFF;"> }</span><span style="color:#89DDFF;font-style:italic;"> from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#C792EA;">  interface</span><span style="color:#FFCB6B;"> IReactive</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">    text</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> string</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  export</span><span style="color:#89DDFF;font-style:italic;"> default</span><span style="color:#82AAFF;"> defineComponent</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    name</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">child</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    setup</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">props</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> context</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;">      const</span><span style="color:#BABED8;"> data</span><span style="color:#89DDFF;"> =</span><span style="color:#82AAFF;"> reactive</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        text</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">文本</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">      }</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span></span>
<span class="line"><span style="color:#C792EA;">      const</span><span style="color:#BABED8;"> transferParents</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> ()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">        context</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">emit</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">transfer</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> data</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">text</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">      }</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">      return</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">        transferParents</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">      }</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span><span style="color:#BABED8;">)</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">  &lt;</span><span style="color:#F07178;">div</span><span style="color:#C792EA;"> class</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">nox</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">    &lt;</span><span style="color:#F07178;">buttom</span><span style="color:#C792EA;"> @click</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">transferParents</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;">点击传值给父组件</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">buttom</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">  &lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><p><strong>父组件接收</strong></p><ul><li><code>引入组件</code> - <code>注册组件</code> - <code>定义事件</code> - <code>接收并使用传递的值</code></li><li>父组件中使用自定义时间接收，自定义事件名称必须与子组件传递的一致(即登号前面名称一致)</li><li>等号后面的事件名称可自行定义</li><li>事件中通过默认参数接收使用子组件传递的值</li><li>setup函数中的时间必须<code>return</code>输出才能使用</li></ul><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#C792EA;"> lang</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">ts</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#89DDFF;"> {</span><span style="color:#BABED8;"> reactive</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> toRefs</span><span style="color:#89DDFF;"> }</span><span style="color:#89DDFF;font-style:italic;"> from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#BABED8;"> child </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">@/components/child.vue</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#C792EA;">interface</span><span style="color:#FFCB6B;"> IReactive</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">  content</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> string</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#89DDFF;font-style:italic;"> default</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">  name</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">AboutView</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  components</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> {</span><span style="color:#BABED8;"> child </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#F07178;">  setup</span><span style="color:#89DDFF;">()</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // ...</span></span>
<span class="line"><span style="color:#C792EA;">    const</span><span style="color:#BABED8;"> data</span><span style="color:#89DDFF;"> =</span><span style="color:#82AAFF;"> reactive</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">IReactive</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      content</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span><span style="color:#F07178;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">    const</span><span style="color:#BABED8;"> takeOverChild</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> (</span><span style="color:#BABED8;font-style:italic;">event</span><span style="color:#89DDFF;">):</span><span style="color:#FFCB6B;"> void</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">      // 通过默认参数接收使用子组件的值</span></span>
<span class="line"><span style="color:#BABED8;">      console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">event</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">      data</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">content</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> event</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    return</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;">      ...</span><span style="color:#82AAFF;">toRefs</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">data</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">      takeOverChild</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">  &lt;</span><span style="color:#F07178;">div</span><span style="color:#C792EA;"> class</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">box</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    &lt;!-- 父组件中使用自定义事件来进行接收，自定义事件名称必须与子组件传递的一致(即等号前面的属性名一致) --&gt;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    &lt;!-- 等号后面的属性值可以自定义 --&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">    &lt;</span><span style="color:#F07178;">child</span><span style="color:#C792EA;"> @transferparents</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">takeOverChild</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">/&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">    &lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;">{{content}}</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">  &lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><h5 id="setup标签-子组件传参版本" tabindex="-1">setup标签 子组件传参版本 <a class="header-anchor" href="#setup标签-子组件传参版本" aria-label="Permalink to &quot;setup标签 子组件传参版本&quot;">​</a></h5><p><strong>子组件</strong></p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#C792EA;"> setup</span><span style="color:#C792EA;"> lang</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">ts</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  import</span><span style="color:#89DDFF;"> {</span><span style="color:#BABED8;"> reactive</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> defineEmits</span><span style="color:#89DDFF;"> }</span><span style="color:#89DDFF;font-style:italic;"> from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#C792EA;">  interface</span><span style="color:#FFCB6B;"> IReactive</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">    text</span><span style="color:#89DDFF;"> :</span><span style="color:#FFCB6B;"> string</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#C792EA;">  interface</span><span style="color:#FFCB6B;"> IEmits</span><span style="color:#89DDFF;"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> emits </span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;"> defineEmits</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">IEmits</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;">()</span></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> data </span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;"> reactive</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">IReactive</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    text</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">文本</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span><span style="color:#BABED8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> transferParents </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> ()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#82AAFF;">    emits</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">transferParents</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> data</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">text</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">  &lt;</span><span style="color:#F07178;">div</span><span style="color:#C792EA;"> class</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">box</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">    &lt;</span><span style="color:#F07178;">button</span><span style="color:#C792EA;"> @click</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">transferParents</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;">点击传值给父组件</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">  &lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><p><strong>父组件接收</strong></p><ul><li><code>引入组件</code> —— <code>定义事件</code> —— <code>接收并使用传递的值</code></li><li>父组件中使用自定义事件接收，自定义事件名称必须与子组件传递的一致(即等号前面名称)</li><li>等号后面的事件名称可自行定义</li><li>事件中通过默认参数接收使用子组件传递的值</li><li>setup语法糖中组件引入后使用，无需注册</li></ul><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#C792EA;"> lang</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">ts</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;"> setup</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#89DDFF;"> {</span><span style="color:#BABED8;"> reactive</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> toRefs</span><span style="color:#89DDFF;"> }</span><span style="color:#89DDFF;font-style:italic;"> from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#BABED8;"> assembly </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">@/components/assembly.vue</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#C792EA;">interface</span><span style="color:#FFCB6B;"> IReactive</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">  content</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> string</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> data </span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;"> reactive</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">IReactive</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  content</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> takeOverChild </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> (</span><span style="color:#BABED8;font-style:italic;">event</span><span style="color:#89DDFF;">):</span><span style="color:#FFCB6B;"> void</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">  console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">event</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">  data</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">content</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> event</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#89DDFF;"> {</span><span style="color:#BABED8;"> text </span><span style="color:#89DDFF;">}</span><span style="color:#89DDFF;"> =</span><span style="color:#82AAFF;"> toRefs</span><span style="color:#BABED8;">(data)</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">  &lt;</span><span style="color:#F07178;">div</span><span style="color:#C792EA;"> class</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">box</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    &lt;!-- 父组件中使用自定义事件来进行接收，自定义事件名称必须与子组件传递的一致(即等号前面的属性名一致) --&gt;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    &lt;!-- 等号后面的属性值可以自定义 --&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">    &lt;</span><span style="color:#F07178;">child</span><span style="color:#C792EA;"> @transferparents</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">takeOverChild</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">/&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">    &lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;">{{content}}</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">  &lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><h3 id="vue-插槽-slot" tabindex="-1">Vue 插槽(slot) <a class="header-anchor" href="#vue-插槽-slot" aria-label="Permalink to &quot;Vue 插槽(slot)&quot;">​</a></h3><p>简单来说就是子组件中的提供给父组件使用的一个<code>坑位</code>，用<code>&lt;slot&gt;&lt;/slot&gt;</code>表示， 父组件可以在这个坑位中填充任何模版代码，然后子组件中<code>&lt;slot&gt;&lt;/slot&gt;</code>就会被替换成这些内容：</p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#C792EA;"> lang</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">ts</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;"> setup</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#BABED8;"> child </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">./Child.vue</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">  &lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">    &lt;</span><span style="color:#F07178;">Child</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;">Hello world</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">Child</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">  &lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><p><strong>子组件</strong></p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">  &lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">    &lt;</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;">1</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">    &lt;</span><span style="color:#F07178;">slot</span><span style="color:#89DDFF;">/&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">    &lt;</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;">2</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">  &lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><p>子组件中的 <code>&lt;slot/&gt;</code> 就是父组件放在子组件中的内容 <code>Hello world</code>，当然可以放入任何内容，例如变量：</p><p><strong>父组件</strong></p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#C792EA;"> setup</span><span style="color:#C792EA;"> lang</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">ts</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  import</span><span style="color:#89DDFF;"> {</span><span style="color:#BABED8;"> ref</span><span style="color:#89DDFF;"> }</span><span style="color:#89DDFF;font-style:italic;"> from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  import</span><span style="color:#BABED8;"> Child </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">./Child.vue</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> msg </span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;"> ref</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Hello world</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">  &lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">    &lt;</span><span style="color:#F07178;">Child</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;">{{ msg }}</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">Child</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">  &lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><p>这个效果跟上面示例的结果是一样的</p><div class="info custom-block"><p class="custom-block-title">TIP</p><ul><li><p><strong>插槽</strong>: 插槽在父子组件关系中放置在子组件中，插槽的内容是被在父组件中调用时传递过来的</p></li><li><p><strong>插槽内容</strong>: 插槽内容是在父组件中调用子组件时，具体要传递给子组件的值， 一般是放在子组件标签里面的</p></li></ul></div><h5 id="默认内容" tabindex="-1">默认内容 <a class="header-anchor" href="#默认内容" aria-label="Permalink to &quot;默认内容&quot;">​</a></h5><p>在父组件中没有提供任何<code>插槽内容</code>的时候， 我们是可以为子组件的插槽指定默认内容的， 比如:</p><p><strong>子组件</strong></p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">  &lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">    &lt;</span><span style="color:#F07178;">slot</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;">我是设置的默认内容</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">slot</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">  &lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><p><strong>父组件</strong></p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#C792EA;"> lang</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">ts</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;"> setup</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  import</span><span style="color:#BABED8;"> Child </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">./Child.vue</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">  &lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    &lt;!-- 如果不传值，那么最终结果就是展示子组件设置的默认内容 --&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">    &lt;</span><span style="color:#F07178;">Child</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">Child</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    &lt;!-- 如果传值， 就是展示传入的内容 --&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">    &lt;</span><span style="color:#F07178;">Child</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;">Hello world</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">Child</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">  &lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><h5 id="具名插槽" tabindex="-1">具名插槽 <a class="header-anchor" href="#具名插槽" aria-label="Permalink to &quot;具名插槽&quot;">​</a></h5><p>很多时候一个插槽满足不了需求， 需要多个插槽，于是就有了具名插槽， 比如带有<code>name</code>属性的插槽<code>&lt;slot name=&quot;test&quot;/&gt;</code>, 没有提供<code>name</code>的插槽 <code>&lt;slot/&gt;</code> 就被隐式地命名为 <em>default</em>。</p><p>在父组件中，我们可以使用添加了 <code>v-slot: xxx</code>(可简写为<code>#xxx</code>)指令的<code>template</code> 元素， 这个元素会将目标插槽的名字传递下去匹配对应插槽。例如:</p><p><strong>子组件</strong></p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">  &lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">    &lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">      &lt;</span><span style="color:#F07178;">slot</span><span style="color:#C792EA;"> name</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">monkey</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">/&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">    &lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">    &lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">      &lt;</span><span style="color:#F07178;">slot</span><span style="color:#C792EA;"> name</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">orange</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">/&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">    &lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">    &lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">      &lt;</span><span style="color:#F07178;">slot</span><span style="color:#C792EA;"> name</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">apple</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">/&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">    &lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">  &lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><p><strong>父组件</strong></p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#C792EA;"> setup</span><span style="color:#C792EA;"> lang</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">ts</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#BABED8;"> Child </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">./Child.vue</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">  &lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">    &lt;</span><span style="color:#F07178;">Child</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">      &lt;!-- #monkey 是 v-slot:monkey的缩写 --&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">      &lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;"> #</span><span style="color:#C792EA;">monkey</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;">一只吗喽</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">      &lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;"> #</span><span style="color:#C792EA;">orange</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;">敖润之子</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">      &lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;"> #</span><span style="color:#C792EA;">apple</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;">小小苹果</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">    &lt;/</span><span style="color:#F07178;">Child</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">  &lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><blockquote><p>具名插槽的顺序是不限制的，只需要写好模版命好名字，它就会自动去到它所对应的位置</p></blockquote><h5 id="动态插槽" tabindex="-1">动态插槽 <a class="header-anchor" href="#动态插槽" aria-label="Permalink to &quot;动态插槽&quot;">​</a></h5><p>动态插槽就是插槽名变成了变量的形式，我们可以随时修改这个变量从而展示不同的效果。它的写法是<code>v-slot:[变量名]</code> 或者缩写为 <code>#[变量名]</code></p><p><strong>父组件</strong></p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#C792EA;"> lang</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">ts</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;"> setup</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#89DDFF;"> {</span><span style="color:#BABED8;"> ref</span><span style="color:#89DDFF;"> }</span><span style="color:#89DDFF;font-style:italic;"> from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#BABED8;"> Child </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">./Child.vue</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> slotName </span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;"> ref</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">monkey</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> orange </span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;"> ref</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">orange</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> apple </span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;"> ref</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">apple</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">  &lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">    &lt;</span><span style="color:#F07178;">Child</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">      &lt;!-- 等同于 #monkey --&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">      &lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;"> #[</span><span style="color:#C792EA;">slotName</span><span style="color:#89DDFF;">]&gt;</span><span style="color:#BABED8;">你不懂吗喽</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">      &lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;"> #[</span><span style="color:#C792EA;">orange</span><span style="color:#89DDFF;">]&gt;</span><span style="color:#BABED8;">西海龙王敖润之子</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">      &lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;"> #[</span><span style="color:#C792EA;">apple</span><span style="color:#89DDFF;">]&gt;</span><span style="color:#BABED8;">one more thing</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">    &lt;/</span><span style="color:#F07178;">Child</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">  &lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><h5 id="作用域插槽" tabindex="-1">作用域插槽 <a class="header-anchor" href="#作用域插槽" aria-label="Permalink to &quot;作用域插槽&quot;">​</a></h5><p>插槽也可以像组件传递 props 那样， 在<code>slot</code>标签绑定属性从而传递给父组件中的<code>插槽内容</code></p><p><strong>子组件</strong></p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">  &lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">    &lt;</span><span style="color:#F07178;">slot</span><span style="color:#C792EA;"> personName</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">malou</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;"> age</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">18</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">slot</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">  &lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><p><strong>父组件</strong></p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#C792EA;"> lang</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">ts</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;"> setup</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  import</span><span style="color:#BABED8;"> Child </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">./Child.vue</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">  &lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">    &lt;</span><span style="color:#F07178;">Child</span><span style="color:#C792EA;"> v-slot</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">slotProps</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#BABED8;">      My Name is {{ slotProps.personName }} and I am {{ slotProps.age }} years old this year</span></span>
<span class="line"><span style="color:#89DDFF;">    &lt;/</span><span style="color:#F07178;">Child</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">  &lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">&lt;!-- 也可以通过解构来获取数据 --&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">  &lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">    &lt;</span><span style="color:#F07178;">Child</span><span style="color:#C792EA;"> v-slot</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">{ personName, age }</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#BABED8;">      My Name is {{ personName }} and I am {{ age }} years old this year</span></span>
<span class="line"><span style="color:#89DDFF;">    &lt;/</span><span style="color:#F07178;">Child</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">  &lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">注意</p><p>作用域插槽不能绑定 <code>name</code> 属性，因为绑定了 <code>name</code> 成了具名插槽了。 同样具名插槽的<code>name</code>属性也不会传递给 <code>插槽内容</code>， 这种在父组件作用域中获取到了子组件作用域中的变量，可以认为作用域插槽 延伸了子组件数据的作用范围，所以这类能够借搜参数的插槽就被称为作用域插槽</p></div><h5 id="具名作用域插槽" tabindex="-1">具名作用域插槽 <a class="header-anchor" href="#具名作用域插槽" aria-label="Permalink to &quot;具名作用域插槽&quot;">​</a></h5><p>具名作用域插槽接收参数的方式是通过<code>template</code>的标签的指令<code>v-slot</code>的值获取的</p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#676E95;font-style:italic;">&lt;!-- 父组件 --&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">  &lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">    &lt;</span><span style="color:#F07178;">Child</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">      &lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;"> #</span><span style="color:#C792EA;">bigTurnip</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">bigTurnipProps</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#BABED8;">        {{ bigTurnipProps.message }}</span></span>
<span class="line"><span style="color:#89DDFF;">      &lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">    &lt;/</span><span style="color:#F07178;">Child</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">  &lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#C792EA;"> setup</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#BABED8;"> Child </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">./Child.vue</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">&lt;!-- 子组件Child.vue --&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">    &lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">        &lt;!-- 大萝卜 --&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">        &lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">            &lt;</span><span style="color:#F07178;">slot</span><span style="color:#C792EA;"> name</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">bigTurnip</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;"> message</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">我是萝北</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">slot</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">        &lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">    &lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><h3 id="vue-watch" tabindex="-1">Vue watch <a class="header-anchor" href="#vue-watch" aria-label="Permalink to &quot;Vue watch&quot;">​</a></h3><p>vue watch 用于侦听一个或者多个响应式数据源，并在数据源变化时调用所给的回调函数</p><h5 id="类型" tabindex="-1">类型 <a class="header-anchor" href="#类型" aria-label="Permalink to &quot;类型&quot;">​</a></h5><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 侦听单个来源</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#82AAFF;"> watch</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;(</span></span>
<span class="line"><span style="color:#BABED8;font-style:italic;">  source</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> WatchSource</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;,</span></span>
<span class="line"><span style="color:#BABED8;font-style:italic;">  callback</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> WatchCallback</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;,</span></span>
<span class="line"><span style="color:#BABED8;font-style:italic;">  options</span><span style="color:#89DDFF;">?:</span><span style="color:#FFCB6B;"> WatchOptions</span></span>
<span class="line"><span style="color:#89DDFF;">):</span><span style="color:#FFCB6B;"> StopHandle</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 侦听多个值</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#82AAFF;"> watch</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;(</span></span>
<span class="line"><span style="color:#BABED8;font-style:italic;">  sources</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> WatchSource</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;">[]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;font-style:italic;">  callback</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> WatchCallback</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#BABED8;">[]</span><span style="color:#89DDFF;">&gt;,</span></span>
<span class="line"><span style="color:#BABED8;font-style:italic;">  options</span><span style="color:#89DDFF;">?:</span><span style="color:#FFCB6B;"> WatchOptions</span></span>
<span class="line"><span style="color:#89DDFF;">):</span><span style="color:#FFCB6B;"> StopHandle</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">type</span><span style="color:#FFCB6B;"> WatchCallback</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> (</span></span>
<span class="line"><span style="color:#BABED8;font-style:italic;">  value</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> T</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;font-style:italic;">  oldValue</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> T</span></span>
<span class="line"><span style="color:#82AAFF;">  onCleanup</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> (</span><span style="color:#82AAFF;">cleanupFn</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> ()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#FFCB6B;"> void</span><span style="color:#89DDFF;"> )</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#FFCB6B;"> void</span></span>
<span class="line"><span style="color:#BABED8;">) </span><span style="color:#C792EA;">=&gt;</span><span style="color:#FFCB6B;"> void</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">type</span><span style="color:#FFCB6B;"> WatchSource</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> </span></span>
<span class="line"><span style="color:#89DDFF;">|</span><span style="color:#FFCB6B;"> Ref</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;</span><span style="color:#676E95;font-style:italic;">  // ref</span></span>
<span class="line"><span style="color:#89DDFF;">|</span><span style="color:#BABED8;"> (</span><span style="color:#89DDFF;">()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#FFCB6B;"> T</span><span style="color:#BABED8;">)  </span><span style="color:#676E95;font-style:italic;">// getter</span></span>
<span class="line"><span style="color:#89DDFF;">|</span><span style="color:#FFCB6B;"> T</span><span style="color:#C792EA;"> extends</span><span style="color:#FFCB6B;"> object</span></span>
<span class="line"><span style="color:#89DDFF;">?</span><span style="color:#FFCB6B;"> T</span></span>
<span class="line"><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> never</span><span style="color:#676E95;font-style:italic;"> //响应式对象</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">interface</span><span style="color:#FFCB6B;"> Watchoptions</span><span style="color:#C792EA;"> extends</span><span style="color:#FFCB6B;"> WatchEffectOptions</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">  immediate</span><span style="color:#89DDFF;">?:</span><span style="color:#FFCB6B;"> boolean</span><span style="color:#676E95;font-style:italic;"> // 默认值为false</span></span>
<span class="line"><span style="color:#F07178;">  deep</span><span style="color:#89DDFF;">?:</span><span style="color:#FFCB6B;"> boolean</span><span style="color:#676E95;font-style:italic;"> //米哦认知为false</span></span>
<span class="line"><span style="color:#F07178;">  flush</span><span style="color:#89DDFF;">?:</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">pre</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;"> |</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">post</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;"> |</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">sync</span><span style="color:#89DDFF;">&#39;</span><span style="color:#676E95;font-style:italic;"> // 默认值为pre</span></span>
<span class="line"><span style="color:#F07178;">  onTrack</span><span style="color:#89DDFF;">?:</span><span style="color:#89DDFF;"> (</span><span style="color:#BABED8;font-style:italic;">event</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> DebuggerEvent</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#FFCB6B;"> void</span></span>
<span class="line"><span style="color:#F07178;">  onTrigger</span><span style="color:#89DDFF;">?:</span><span style="color:#89DDFF;"> (</span><span style="color:#BABED8;font-style:italic;">event</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> DebuggerEvent</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#FFCB6B;"> void</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h5 id="详细信息" tabindex="-1">详细信息 <a class="header-anchor" href="#详细信息" aria-label="Permalink to &quot;详细信息&quot;">​</a></h5><p><code>watch()</code> 默认是懒侦听的， 即仅在侦听起源发生变化时才执行回调函数</p><p>第一个参数是侦听器的源，这个源来自以下几种</p><ul><li>一个函数，返回一个值</li><li>一个ref</li><li>一个响应式对象</li><li>...或者是由以上类型的值组成的数组</li></ul><p>第二个参数是在发生变化时要调用的回调函数，这个回调函数接收三个参数：新值、旧值、以及一个用于注册副作用清理的回调函数， 该回调函数会在副作用下一次重新执行前调用，可以用来清除无效的副作用 例如等待中的异步请求</p><p>当侦听多个来源时，回调函数接收两个数组，分别对应来源数组中的新值和旧值</p><p>第三个参数是可选的，是一个对象，支持下面这些选项</p><ul><li><strong>immediate</strong> : 在侦听器创建时立即触发回调，第一次调用时旧值是 <code>undefined</code></li><li><strong>deep</strong>: 如果源是对象，强制深度遍历，以便在深层级变更时触发回调</li><li><strong>flush</strong>: 吊证回调函数的刷新时机</li><li><strong>onTrack/onTrigger</strong>: 调试侦听器的依赖</li></ul><h5 id="示例" tabindex="-1">示例 <a class="header-anchor" href="#示例" aria-label="Permalink to &quot;示例&quot;">​</a></h5><ul><li><strong>侦听一个 getter 函数</strong></li></ul><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> state </span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;"> reactive</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> count</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 0</span><span style="color:#89DDFF;"> }</span><span style="color:#BABED8;">)</span></span>
<span class="line"><span style="color:#82AAFF;">watch</span><span style="color:#BABED8;">(</span></span>
<span class="line"><span style="color:#89DDFF;">  ()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#BABED8;"> state</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">count</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">  (</span><span style="color:#BABED8;font-style:italic;">value</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;">preValue</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    /* ... */</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#BABED8;">)</span></span></code></pre></div><ul><li><strong>侦听一个ref</strong></li></ul><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> count </span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;"> ref</span><span style="color:#BABED8;">(</span><span style="color:#F78C6C;">0</span><span style="color:#BABED8;">)</span></span>
<span class="line"><span style="color:#82AAFF;">watch</span><span style="color:#BABED8;">(count</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> (</span><span style="color:#BABED8;font-style:italic;">value</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> preValue</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  /* ... */</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span></span></code></pre></div><ul><li><strong>侦听多个来源时，回调函数接收两个数组，分别对应来源数组中的新值和旧值</strong></li></ul><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#82AAFF;">watch</span><span style="color:#BABED8;">([fooRef</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> barRef]</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> ([</span><span style="color:#BABED8;font-style:italic;">foo</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> bar</span><span style="color:#89DDFF;">],</span><span style="color:#89DDFF;"> [</span><span style="color:#BABED8;font-style:italic;">preFoo</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> preBar</span><span style="color:#89DDFF;">])</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  /* ... */</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span></span></code></pre></div><ul><li><strong>深度遍历</strong></li></ul><p>当使用getter函数作为源时，回调只在此函数的返回值变化时才会触发，如果想让回调在深层级变更时也能触发，你需要使用(<code>deep: true</code>) 强制侦听器进入深层级模式，在深层级模式时，如果回调函数 由于深层级的变更而被触发， 那么新值和旧值将会是同一个对象</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> state </span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;"> reactive</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> count</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 0</span><span style="color:#89DDFF;"> }</span><span style="color:#BABED8;">)</span></span>
<span class="line"><span style="color:#82AAFF;">watch</span><span style="color:#BABED8;">(</span></span>
<span class="line"><span style="color:#89DDFF;">  ()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#BABED8;"> state</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">  (</span><span style="color:#BABED8;font-style:italic;">newValue</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> oldValue</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // newValue === oldValue</span></span>
<span class="line"><span style="color:#89DDFF;">  },</span></span>
<span class="line"><span style="color:#89DDFF;">  {</span></span>
<span class="line"><span style="color:#F07178;">    deep</span><span style="color:#89DDFF;">:</span><span style="color:#FF9CAC;"> true</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#BABED8;">)</span></span></code></pre></div><ul><li><strong>当直接侦听一个响应式对象时，侦听器会自动启用深层模式</strong></li></ul><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> state </span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;"> reactive</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> count</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 0</span><span style="color:#89DDFF;"> }</span><span style="color:#BABED8;">)</span></span>
<span class="line"><span style="color:#82AAFF;">watch</span><span style="color:#BABED8;">(state</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> ()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  /* 深层级变更状态所触发的回调 */</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span></span></code></pre></div><ul><li><strong>调试选项与刷新时机</strong></li></ul><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#82AAFF;">watch</span><span style="color:#BABED8;">(source</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> callback</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">  flush</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">post</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  onTrack</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">event</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F78C6C;">    debugger</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#F07178;">  onTrigger</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">event</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F78C6C;">    debugger</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span></span></code></pre></div><ul><li><strong>停止侦听器</strong></li></ul><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> stop </span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;"> watch</span><span style="color:#BABED8;">(source</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> callback)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 当已不再需要该侦听器时</span></span>
<span class="line"><span style="color:#82AAFF;">stop</span><span style="color:#BABED8;">()</span></span></code></pre></div><ul><li><strong>副作用清理</strong></li></ul><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#82AAFF;">watch</span><span style="color:#BABED8;">(id</span><span style="color:#89DDFF;">,</span><span style="color:#C792EA;"> async</span><span style="color:#89DDFF;"> (</span><span style="color:#BABED8;font-style:italic;">newId</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> oldId</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> onCleanup</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#89DDFF;"> {</span><span style="color:#BABED8;"> response</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> cancel</span><span style="color:#89DDFF;"> }</span><span style="color:#89DDFF;"> =</span><span style="color:#82AAFF;"> doAsyncWork</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">newId</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 当 \`id\` 变化时候， cancel将被调用</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 取消之前的未完成的请求</span></span>
<span class="line"><span style="color:#82AAFF;">  onCleanup</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">cancel</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#BABED8;">  data</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">value</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;font-style:italic;"> await</span><span style="color:#BABED8;"> response</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span></span></code></pre></div><h3 id="计算属性与watch的区别" tabindex="-1">计算属性与watch的区别 <a class="header-anchor" href="#计算属性与watch的区别" aria-label="Permalink to &quot;计算属性与watch的区别&quot;">​</a></h3><p><code>watch</code> 和 <code>computed</code> 都是 vue2/vue3中用于监听数据变化的属性</p><ul><li><p><strong>功能</strong>: computed 是计算属性，适用于派生值的场景，它会缓存计算结果，只有在依赖的响应式数据变化时才重新计算； watch 是监听一个值的变化而执行对应的回调， 适用于需要在数据变化时执行异步或复杂操作的场景</p></li><li><p><strong>是否调用缓存</strong>: computed 函数所依赖的属性不变的时候会调用缓存， watch 每次监听的值发生变化时都会调用回调</p></li><li><p><strong>是否调用return</strong>: computed 必须有， watch 可以没有</p></li><li><p><strong>使用场景</strong>: computed 当一个属性受多个属性影响的时候， 例如购物车商品结算；watch 一条数据影响多条数据的时候， 例如搜索框</p></li><li><p><strong>是否支持异步</strong>: computed 函数不能有异步 watch 可以</p></li></ul><h3 id="vue-首屏加载慢的原因-怎么解决的-白屏时间怎么检测-怎么解决白屏问题" tabindex="-1">Vue 首屏加载慢的原因，怎么解决的，白屏时间怎么检测，怎么解决白屏问题 <a class="header-anchor" href="#vue-首屏加载慢的原因-怎么解决的-白屏时间怎么检测-怎么解决白屏问题" aria-label="Permalink to &quot;Vue 首屏加载慢的原因，怎么解决的，白屏时间怎么检测，怎么解决白屏问题&quot;">​</a></h3>`,102),_=n(`<h3 id="vue中-route-与-router-区别" tabindex="-1">Vue中 Route 与 router 区别 <a class="header-anchor" href="#vue中-route-与-router-区别" aria-label="Permalink to &quot;Vue中 Route 与 router 区别&quot;">​</a></h3><p>Vue中 Route 与 Router 依然表示路由相关的概念，但它们功能不尽相同</p><ul><li><p><strong>Route(路由)</strong></p><p>Route 表示应用程序中的一个路由，它包含有关当前路由状态的信息， 例如路径、参数、查询等，在Vue3中，通过 <strong>route</strong> 对象可以访问当前路由的信息</p><p>可以通过<code>useRoute</code>函数来获取当前的 <code>Route</code>对象</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#89DDFF;"> {</span><span style="color:#BABED8;"> useRoute</span><span style="color:#89DDFF;"> }</span><span style="color:#89DDFF;font-style:italic;"> from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#89DDFF;font-style:italic;"> default</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">  setup</span><span style="color:#89DDFF;">()</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;">    const</span><span style="color:#BABED8;"> route</span><span style="color:#89DDFF;"> =</span><span style="color:#82AAFF;"> useRoute</span><span style="color:#F07178;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 访问当前路由信息</span></span>
<span class="line"><span style="color:#BABED8;">    console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">route</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">value</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">path</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div></li><li><p><strong>路由器(Router)</strong></p></li></ul><p>Router是 Vue Router的实例， 包含了整个路由器的配置信息，可以理解为全局的路由控制器，它提供了一些方法和属性，比如 <code>push</code>、 <code>replace</code> 和 <code>go</code> 等方法， 用于改变URL，以及<code>currentRoute</code>、<code>matched</code> 等属性</p><p>通过<code>useRouter</code> 函数或来获取路由器实例</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#89DDFF;"> {</span><span style="color:#BABED8;"> createRouter</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> createWebHashHistory</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> useRouter</span><span style="color:#89DDFF;"> }</span><span style="color:#89DDFF;font-style:italic;"> from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">vue-router</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> routes </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> [</span></span>
<span class="line"><span style="color:#89DDFF;">  {</span><span style="color:#F07178;"> path</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">/</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> component</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> Home </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">  {</span><span style="color:#F07178;"> path</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">/about</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> component</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> About </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">  {</span><span style="color:#F07178;"> path</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">contact</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> component</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> Contact</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#BABED8;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> router </span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;"> createRouter</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  history</span><span style="color:#89DDFF;">:</span><span style="color:#82AAFF;"> createWebHashHistory</span><span style="color:#BABED8;">()</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">  routes</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#89DDFF;font-style:italic;"> default</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">  setup</span><span style="color:#89DDFF;">()</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;">    const</span><span style="color:#BABED8;"> router</span><span style="color:#89DDFF;"> =</span><span style="color:#82AAFF;"> useRouter</span><span style="color:#F07178;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 在 setup 函数中使用路由器</span></span>
<span class="line"><span style="color:#BABED8;">    router</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/about</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>综上所述， <code>router</code>是VueRouter的实例，提供了路由控制器的一些方法和属性，用于改变URL和获取路由相关信息。</p><p>而<code>route</code>是当前激活的路由对象，包含了当前URL解析得到的信息。</p><h3 id="vue-路由懒加载-按需加载路由" tabindex="-1">Vue 路由懒加载（按需加载路由） <a class="header-anchor" href="#vue-路由懒加载-按需加载路由" aria-label="Permalink to &quot;Vue 路由懒加载（按需加载路由）&quot;">​</a></h3><p>我们可以使用 <code>defineAsyncComponent</code> 函数来定义异步组件，该函数接收一个返回值为<code>Promise</code>的函数，用于加载组件</p><p>在引入组件时候， 我们可以通过<code>import</code> 动态导入组件， 这将返回一个<code>Promise</code> 对象， 表示组件的异步加载</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#89DDFF;"> {</span><span style="color:#BABED8;"> createRouter</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> createWebHashHistory</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> defineAsyncComponent</span><span style="color:#89DDFF;"> }</span><span style="color:#89DDFF;font-style:italic;"> from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> Home </span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;"> defineAsyncComponent</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> import</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./views/Home.vue</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">))</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> About </span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;"> defineAsyncComponent</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> import</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./views/About.vue</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">))</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> Contact </span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;"> defineAsyncComponent</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> import</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./views/Contact.vue</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">))</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> routes </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> [</span></span>
<span class="line"><span style="color:#89DDFF;">  {</span><span style="color:#F07178;"> path</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">/</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> component</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> Home </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">  {</span><span style="color:#F07178;"> path</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">/about</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> component</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> About </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">  {</span><span style="color:#F07178;"> path</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">/contact</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> component</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> Contact </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#BABED8;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> router </span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;"> createRouter</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  history</span><span style="color:#89DDFF;">:</span><span style="color:#82AAFF;"> createWebHashHistory</span><span style="color:#BABED8;">()</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">  routes</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#89DDFF;font-style:italic;"> default</span><span style="color:#BABED8;"> router</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h3 id="vue3-0-是如何变得更快的-底层-源码" tabindex="-1">Vue3.0 是如何变得更快的？（底层，源码） <a class="header-anchor" href="#vue3-0-是如何变得更快的-底层-源码" aria-label="Permalink to &quot;Vue3.0 是如何变得更快的？（底层，源码）&quot;">​</a></h3><p>Vue3在性能上进行了一系列的优化和改进，主要通过以下几个方面实现了更好的性能</p><ul><li><p><strong>Proxy 取代了 Object.defineProperty</strong></p><p>Vue3 引入了 Proxy 对象来代替 Vue2 中使用的 Object.defineProperty, Proxy 相对于 Object.defineproperty具有更强大和灵活的功能，它能够监控对象的所有属性，而不仅仅是对象的属性， 这使得Vue3能够高效的追踪数据的变化，从而提高响应性能</p></li><li><p><strong>编译优化</strong></p><p>Vue3 的编译器做了大量的优化工作， 生成的运行时代码更为精简和高效，其中有一个重要的变化是将模版编译为更优化的渲染函数，减少了运行时的开销，新的编译器还引入了静态提升(Static Hoisting)等 技术， 使得生成的代码更加紧凑和高效</p></li><li><p><strong>Tree-Shanking的支持</strong></p><p>Vue3在设计上更加友好用于 tree-shanking 使得在应用中使用Vue3时能够更好地利用打包模块工具(如webpack)的 tree-shanking 功能，去除无用的代码， 减少包的大小</p></li><li><p><strong>Fragment 和 Teleprot</strong></p><p>Vue3 引入了 Fragment 和 Teleport 两个新特性， 它们使得组件的渲染更加高效。</p><p>Fragment 允许组件返回多个根节点， 而 Teleport 允许将组件的内容渲染到DOM树的其他位置， 这两个特性能够减少不必要的DOM操作，提升渲染性能</p></li><li><p><strong>Composition API</strong></p><p>Composition API 是Vue3中一个重要的新增特性，它提供了更灵活和可复用的组件逻辑复用方式。使用 Composition API能够更好地组织和封装组件逻辑，提高代码的可维护性。 同时，它也有助于更好的利用JavaScript 引擎的优化， 使得组件的性能更高效</p></li><li><p><strong>自定义渲染器和渲染优化</strong></p><p>Vue3 引入了一个新的渲染器API， 使得可以更轻松地构建自定义渲染器、这使得Vue3.0不仅能够在浏览器中运行，还可以在服务器、原生应用等环境中使用。 同时，新的渲染器API也带来了更多的渲染优化，使得Vue3 在不同环境下都能够高效地工作</p></li></ul><h3 id="vuex" tabindex="-1">Vuex <a class="header-anchor" href="#vuex" aria-label="Permalink to &quot;Vuex&quot;">​</a></h3><img src="`+F+'" alt="Vuex"><p>Vuex 是一个专门为vue.js应用程序开发的状态管理模式，通过创建一个集中的数据存储，方便程序中的所有组件进行访问，是Vue的状态管理工具</p><p>Vuex有五个属性 <em>state</em> <em>getters</em> <em>mutations</em> <em>actions</em> <em>modules</em></p><ul><li><p><em>state</em></p><p>数据源存放地， 对应一般 vue 对象的 data， <em>state</em> 里存放的数据是响应式的， <em>state</em> 数据发生改变，对应这个数据的组件也会发生改变</p></li><li><p><em>getters</em></p><p><em>getters</em> 相当于 store 的计算属性， 主要是对 <em>state</em> 中数据的过滤</p></li><li><p><em>mutations</em></p><p><em>mutations</em> 放置了所有的处理数据逻辑的方法， 当触发事件想改变 <em>state</em> 数据的时候使用 <em>mutations</em>， 调用时添加一个参数 就是 <em>mutations</em> 的载荷</p></li><li><p><em>actions</em></p><p><em>actions</em> 异步操作数据， 但是通过 <em>mutations</em>来操作，通过 <em>dispatch</em> 触发， <em>actions</em> 也支持载荷</p></li><li><p><em>modules</em></p><p>为了解决 <em>store</em>对象过于臃肿的问题， 将 <em>store</em> 分割成 <em>modules</em> 模块</p></li></ul>',20);function P(R,T,M,w,I,S){const p=e;return c(),r("div",null,[y,s("h3",i,[d,a("、"),s("code",null,l(),1),a("、"),u,a("区别 "),B]),g,E,A,h,s("p",null,[C,a(" 指令操作网页元素的恶纯文本内容，与 "),s("code",null,l(),1),a("等价， 只是 "),m,a("叫指令， "),s("code",null,l(),1),a("叫模版插值 "),s("code",null,l(),1),a("是它的另一种写法")]),s("p",null,[v,a("将数据解析成纯文本，不能输出真正的 html ， 与模版插值"),s("code",null,l(),1),a("区别是在页面加载时不显示双花括号")]),f,s("ul",null,[s("li",null,[o(p,{title:"vue生命周期",href:"../../frame/vue/vue生命周期"})])]),b,s("p",null,[a("插值是最基本的数据绑定方式之一，使用双大括号"),s("code",null,l(),1),a("将变量插入到模版中")]),q,s("ul",null,[s("li",null,[o(p,{title:"vue常用指令",href:"../../frame/vue/vue指令"})])]),x,s("ul",null,[s("li",null,[o(p,{title:"keepalive",href:"../../frame/vue/keepAlive"})])]),k,s("ul",null,[s("li",null,[o(p,{title:"双向绑定",href:"../../frame/vue/双向绑定原理"})])]),V,s("ul",null,[s("li",null,[o(p,{title:"首页白屏",href:"../../frame/vue/首页白屏"})])]),_])}const N=t(D,[["render",P]]);export{L as __pageData,N as default};
