import{_ as s,o as a,c as o,R as n}from"./chunks/framework.AonOEUEq.js";const A=JSON.parse('{"title":"Array.map与Array.forEach的区别","description":"","frontmatter":{},"headers":[],"relativePath":"native/javascript/map与forEach的区别.md","filePath":"native/javascript/map与forEach的区别.md","lastUpdated":1703159803000}'),l={name:"native/javascript/map与forEach的区别.md"},p=n(`<h1 id="array-map与array-foreach的区别" tabindex="-1">Array.map与Array.forEach的区别 <a class="header-anchor" href="#array-map与array-foreach的区别" aria-label="Permalink to &quot;Array.map与Array.forEach的区别&quot;">​</a></h1><h3 id="定义" tabindex="-1">定义 <a class="header-anchor" href="#定义" aria-label="Permalink to &quot;定义&quot;">​</a></h3><ul><li><p><code>Array.map</code>: <code>map()</code> 方法创建一个新数组，这个新数组由原数组中的每个元素都调用一次提供的函数后的返回值组成。</p><p><strong>语法</strong></p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#82AAFF;">map</span><span style="color:#BABED8;">(callbackFn)</span></span>
<span class="line"><span style="color:#82AAFF;">map</span><span style="color:#BABED8;">(callbackFn</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> thisArg)</span></span></code></pre></div><p><strong>参数</strong><code>callbackFn</code>: 为数组中的每个元素执行的函数， 它的返回值作为一个元素被添加为新数组中，该函数被调用时将传入以下参数：</p><blockquote><p><code>element</code>: 数组中当前正在处理的元素 <br><code>index</code>: 正在处理的元素的索引 <br><code>array</code>: 调用了<code>map()</code>数组本身</p></blockquote><p><strong>返回值</strong> 一个新数组，每个元素都是回调函数的返回值</p></li><li><p><code>Array.forEach</code>: <code>forEach()</code> 方法对数组的每个元素执行一次给定的函数。</p><p><strong>语法</strong></p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#82AAFF;">forEach</span><span style="color:#BABED8;">(callbackFn)</span></span>
<span class="line"><span style="color:#82AAFF;">forEach</span><span style="color:#BABED8;">(callbackFn</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> thisArg)</span></span></code></pre></div><p><strong>参数</strong><code>callbackFn</code>: 为数组中每个元素执行的函数。并会丢弃它的返回值。该函数被调用时将传入以下参数：</p><blockquote><p><code>element</code>: 数组中当前正在处理的元素 <br><code>index</code>: 正在处理的元素的索引 <br><code>array</code>: 调用了<code>map()</code>数组本身</p></blockquote><p><strong>返回值</strong><code>undefined</code></p><p>简单来说<code>map</code>是返回一个新的数组， 而<code>forEach</code>不会返回值(实际上返回了<code>undefined</code>)</p></li></ul><h4 id="简单实现" tabindex="-1">简单实现 <a class="header-anchor" href="#简单实现" aria-label="Permalink to &quot;简单实现&quot;">​</a></h4><ul><li><p><code>map</code></p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#82AAFF;"> myMap</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">array</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> callback</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> result</span><span style="color:#89DDFF;">  =</span><span style="color:#F07178;"> []</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  for</span><span style="color:#F07178;"> (</span><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> i</span><span style="color:#89DDFF;"> =</span><span style="color:#F78C6C;"> 0</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> i</span><span style="color:#89DDFF;"> &lt;</span><span style="color:#BABED8;"> array</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">length</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;">  i</span><span style="color:#89DDFF;">++</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">    result</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#F07178;">(</span><span style="color:#82AAFF;">callback</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">array</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">i</span><span style="color:#F07178;">])</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> i</span><span style="color:#BABED8;"> array</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  return</span><span style="color:#BABED8;"> result</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div></li><li><p><code>forEach</code></p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">  function</span><span style="color:#82AAFF;"> myForEach</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">array</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> callback</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    for</span><span style="color:#F07178;"> (</span><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> i</span><span style="color:#89DDFF;"> =</span><span style="color:#F78C6C;"> 0</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> i</span><span style="color:#89DDFF;"> &lt;</span><span style="color:#BABED8;"> array</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">length</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> i</span><span style="color:#89DDFF;">++</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#82AAFF;">      callback</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">array</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">i</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> i</span><span style="color:#BABED8;"> array</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">简单对比</p><p><code>forEach</code>和<code>map</code>的实现原理类似， 它们都是通过遍历数组，对数组的每个元素执行特定的函数， 区别主要在于处理函数返回值的方式不同。 <code>forEach</code>忽略函数的返回值， 而<code>map</code>则将函数的返回值收集到一个新数组中</p></div></li></ul>`,5),e=[p];function c(t,r,y,i,F,D){return a(),o("div",null,e)}const B=s(l,[["render",c]]);export{A as __pageData,B as default};
