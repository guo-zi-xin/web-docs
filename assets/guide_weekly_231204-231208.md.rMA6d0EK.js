import{_ as s,o as a,c as n,a8 as l}from"./chunks/framework.QttzOlP4.js";const B=JSON.parse('{"title":"231204 ~ 231208","description":"","frontmatter":{},"headers":[],"relativePath":"guide/weekly/231204-231208.md","filePath":"guide/weekly/231204-231208.md","lastUpdated":1702463634000}'),o={name:"guide/weekly/231204-231208.md"},p=l(`<h1 id="_231204-231208" tabindex="-1">231204 ~ 231208 <a class="header-anchor" href="#_231204-231208" aria-label="Permalink to &quot;231204 ~ 231208&quot;">​</a></h1><h3 id="_23-12-06" tabindex="-1">23-12-06 <a class="header-anchor" href="#_23-12-06" aria-label="Permalink to &quot;23-12-06&quot;">​</a></h3><p><strong>设计一个函数让两个数字相加，但不得使用<code>+</code>或者其他运算符</strong></p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#BABED8;">输入 a </span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;"> 1</span><span style="color:#BABED8;"> b </span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;"> 2</span></span>
<span class="line"><span style="color:#BABED8;">输出 </span><span style="color:#F78C6C;">3</span></span></code></pre></div><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> getSum </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> (</span><span style="color:#BABED8;font-style:italic;">a</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;">number</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> b</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;">number</span><span style="color:#89DDFF;">):</span><span style="color:#FFCB6B;">number</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;"> return</span><span style="color:#F07178;"> [</span><span style="color:#89DDFF;">...</span><span style="color:#82AAFF;">Array</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">a</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> ...</span><span style="color:#82AAFF;">Array</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">b</span><span style="color:#F07178;">)]</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">length</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><ul><li><strong>如果是多个参数求和</strong></li></ul><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> getSums </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> (...</span><span style="color:#BABED8;font-style:italic;">args</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;">number</span><span style="color:#BABED8;">[]</span><span style="color:#89DDFF;">):</span><span style="color:#FFCB6B;">number</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> arr</span><span style="color:#89DDFF;"> =</span><span style="color:#F07178;"> []</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  for</span><span style="color:#F07178;"> (</span><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> k</span><span style="color:#89DDFF;"> =</span><span style="color:#F78C6C;"> 0</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> k</span><span style="color:#89DDFF;"> &lt;</span><span style="color:#BABED8;"> args</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">length</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> k</span><span style="color:#89DDFF;">++</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">    arr</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">...</span><span style="color:#82AAFF;">Array</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">args</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">k</span><span style="color:#F07178;">]))</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  return</span><span style="color:#BABED8;"> arr</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">length</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h3 id="_23-12-08" tabindex="-1">23-12-08 <a class="header-anchor" href="#_23-12-08" aria-label="Permalink to &quot;23-12-08&quot;">​</a></h3><h4 id="import-和-require-区别" tabindex="-1"><code>import</code> 和 <code>require</code> 区别 <a class="header-anchor" href="#import-和-require-区别" aria-label="Permalink to &quot;\`import\` 和 \`require\` 区别&quot;">​</a></h4><ul><li><p><strong>来源不同</strong></p><p><code>import</code>/<code>export</code> 来源于ECM(ES6)</p><p><code>require</code>/<code>exports</code> 来源于<code>CommonJS</code></p></li><li><p><strong>加载时机不同</strong></p><p><code>import</code>/<code>export</code> 编译时加载</p><p><code>require</code>/<code>exports</code> 运行时加载</p></li><li><p><strong>输出不同</strong></p><p><code>import</code>/<code>export</code> 输出的是值的引用，JS 引擎对脚本静态分析的时候，遇到模块加载命令<code>import</code>，就会生成一个只读引用。等到脚本真正执行时，再根据这个只读引用，到被加载的那个模块里面去取值。</p><p><code>require</code>/<code>exports</code> 输出的是对象的拷贝， 在引入的模块中的变化影响不到这个值.</p><p>若文件引用的模块值改变，require 引入的模块值不会改变，而 import 引入的模块值会改变。</p></li><li><p><strong>用法不同</strong></p><p><code>require</code>/<code>exports</code></p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> fs </span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;"> require</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">fs</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// exports相当于是对 module.exports的引用  两者等价</span></span>
<span class="line"><span style="color:#89DDFF;">exports.</span><span style="color:#BABED8;">fs </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> fs</span></span>
<span class="line"><span style="color:#89DDFF;">module.exports</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> fs</span></span></code></pre></div><p><code>import</code>/<code>export</code></p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#89DDFF;"> {</span><span style="color:#BABED8;">readFile</span><span style="color:#89DDFF;">}</span><span style="color:#89DDFF;font-style:italic;"> from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">fs</span><span style="color:#89DDFF;">&#39;</span><span style="color:#676E95;font-style:italic;"> //从 fs 导入 readFile 模块</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#89DDFF;"> {</span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#89DDFF;font-style:italic;"> as</span><span style="color:#BABED8;"> fs</span><span style="color:#89DDFF;">}</span><span style="color:#89DDFF;font-style:italic;"> from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">fs</span><span style="color:#89DDFF;">&#39;</span><span style="color:#676E95;font-style:italic;"> //从 fs 中导入使用 export default 导出的模块</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#89DDFF;"> *</span><span style="color:#89DDFF;font-style:italic;"> as</span><span style="color:#BABED8;"> fileSystem </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">fs</span><span style="color:#89DDFF;">&#39;</span><span style="color:#676E95;font-style:italic;"> //从 fs 所有导出模块，引用对象名为 fileSystem</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#89DDFF;"> {</span><span style="color:#BABED8;">readFile</span><span style="color:#89DDFF;font-style:italic;"> as</span><span style="color:#BABED8;"> read</span><span style="color:#89DDFF;">}</span><span style="color:#89DDFF;font-style:italic;"> from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">fs</span><span style="color:#89DDFF;">&#39;</span><span style="color:#676E95;font-style:italic;"> //从 fs 导入 readFile 模块，引用对象名为 read</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#89DDFF;font-style:italic;"> default</span><span style="color:#BABED8;"> fs</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#C792EA;"> const</span><span style="color:#BABED8;"> fs</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#C792EA;"> function</span><span style="color:#82AAFF;"> readFile</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#89DDFF;"> {</span><span style="color:#BABED8;">readFile</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> read</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#89DDFF;"> *</span><span style="color:#89DDFF;font-style:italic;"> from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">fs</span><span style="color:#89DDFF;">&#39;</span></span></code></pre></div></li></ul>`,10),e=[p];function t(c,r,y,D,F,i){return a(),n("div",null,e)}const f=s(o,[["render",t]]);export{B as __pageData,f as default};
