import{_ as o}from"./chunks/CustomLink.HhFLulSs.js";import{_ as e,o as t,c,m as s,J as l,a as n,a8 as p}from"./chunks/framework.QttzOlP4.js";const O=JSON.parse('{"title":"JavaScript 相关","description":"","frontmatter":{},"headers":[],"relativePath":"interview/base/javascript.md","filePath":"interview/base/javascript.md","lastUpdated":1711372342000}'),r={name:"interview/base/javascript.md"},y=p('<h1 id="javascript-相关" tabindex="-1">JavaScript 相关 <a class="header-anchor" href="#javascript-相关" aria-label="Permalink to &quot;JavaScript 相关&quot;">​</a></h1><h3 id="javascript的语言特性" tabindex="-1">JavaScript的语言特性 <a class="header-anchor" href="#javascript的语言特性" aria-label="Permalink to &quot;JavaScript的语言特性&quot;">​</a></h3><ul><li>运行在客户端浏览器上</li><li>不用预编译，直接解析执行代码</li><li>弱类型语言，比较灵活</li><li>与操作系统无关，跨平台的语言</li><li>脚本语言</li><li>解释性语言</li></ul><blockquote><p>为什么JavaScript是弱类型语言</p><p>弱类型语言实现相对于强类型语言来说的，在强类型语言中，变量类型有很多种，比如 <code>int char float Boolean</code>,不同类型相互转换有时需要强制转换， 而JavaScript只有一种类型 var 为变量赋值时会自动判断类型并转换，所以是弱类型语言</p></blockquote><h3 id="javascript-中的基本数据类型" tabindex="-1">JavaScript 中的基本数据类型 <a class="header-anchor" href="#javascript-中的基本数据类型" aria-label="Permalink to &quot;JavaScript 中的基本数据类型&quot;">​</a></h3>',5),D=p(`<h3 id="ajax使用" tabindex="-1">Ajax使用 <a class="header-anchor" href="#ajax使用" aria-label="Permalink to &quot;Ajax使用&quot;">​</a></h3><p>Ajax（Asynchronous JavaScript and XML）是一种使用 JavaScript 和 XML 进行异步通信的技术。它可以在不刷新整个页面的情况下，通过向服务器发送请求并获取响应数据，实现动态更新页面内容。</p><p>一个完整的AJAX请求包括以下步骤：</p><ul><li><p>创建 <code>XMLHttpRequest</code> 对象：在 JavaScript 中，使用 <code>XMLHttpRequest</code> 对象来发起 Ajax 请求。可以通过 <code>new XMLHttpRequest()</code> 来创建该对象。</p></li><li><p>设置回调函数：在发送请求之前，需要设置一个回调函数来处理服务器响应。可以通过 <code>onreadystatechange</code> 属性来监听状态变化，并在状态变化时触发回调函数。</p></li><li><p>打开和发送请求：使用 <code>open()</code> 方法来指定请求的类型（GET 或 POST）以及请求的 URL。然后使用 <code>send()</code> 方法发送请求</p></li><li><p>处理响应：在回调函数中，可以通过 <code>readyState</code> 属性判断请求的状态，并通过 <code>status</code> 属性判断服务器响应的状态码。当 <code>readyState</code> 等于 <em>4</em> 并且 <code>status</code> 等于 <em>200</em> 时， 表示请求成功，并可以通过 <code>responseText</code> 或 <code>responseXML</code> 属性获取服务器返回的数据。</p></li><li><p>示例</p></li></ul><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">  var</span><span style="color:#BABED8;"> xhr </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> new</span><span style="color:#82AAFF;"> XMLHttpRequest</span><span style="color:#BABED8;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">  xhr</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">onreadystatechange</span><span style="color:#89DDFF;"> =</span><span style="color:#C792EA;"> function</span><span style="color:#89DDFF;">()</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">xhr</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">readyState</span><span style="color:#89DDFF;"> ===</span><span style="color:#F78C6C;"> 4</span><span style="color:#89DDFF;"> &amp;&amp;</span><span style="color:#BABED8;"> xhr</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">status</span><span style="color:#89DDFF;"> ===</span><span style="color:#F78C6C;"> 200</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#C792EA;">      var</span><span style="color:#BABED8;"> response</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> xhr</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">responseText</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">      // 处理服务器返回的数据</span></span>
<span class="line"><span style="color:#BABED8;">      console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">response</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#89DDFF;">  };</span></span>
<span class="line"><span style="color:#BABED8;">  xhr</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">open</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">GET</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">http://example.com/api/data</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#FF9CAC;"> true</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">  xhr</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">send</span><span style="color:#BABED8;">()</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h5 id="ajax请求返回的状态码-常用" tabindex="-1">Ajax请求返回的状态码(常用) <a class="header-anchor" href="#ajax请求返回的状态码-常用" aria-label="Permalink to &quot;Ajax请求返回的状态码(常用)&quot;">​</a></h5><table><thead><tr><th style="text-align:left;">状态码</th><th style="text-align:left;">含义</th></tr></thead><tbody><tr><td style="text-align:left;"><code>100</code></td><td style="text-align:left;">表示客户端应该继续发送请求，是临时响应，用于通知客户端，部分的请求服务器已经接受，但是客户端继续发送请求剩余部分，如果请求已经完成，就忽略这个响应</td></tr><tr><td style="text-align:left;"><code>200</code></td><td style="text-align:left;">表示服务器已经成功接受请求，并返回客户端所请求的结果</td></tr><tr><td style="text-align:left;"><code>202</code></td><td style="text-align:left;">表示服务器已经接受了请求，但是还没有处理，而且这个请求最终会不会处理还不确定</td></tr><tr><td style="text-align:left;"><code>204</code></td><td style="text-align:left;">表示服务器已经成功处理了请求，但没有返回任何实体内容， 可能会返回新的头部元信息</td></tr><tr><td style="text-align:left;"><code>301</code></td><td style="text-align:left;">客户端请求的网页已经永久移动到新位置，当链接发生变化时， 返回 301 代码告诉客户端链接的变化，客户端保存新的链接，并向新的链接发起请求，一返回请求结果</td></tr><tr><td style="text-align:left;"><code>403</code></td><td style="text-align:left;">表示客户端请求的资源没有权限查看</td></tr><tr><td style="text-align:left;"><code>404</code></td><td style="text-align:left;">表示请求失败， 客户端请求的资源没有找到或者不存在</td></tr><tr><td style="text-align:left;"><code>500</code></td><td style="text-align:left;">表示服务器遇到未知错误，导致无法完成客户端当前请求</td></tr><tr><td style="text-align:left;"><code>502</code></td><td style="text-align:left;">表示服务器请求超时</td></tr><tr><td style="text-align:left;"><code>503</code></td><td style="text-align:left;">表是服务器由于临时的服务器过载或者维护，无法解决当前请求</td></tr></tbody></table><h3 id="闭包" tabindex="-1">闭包 <a class="header-anchor" href="#闭包" aria-label="Permalink to &quot;闭包&quot;">​</a></h3><h5 id="闭包的定义" tabindex="-1">闭包的定义 <a class="header-anchor" href="#闭包的定义" aria-label="Permalink to &quot;闭包的定义&quot;">​</a></h5><p>闭包可以简单理解成：定义在一个函数内部的函数， 其中一个内部函数在包含它们的外部函数之外被调用时，就会形成闭包</p><p>闭包就是函数的局部变量集合，只是这些局部变量在函数返回后会继续存在。闭包就是就是函数的“堆栈”在函数返回后并不释放， 我们也可以理解为这些函数堆栈并不在栈上分配而是在堆上分配。当在一个函数内定义另外一个函数就会产生闭包。</p><h5 id="为什么要用" tabindex="-1">为什么要用 <a class="header-anchor" href="#为什么要用" aria-label="Permalink to &quot;为什么要用&quot;">​</a></h5><p>匿名自执行函数： 我们知道所有的变量，如果不架上 var 关键字，则默认的会添加到全局对象的属性上去，这样的临时变量加入全局对象有很多坏处，比如 别的函数可能误用这些变量；造成全局对象过于庞大， 影响访问速度(因为变量的取值是需要从原型链上遍历的)。 除了每次使用变量都是用 var 关键字外， 我们在实际情况下经常遇到这样一种情况，即有的函数只需要执行一次，其内部变量无需维护， 就可以使用闭包</p><p>结果缓存： 我们在开发中会遇到很多情况， 设想我们有一个处理过程很耗时的函数对象，每次调用都会花费很长时间， 那么我们就需要把计算出来的值储存起来，当调用就这个函数的时候， 首先在缓存中查找，如果找不到就重新计算， 然后更新缓存并返回值，如果找到了， 直接返回查找到的值即可。 闭包正式可以做到这一点， 因为它不会释放外部的引用，从而函数内部的值得以保留。</p><h5 id="闭包的特性" tabindex="-1">闭包的特性 <a class="header-anchor" href="#闭包的特性" aria-label="Permalink to &quot;闭包的特性&quot;">​</a></h5><ul><li><p>闭包的写法一般是函数嵌套函数</p></li><li><p>可以访问函数外部的变量：闭包可以访问定义它的函数的参数和局部变量，甚至可以访问全局变量。</p></li><li><p>保存变量的状态：当函数执行完毕后，闭包仍然可以访问它所引用的变量，并且这些变量的值不会被回收。</p></li><li><p>可以作为参数传递：闭包可以作为参数传递给其它函数，也可以被其它函数返回。</p></li></ul><p><strong>优点</strong></p><ul><li>变量长期驻扎在内存中</li><li>避免全局变量的污染</li><li>存在私有成员</li></ul><p><strong>缺点</strong></p><ul><li>会造成内存泄漏</li></ul><details class="details custom-block"><summary>什么是内存泄漏</summary><p>内存泄漏(Memory Leak)是指程序中已经不再使用的内存没有被及时释放，导致系统的可用内存逐渐减少，最终可能导致程序崩溃。</p><p><strong>产生场景</strong></p><ul><li><p><em>对象或变量未被正确销毁</em>：当一个对象或变量不再被使用时，应该及时将它们从内存中删除。如果没有正确销毁这些对象或变量，它们所占用的内存就会一直存在，造成内存泄漏。</p></li><li><p><em>循环引用</em>：当两个或多个对象相互引用时，如果它们之间没有被正确断开引用关系，就会形成循环引用。这种情况下，这些对象所占用的内存就无法被垃圾回收器回收，从而导致内存泄漏。</p></li><li><p><em>定时器未被清除</em>：在使用 JavaScript 定时器时，如果没有及时清除已经失效的定时器，就会导致定时器所占用的内存无法被释放，从而造成内存泄漏。</p></li><li><p><em>闭包</em></p></li><li><p><em>脱离DOM的引用</em></p></li></ul><p><strong>防止内存泄漏</strong></p><ol><li><p>及时销毁不再使用的对象或变量，尤其是大内存占用的对象。</p></li><li><p>避免循环引用，确保对象之间的引用关系能够正确断开。</p></li><li><p>在使用定时器时，一定要记得及时清除已经失效的定时器。</p></li><li><p>使用内存分析工具来检测内存泄漏问题，及时发现和解决潜在问题。</p></li><li><p>赋值为null</p></li></ol></details><h3 id="事件委托" tabindex="-1">事件委托 <a class="header-anchor" href="#事件委托" aria-label="Permalink to &quot;事件委托&quot;">​</a></h3><p>事件委托就是利用时间冒泡，只制定一个时间处理程序，就可以管理某一些类型的所有事件。 —— 《JS高级程序设计》</p><p>事件委托，称为事件代理，是js中很常用的绑定事件的技巧，事件委托就是把原本需要绑定在子元素上的响应时间委托给父元素，让父元素担当事件监听的职务，事件委托的原理就是DOM元素的时间冒泡</p><h5 id="事件委托优点" tabindex="-1">事件委托优点 <a class="header-anchor" href="#事件委托优点" aria-label="Permalink to &quot;事件委托优点&quot;">​</a></h5><ul><li><p><strong>提高整体运行性能</strong></p><p>假如现在有有00个li标签，那个li事件都有相同的点击事件，如果使用循环遍历去触发每个li元素上的事件， 这将会不断与DOM节点进行交互，访问DOM次数越多，引起浏览器回流和重绘的次数也就越多， 就会延长整个页面的交互时间，如果委托给父级ul标签， 我们与DOM的交互只需要交互一次，这样就大大减少DOM的交互次数， 提高性能</p></li><li><p><strong>减少内存空间</strong></p><p>每个函数都是对象，对象会占用内存，对象越多，内存占用率越大，性能也会变差，但利用事件委托，就只对它的父级进行操作，减少了调用的对象，节省了内存空间</p></li><li><p><strong>动态绑定事件处理程序</strong></p><p>由于事件委托是基于事件冒泡机制实现的，因此可以动态地添加或删除子元素，而无需重新绑定事件处理程序。</p></li><li><p><strong>处理未来元素的事件</strong></p><p>由于事件委托是基于父元素的事件处理程序实现的，因此可以处理未来添加到页面上的元素的事件</p></li></ul><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#BABED8;">  window</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">onload</span><span style="color:#89DDFF;"> =</span><span style="color:#C792EA;"> function</span><span style="color:#89DDFF;">()</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;">      var</span><span style="color:#BABED8;"> oUl</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getElementById</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">ul1</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#BABED8;">      oUl</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">onclick</span><span style="color:#89DDFF;"> =</span><span style="color:#C792EA;"> function</span><span style="color:#89DDFF;">()</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#82AAFF;">        alert</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">利用事件冒泡的原理，将事件委托给父元素</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">      }</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span></code></pre></div><h5 id="事件源" tabindex="-1">事件源 <a class="header-anchor" href="#事件源" aria-label="Permalink to &quot;事件源&quot;">​</a></h5><p>Event 对象提供了一个属性叫 <code>target</code>， 可以返回事件的目标节点，我们称为事件源。</p><p>但这个有兼容性：</p><blockquote><p>标准浏览器使用 <code>event.target</code> IE浏览器使用 <code>event.srcElement</code></p></blockquote><h3 id="事件冒泡" tabindex="-1">事件冒泡 <a class="header-anchor" href="#事件冒泡" aria-label="Permalink to &quot;事件冒泡&quot;">​</a></h3><p>当一个元素接收到事件的时候，会把接收到事件传递给自己的父级。这种传递分为三个阶段</p><ul><li>捕获阶段：从window对象传导到目标节点(从外向里)， 这个阶段不会响应任何时间</li><li>目标阶段：从目标节点触发</li><li>冒泡阶段：从目标节点传回到window对象(从里到外), 事件委托/代理就是利用事件冒泡的机制把里层需要相拥的事件绑定到外层</li></ul><h3 id="本地存储与cookie的区别" tabindex="-1">本地存储与cookie的区别 <a class="header-anchor" href="#本地存储与cookie的区别" aria-label="Permalink to &quot;本地存储与cookie的区别&quot;">​</a></h3><p>本地存储(Local Storage)和Cookie都是用于在浏览器端存储数据的两种不同的机制，主要有以下区别</p><ul><li><p>存储容量</p><p>Cookie的存储容量通常比较小，每个cookie的大小限制为4KB， 因为每个http请求都会携带cookie，如果过多的cookie数据，会影响请求性能</p><p>本地存储的容量相对较大，通常可达到5MB，这使得本地存储更适合大量数据的本地保存</p></li><li><p>生命周期</p><p>Cookie可以设置过期时间，可以使会话级的(浏览器关闭时失效)， 也可以是持久性的。Cookie还可以设置域名和路径，用于控制其在哪些请求中发送</p><p>本地存储分为两种 <code>localStorage</code>和<code>sessionStorage</code>. <code>localStorage</code>是永久性的，除非通过代码或者浏览器设置进行删除，而<code>sessionStorage</code>存储的数据会在会话结束时失效， 即浏览器标签关闭</p></li><li><p>安全性</p><p>Cookie存在一些安全性问题，因为它可以被跨站脚本(XSS)攻击，也可能被窃取</p><p>本地存储相对来说更安全，因为它不会随着HTTP请求被发送到服务器，减少了被窃取的风险，但仍然需要注意防范XSS攻击</p></li><li><p>用途</p><p>Cookie主要用户客户端与服务端传递信息，可以在请求头中携带Cookie</p><p>本地存储主要用户客户端本地保存数据，供同一域名下的页面之间共享</p></li><li><p>访问方式</p><p>Cookie 通过<code>document.Cookie</code>来进行访问和设置</p><p>本地存储通过<code>localSorage</code>和<code>sessionStorage</code>对象进行访问与设置</p></li></ul><h3 id="es6新特性-常用" tabindex="-1">ES6新特性(常用) <a class="header-anchor" href="#es6新特性-常用" aria-label="Permalink to &quot;ES6新特性(常用)&quot;">​</a></h3>`,38),F=s("h3",{id:"数组的方法-常用",tabindex:"-1"},[n("数组的方法(常用) "),s("a",{class:"header-anchor",href:"#数组的方法-常用","aria-label":'Permalink to "数组的方法(常用)"'},"​")],-1),i=p(`<h3 id="json-新增-删除键值对" tabindex="-1">JSON 新增/删除键值对 <a class="header-anchor" href="#json-新增-删除键值对" aria-label="Permalink to &quot;JSON 新增/删除键值对&quot;">​</a></h3><ul><li>新增键值对</li></ul><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> jsonStr </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> {}</span></span>
<span class="line"><span style="color:#BABED8;">jsonStr</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">newKey </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">newValue</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">jsonStr[</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">name1</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">] </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">ming</span><span style="color:#89DDFF;">&quot;</span></span></code></pre></div><ul><li>删除键值对</li></ul><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> json </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> {</span><span style="color:#F07178;"> key1</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">value1</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> key2</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">value2</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 直接删除键值对</span></span>
<span class="line"><span style="color:#89DDFF;">delete</span><span style="color:#BABED8;"> json</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">key1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 解构赋值， newJson将是被删除后的JSON对象</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#89DDFF;"> {</span><span style="color:#BABED8;"> key1</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> ...</span><span style="color:#BABED8;">newJson </span><span style="color:#89DDFF;">}</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> json</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h3 id="面向对象" tabindex="-1">面向对象 <a class="header-anchor" href="#面向对象" aria-label="Permalink to &quot;面向对象&quot;">​</a></h3><p>面向对象是一种思想，是基于面向过程而言的，就是说面向对象是将功能等通过对象来实现，将功能封装到对象之中，让对象去实现具体的细节；</p><p>这种思想是将数据作为第一位，这是对数据一种优化，操作起来更方便，简化了过程</p><p>JS本身事没有 class 类型的， 但是每个函数都具有一个 prototype 属性， prototype指向一个对象， 当函数作为构造函数时， prototype就起到类似 class 的作用</p><p><strong>特点</strong></p><ul><li>封装(隐藏对象的属性和实现细节，对外提供公共访问方式)</li><li>继承(提高代码复用性，继承是多态的前提)</li><li>多态(是父类或接口定义的引用变量可以指向子嘞或者具体实现类的实例对象)</li></ul><h3 id="普通函数与构造函数区别" tabindex="-1">普通函数与构造函数区别 <a class="header-anchor" href="#普通函数与构造函数区别" aria-label="Permalink to &quot;普通函数与构造函数区别&quot;">​</a></h3><ol><li>构造函数也是一个普通函数，创建方式和普通函数一样，但是构造函数习惯首字母大写</li><li>调用方式不一样，普通函数直接调用，构造函数要用关键字 new 来调用</li><li>调用时，构造函数内部会创建一个新对象，就是实例，普通函数不会创建新对象</li><li>构造函数内部的this指向实例，普通函数内部的this指向调用函数的对象(如果没有调用，默认为window)</li><li>构造函数默认的返回值就是创建的对象(也就是实例)，普通函数的返回值由 return 决定</li><li>构造函数的函数名与类名相同</li></ol><blockquote><p>引申： 构造函数在被 new 的过程中 发生了什么</p><p>new 内部：</p><ul><li>创建一个新对象</li><li>使新对象的 <code>__proto__</code>指向原函数的<code>prototype</code></li><li>改变 this 指向(指向新的obj)，并执行该函数，执行结果保存起来作为 result</li><li>判断执行函数的结果是不是 null 或者 undefuned， 如果是则返回之前的新对象，如果不是则返回result</li></ul></blockquote><blockquote><p>引申：手写实现一个 new</p></blockquote><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 手写一个new</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#82AAFF;"> myNew</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">fn</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> ...</span><span style="color:#BABED8;font-style:italic;">args</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 创建一个空对象</span></span>
<span class="line"><span style="color:#C792EA;">  let</span><span style="color:#BABED8;"> obj</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> {}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 使空对象的隐式原型(obj对象的 __proto__)指向原函数的显式原型(函数的 prototype)</span></span>
<span class="line"><span style="color:#BABED8;">  obj</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">__proto__</span><span style="color:#89DDFF;"> =</span><span style="color:#FFCB6B;"> fn</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">prototype</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // this指向obj</span></span>
<span class="line"><span style="color:#C792EA;">  let</span><span style="color:#BABED8;"> result</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> fn</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">apply</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">obj</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> args</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 返回结果</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  return</span><span style="color:#BABED8;"> result</span><span style="color:#89DDFF;"> instanceof</span><span style="color:#FFCB6B;"> Object</span><span style="color:#89DDFF;"> ?</span><span style="color:#BABED8;"> result</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> obj</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h3 id="原型与原型链" tabindex="-1">原型与原型链 <a class="header-anchor" href="#原型与原型链" aria-label="Permalink to &quot;原型与原型链&quot;">​</a></h3>`,17),d=p('<h3 id="promise" tabindex="-1">Promise <a class="header-anchor" href="#promise" aria-label="Permalink to &quot;Promise&quot;">​</a></h3><ul><li><p>链接（ES6新特性二）// <strong>待开发</strong></p></li><li><p>解决问题</p><p>回调地狱， 代码难以维护， 常常第一个的函数的输出是第二个函数的输入这种现象；</p><p>支持多并发请求， 获取并发请求中的数据</p></li></ul><h3 id="async函数" tabindex="-1">async函数 <a class="header-anchor" href="#async函数" aria-label="Permalink to &quot;async函数&quot;">​</a></h3><p>Async函数其实是 generatior函数和promise的语法糖， async就是将generator函数的 <code>*</code>换为 <em>async</em> 将 <em>yield</em> 换为 <em>await</em></p><p>函数前必须加一个 <em>async</em>， 异步操作方法前加一个 <em>await</em> 关键字, 意思就是等这个异步操作执行， 执行完成之后再往下走；</p><p>注意⚠️：await只能在async中运行， 否则会报错</p><p>当运行返回报错时候， 通过 <code>try/catch</code>语句来捕获异常</p><ul><li>链接（ES6新特性二）// <strong>待开发</strong></li></ul><h3 id="get-请求传参长度误区" tabindex="-1">GET 请求传参长度误区 <a class="header-anchor" href="#get-请求传参长度误区" aria-label="Permalink to &quot;GET 请求传参长度误区&quot;">​</a></h3><p><strong>误区</strong></p><p>我们经常说 get 请求参数的大小存在限制， 而post请求的参数大小是无限制的。 实际上HTTP协议从未规定 GET/POST 的请求长度是多少， 对 GET 请求参数的限制是来源与浏览器或 web 服务器， 浏览器或者 web 服务器限制了 url 的长度， 为了明确这个概念， 我们必须再次强调以下几点：</p><ol><li>HTTP 协议未规定 GET 和 POST 的长度限制</li><li>GET 的最大长度显示是因为浏览器和 web 服务器限制了 url 的长度； 不同的浏览器和 web 服务器， 限制的最大长度是不一样的， 如果需要支持 IE， 则最大长度为 <code>2083byte</code>, 若只支持 Chrome 则最大长度是 <code>8182byte</code></li></ol><h3 id="get-请求和-post-请求在缓存方面的区别" tabindex="-1">GET 请求和 POST 请求在缓存方面的区别 <a class="header-anchor" href="#get-请求和-post-请求在缓存方面的区别" aria-label="Permalink to &quot;GET 请求和 POST 请求在缓存方面的区别&quot;">​</a></h3><p>GET 请求 一般是做查询操作， 是一个查找的过程， 可以不用每次都与数据库连接， 因此 GET 请求更适合请求缓存；</p><p>POST 请求一般是做增删改操作， 所以必须与数据库交互，所以不能使用缓存，</p><h3 id="事件流" tabindex="-1">事件流 <a class="header-anchor" href="#事件流" aria-label="Permalink to &quot;事件流&quot;">​</a></h3><p>HTML 和 Javascript 的交互是通过<em>事件驱动</em>来实现的， 例如鼠标点击事件 <em>onclick</em>, 页面滚动事件 <em>onscroll</em> 等，可以向文档或者文档中的元素添加事件侦听器来预定事件。</p><h5 id="事件流定义" tabindex="-1">事件流定义 <a class="header-anchor" href="#事件流定义" aria-label="Permalink to &quot;事件流定义&quot;">​</a></h5><p>事件流描述的是从页面中接收事件的顺序， DOM二级事件流包括几个阶段： 事件捕获阶段、处于目标阶段、 事件冒泡阶段</p><ul><li><p><code>addEventListener</code></p><p><code>addEventListener</code>是 DOM二级事件新增的指定事件处理程序的操作， 这个方法接收三个参数: 要处理的事件名、作为事件处理程序的函数和一个布尔值。</p><p>这个布尔值代表了什么阶段调用事件处理程序， 如果为<em>true</em>，表示是在捕获阶段调用事件处理程序， 如果是 <em>false</em>， 表示是在冒泡阶段调用事件处理程序</p><blockquote><p>IE浏览器只支持事件冒泡</p></blockquote></li></ul><h3 id="改变this指针的指向函数-call、apply-bind-区别" tabindex="-1">改变this指针的指向函数(<code>call</code>、<code>apply</code>,<code>bind</code>)区别 <a class="header-anchor" href="#改变this指针的指向函数-call、apply-bind-区别" aria-label="Permalink to &quot;改变this指针的指向函数(`call`、`apply`,`bind`)区别&quot;">​</a></h3>',21),B=s("h3",{id:"javascript-中-clientheight、scrollheight、offsetheight区别",tabindex:"-1"},[n("JavaScript 中 "),s("em",null,"clientHeight"),n("、"),s("em",null,"scrollHeight"),n("、"),s("em",null,"offsetHeight"),n("区别 "),s("a",{class:"header-anchor",href:"#javascript-中-clientheight、scrollheight、offsetheight区别","aria-label":'Permalink to "JavaScript 中 *clientHeight*、*scrollHeight*、*offsetHeight*区别"'},"​")],-1),A=p(`<h3 id="拖拽功能的实现" tabindex="-1">拖拽功能的实现 <a class="header-anchor" href="#拖拽功能的实现" aria-label="Permalink to &quot;拖拽功能的实现&quot;">​</a></h3><p>首先是三个事件: <code>mousedown</code>、 <code>mousemove</code>、 <code>mouseup</code>, 当鼠标点击按下的时候， 需要一个tag来标记此时已经按下了， 可以执行 <code>mousemove</code>里的方法。 <em>clientX</em> 和 <em>clientY</em> 是鼠标的横纵坐标， 我们用 <em>offsetX</em> 和 <em>offsetY</em> 来标识元素的初始坐标， 移动的距离应该是 鼠标移动时的坐标 - 鼠标按下去时刻的坐标。 也就是说定位信息为: 鼠标移动的坐标 - 鼠标按下去的坐标 + 元素初始情况下的 <em>offsetLeft</em>。 还有一点需要注意，拖拽的时候是绝对定位， 改变的是绝对定位条件下的方向的值</p><p>也可以通过H5的拖放(Drag和Drop)来实现</p><h3 id="javascript的垃圾回收机制" tabindex="-1">JavaScript的垃圾回收机制 <a class="header-anchor" href="#javascript的垃圾回收机制" aria-label="Permalink to &quot;JavaScript的垃圾回收机制&quot;">​</a></h3><h5 id="必要性" tabindex="-1">必要性 <a class="header-anchor" href="#必要性" aria-label="Permalink to &quot;必要性&quot;">​</a></h5><p>由于字符串、对象和数组没有固定大小， 所以当它们大小已知时，才能够对它们进行动态的存储分配。JavaScript程序每次创建字符串、数组或者对象时，解释器都必须分配内存来存储那个实体。 只要像这样动态分配了内存，最终都要释放这些内存以便它们能够被再用， 否则， JavaScript的解释器会消耗完系统中所有可用的内存，造成系统崩溃。</p><p>JavaScript不像C/C++， 它有一套自己的垃圾回收机制(Garbage Collection)。JavaScript的姐时期可以检测到何时程序不在使用一个对象了，当它确定了一个对象是无用的时候，它就知道不再需要这个对象 可以把它所占用的内存释放掉了。 例如：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#BABED8;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">hello world</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#BABED8;"> b </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">hello world</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#BABED8;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> b</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 这时，会释放掉&#39;hello world&#39; 释放内存以便在引用垃圾回收的方法： 标记清除，计数引用。</span></span></code></pre></div><h5 id="常见的垃圾回收方式" tabindex="-1">常见的垃圾回收方式 <a class="header-anchor" href="#常见的垃圾回收方式" aria-label="Permalink to &quot;常见的垃圾回收方式&quot;">​</a></h5><ul><li><p><strong>标记清除</strong></p><p>这是最常见的垃圾回收的方式，当变量进入环境时，就标记这个变量为<code>进入环境</code>， 从逻辑上来讲， 永远不能释放进入环境的变量所占用的内存，只要执行流程进入相应的环境，就可以用到它们。 当离开环境时， 就标记离开环境。</p><p>垃圾回收器在运行时会给存储在内存中的变量都加上标记(所有都加)， 然后去掉环境变量中的变量， 以及被环境变量中的变量所引用的变量(条件行去除标记), 删除所有被标记的变量， 删除的变量无法在 环境变量中被访问，所以会被删除， 最后垃圾回收器完成了内存的清除工作， 并回收它们所占用的内存</p></li><li><p><strong>计数引用</strong></p><p>这种方法不太常见，引用计数法的意思是每个值被引用的次数, 当声明了一个变量， 并用一个引用类型的值赋值给改变量，则这个值的引用次数就为1， 相反的，如果包含了对这个值引用的变量 又取得了另外一个值，则在原先的引用值的引用次数 减 1， 当这个值的引用次数为 0 的时候, 就会把所占的内存给回收进来，这样垃圾收集器再次运行的时候， 就会释放引用次数为 0 的这些值。</p><p>引用计数法存在 <em>内存泄漏</em>:</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#82AAFF;"> problem</span><span style="color:#89DDFF;">()</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;">  var</span><span style="color:#BABED8;"> obj1</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> new</span><span style="color:#82AAFF;"> Object</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">  var</span><span style="color:#BABED8;"> obj2</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> new</span><span style="color:#82AAFF;"> Object</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">  obj1</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">someOtherObject</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> obj2</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">anotherObject</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> obj1</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>在这个例子里面， obj1 和 obj2 通过各自的属性相互引用，这样的话，两个对象的引用次数为 2 在采用引用计数的策略中， 由于函数执行之后， 这两个对象都离开了作用域， 函数执行完成之后， 因为 计数不为 0 , 这样的相互引用如果大量存在就会导致内存泄漏。</p><p>特别是在DOM对象中， 也容易存在这种问题：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#BABED8;"> element </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getElementById</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#BABED8;">)</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#BABED8;"> obj1 </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> new</span><span style="color:#82AAFF;"> Object</span><span style="color:#BABED8;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">obj1</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">element </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> element</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">element</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">someObject </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> obj1</span></span></code></pre></div><p>这样就不会有垃圾回收的过程</p></li></ul><h3 id="javascript监听对象属性的改变" tabindex="-1">JavaScript监听对象属性的改变 <a class="header-anchor" href="#javascript监听对象属性的改变" aria-label="Permalink to &quot;JavaScript监听对象属性的改变&quot;">​</a></h3><p>在ES5中， 我们可以通过<code>Object.defineProperty</code>来实现已有属性的监听：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#BABED8;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">defineproperty</span><span style="color:#BABED8;">(user</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">name</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> (</span><span style="color:#BABED8;font-style:italic;">set</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> function</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">key</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> value</span><span style="color:#89DDFF;">){</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">})</span><span style="color:#BABED8;">)</span></span></code></pre></div><p>缺点：如果id不再user对象中， 则不能监听id的变化</p><p>在ES6中， 我们可以通过 Proxy 来实现：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#BABED8;"> user </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> new</span><span style="color:#82AAFF;"> Proxy</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">{},{</span></span>
<span class="line"><span style="color:#82AAFF;">  set</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;"> function</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">target</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;">key</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;">value</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;">receiver</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span></span></code></pre></div><p>这样， 即使有属性在user中不存在， 通过user.id同样也可以这样监听这个属性的变化</p><h3 id="手动实现一个-bind-函数" tabindex="-1">手动实现一个 <code>bind</code> 函数 <a class="header-anchor" href="#手动实现一个-bind-函数" aria-label="Permalink to &quot;手动实现一个 \`bind\` 函数&quot;">​</a></h3><ul><li>原理： 通过 apply 或者 call 方法来实现。</li></ul><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#FFCB6B;">Function</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">bind</span><span style="color:#89DDFF;"> =</span><span style="color:#C792EA;"> function</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">obj</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> arg</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;">  var</span><span style="color:#BABED8;"> arg</span><span style="color:#89DDFF;"> =</span><span style="color:#FFCB6B;"> Array</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">slice</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">call</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">arguments</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">1</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">  var</span><span style="color:#BABED8;"> context</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> this;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  return</span><span style="color:#C792EA;"> function</span><span style="color:#89DDFF;"> (</span><span style="color:#BABED8;font-style:italic;">newArg</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">    arg</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> arg</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">concat</span><span style="color:#F07178;">(</span><span style="color:#FFCB6B;">Array</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">slice</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">call</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">newArg</span><span style="color:#F07178;">))</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    return</span><span style="color:#BABED8;"> context</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">apply</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">obj</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> arg</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><ul><li><p>考虑原型链</p><blockquote><p>为什么考虑原型链？ 因为在 new 一个 bind ， 过程中生成新函数的时候， 必须条件就是要继承原函数原型</p></blockquote></li></ul><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#FFCB6B;">Function</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">bind</span><span style="color:#89DDFF;"> =</span><span style="color:#C792EA;"> function</span><span style="color:#89DDFF;"> (</span><span style="color:#BABED8;font-style:italic;">obj</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> arg</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;">  var</span><span style="color:#BABED8;"> arg</span><span style="color:#89DDFF;"> =</span><span style="color:#FFCB6B;"> Array</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">slice</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">call</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">arguments</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">1</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">  var</span><span style="color:#BABED8;"> context</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> this;</span></span>
<span class="line"><span style="color:#C792EA;">  var</span><span style="color:#BABED8;"> bound</span><span style="color:#89DDFF;"> =</span><span style="color:#C792EA;"> function</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">newArg</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">    arg</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> arg</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">concat</span><span style="color:#F07178;">(</span><span style="color:#FFCB6B;">Array</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">slice</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">call</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">newArg</span><span style="color:#F07178;">))</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">     return</span><span style="color:#BABED8;"> content</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">apply</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">obj</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> arg</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">  var</span><span style="color:#BABED8;"> F</span><span style="color:#89DDFF;"> =</span><span style="color:#C792EA;"> function</span><span style="color:#89DDFF;">()</span><span style="color:#89DDFF;"> {}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 这里需要组合继承</span></span>
<span class="line"><span style="color:#FFCB6B;">  F</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">prototype</span><span style="color:#89DDFF;"> =</span><span style="color:#FFCB6B;"> context</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">prototype</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#FFCB6B;">  bound</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">prototype</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> new</span><span style="color:#82AAFF;"> F</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  return</span><span style="color:#BABED8;"> bound</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h3 id="怎么控制一次加载一张图片-加载完后再加载下一张" tabindex="-1">怎么控制一次加载一张图片，加载完后再加载下一张 <a class="header-anchor" href="#怎么控制一次加载一张图片-加载完后再加载下一张" aria-label="Permalink to &quot;怎么控制一次加载一张图片，加载完后再加载下一张&quot;">​</a></h3><h5 id="方法1" tabindex="-1">方法1 <a class="header-anchor" href="#方法1" aria-label="Permalink to &quot;方法1&quot;">​</a></h5><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#BABED8;"> obj </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> new</span><span style="color:#82AAFF;"> Image</span><span style="color:#BABED8;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">obj</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">src </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">http://www.phpernote.com/uploadfiles/editor/201107240502201179.jpg</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">obj</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">onload</span><span style="color:#89DDFF;"> =</span><span style="color:#C792EA;"> function</span><span style="color:#89DDFF;">()</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#82AAFF;">alert</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">图片的宽度为: </span><span style="color:#89DDFF;">\${</span><span style="color:#BABED8;">obj</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">width</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">; 图片的高度为: </span><span style="color:#89DDFF;">\${</span><span style="color:#BABED8;">obj</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">height</span><span style="color:#89DDFF;">}\`</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getElementById</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">mypic</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">innnerHTML</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> \`</span><span style="color:#C3E88D;">&lt;img src=&quot;</span><span style="color:#89DDFF;">\${</span><span style="color:#89DDFF;">this.</span><span style="color:#BABED8;">src</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">&quot;/&gt;</span><span style="color:#89DDFF;">\`</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h5 id="方法2" tabindex="-1">方法2 <a class="header-anchor" href="#方法2" aria-label="Permalink to &quot;方法2&quot;">​</a></h5><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#BABED8;"> obj</span><span style="color:#89DDFF;">=new</span><span style="color:#82AAFF;"> Image</span><span style="color:#BABED8;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">obj</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">src</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">http://www.phpernote.com/uploadfiles/editor/201107240502201179.jpg</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">obj</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">onreadystatechange</span><span style="color:#89DDFF;">=</span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  if</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this.</span><span style="color:#BABED8;">readyState</span><span style="color:#89DDFF;">==</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">complete</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#82AAFF;">    alert</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">图片的宽度为: </span><span style="color:#89DDFF;">\${</span><span style="color:#BABED8;">obj</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">width</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">; 图片的高度为: </span><span style="color:#89DDFF;">\${</span><span style="color:#BABED8;">obj</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">height</span><span style="color:#89DDFF;">}\`</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">    document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getElementById</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">mypic</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">innnerHTML</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> \`</span><span style="color:#C3E88D;">&lt;img src=&quot;</span><span style="color:#89DDFF;">\${</span><span style="color:#89DDFF;">this.</span><span style="color:#BABED8;">src</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">&quot;/&gt;</span><span style="color:#89DDFF;">\`</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#C792EA;"> id</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">mypic</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;">onloading……</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><h3 id="javascript-对象的深度克隆" tabindex="-1">JavaScript 对象的深度克隆 <a class="header-anchor" href="#javascript-对象的深度克隆" aria-label="Permalink to &quot;JavaScript 对象的深度克隆&quot;">​</a></h3><p>通过递归可以简单实现对象的深度克隆，但是这种方法不管是 ES6 还是 ES5 实现, 都有同样的缺陷， 就是只能实现特定的 object 的深度复制(比如数组和函数)， 不能实现包装对象<code>Number</code>、 <code>String</code>、<code>Boolean</code>以及<code>Date</code>对象、<code>RegExp</code>对象的复制</p><ul><li>深度克隆</li></ul><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#82AAFF;"> deepClone</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">obj</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;">  var</span><span style="color:#BABED8;"> newObj</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> obj</span><span style="color:#89DDFF;"> instanceof</span><span style="color:#FFCB6B;"> Array</span><span style="color:#89DDFF;"> ?</span><span style="color:#F07178;"> []</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> {};</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  for</span><span style="color:#F07178;"> (</span><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> i</span><span style="color:#89DDFF;"> in</span><span style="color:#BABED8;"> obj</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">    newObj</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">i</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> typeof</span><span style="color:#BABED8;"> obj</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">i</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">===</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">object</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;"> ?</span><span style="color:#82AAFF;"> deepClone</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">obj</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">i</span><span style="color:#F07178;">]) </span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> obj</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">i</span><span style="color:#F07178;">]</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  return</span><span style="color:#BABED8;"> newObj</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>这种方法可以实现一般对象和数组对象的克隆，例如</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#BABED8;"> arr </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> [</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;"> 2</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;"> 3</span><span style="color:#BABED8;">]</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#BABED8;"> newArr </span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;"> deepClone</span><span style="color:#BABED8;">(arr)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// newArr -&gt; [1, 2, 3]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#BABED8;"> obj </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> {</span><span style="color:#F07178;"> x</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 1</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> y</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 2</span><span style="color:#89DDFF;"> }</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#BABED8;"> newObj </span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;"> deepClone</span><span style="color:#BABED8;">(obj)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// newObj -&gt; { x: 1, y: 2 }</span></span></code></pre></div><p>但是不能实现例如包装对象 <code>Number</code>、<code>String</code>、<code>Boolean</code>以及<code>Date</code>对象、<code>RegExp</code>对象的克隆：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#676E95;font-style:italic;">//Number 包装对象</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#BABED8;"> num</span><span style="color:#89DDFF;">=new</span><span style="color:#82AAFF;"> Number</span><span style="color:#BABED8;">(</span><span style="color:#F78C6C;">1</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span><span style="color:#89DDFF;"> typeof</span><span style="color:#BABED8;"> num </span><span style="color:#676E95;font-style:italic;">// &#39;object&#39;</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#BABED8;"> newNum</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">deepClone</span><span style="color:#BABED8;">(num)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//newNum -&gt; {} 空对象</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//String 包装对象</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#BABED8;"> str</span><span style="color:#89DDFF;">=new</span><span style="color:#82AAFF;"> String</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">hello</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span><span style="color:#89DDFF;"> typeof</span><span style="color:#BABED8;"> str </span><span style="color:#676E95;font-style:italic;">// &#39;object&#39;</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#BABED8;"> newStr</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">deepClone</span><span style="color:#BABED8;">(str)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//newStr-&gt; {0:&#39;h&#39;,1:&#39;e&#39;,2:&#39;l&#39;,3:&#39;l&#39;,4:&#39;o&#39;};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//Boolean 包装对象</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#BABED8;"> bol</span><span style="color:#89DDFF;">=new</span><span style="color:#82AAFF;"> Boolean</span><span style="color:#BABED8;">(</span><span style="color:#FF9CAC;">true</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span><span style="color:#89DDFF;"> typeof</span><span style="color:#BABED8;"> bol </span><span style="color:#676E95;font-style:italic;">// &#39;object&#39;</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#BABED8;"> newBol</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">deepClone</span><span style="color:#BABED8;">(bol)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// newBol -&gt;{} 空对象</span></span></code></pre></div><ul><li><p>valueOf() 函数</p><p>所有对象都有 <em>valueOf()</em> 方法， *valueOf()*方法对于：如果存在任意元市值， 它就默认将对象转换为标示它的原始值， 对象是符合值，而且大多数对象无法真正表示为一个原始值， 因此默认的 <em>valueOf()</em> 方法简单地返回对象本身， 而不是一个原始值。 数组、函数和正则表达式简单地继承了这个默认方法，调用这些类型的实例的 <em>valueOf()</em> 方法只是简单地返回这个对象本身</p><p>对原始值或者包装类</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#82AAFF;"> baseClone</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">base</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  return</span><span style="color:#BABED8;"> base</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">valueOf</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//Number</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#BABED8;"> num </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> new</span><span style="color:#82AAFF;"> Number</span><span style="color:#BABED8;">(</span><span style="color:#F78C6C;">1</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#BABED8;"> newNum </span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;"> baseClone</span><span style="color:#BABED8;">(num)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//newNum-&gt;1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//String</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#BABED8;"> str </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> new</span><span style="color:#82AAFF;"> String</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">hello</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#BABED8;"> newStr </span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;"> baseClone</span><span style="color:#BABED8;">(str)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// newStr-&gt;&quot;hello&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//Boolean</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#BABED8;"> bol </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> new</span><span style="color:#82AAFF;"> Boolean</span><span style="color:#BABED8;">(</span><span style="color:#FF9CAC;">true</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> </span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#BABED8;"> newBol </span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;"> baseClone</span><span style="color:#BABED8;">(bol)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//newBol-&gt; true</span></span></code></pre></div></li></ul><blockquote><p>其实对于包装类，完全可以用 = 号来进行克隆，其实没有深度克隆一说， 这里用 *valueOf()*实现， 语法上比较符合规范</p></blockquote><p>对于<code>Date</code> 类型， 因为 <em>valueOf()</em> 方法，日期定义的 *valueOf()*方法会返回它的一个内部表示： <em>1970年1月1日</em>以来的毫秒数，因此我们可以在 <code>Date</code> 的原型上定义克隆的方法：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#FFCB6B;">Date</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">clone</span><span style="color:#89DDFF;"> =</span><span style="color:#C792EA;"> function</span><span style="color:#89DDFF;"> ()</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  return</span><span style="color:#89DDFF;"> new</span><span style="color:#82AAFF;"> Date</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">valueOf</span><span style="color:#F07178;">())</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#BABED8;"> date</span><span style="color:#89DDFF;">=new</span><span style="color:#82AAFF;"> Date</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">2010</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> </span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#BABED8;"> newDate</span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;">date</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">clone</span><span style="color:#BABED8;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// newDate-&gt; Fri Jan 01 2010 08:00:00 GMT+0800</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 对于正则对象 RegExp：</span></span>
<span class="line"><span style="color:#FFCB6B;">RegExp</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">clone</span><span style="color:#89DDFF;"> =</span><span style="color:#C792EA;"> function</span><span style="color:#89DDFF;">()</span><span style="color:#89DDFF;"> {</span><span style="color:#F07178;"> </span></span>
<span class="line"><span style="color:#C792EA;">  var</span><span style="color:#BABED8;"> pattern</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> this.</span><span style="color:#82AAFF;">valueOf</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">  var</span><span style="color:#BABED8;"> flags</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> &#39;&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">  flags</span><span style="color:#89DDFF;"> +=</span><span style="color:#BABED8;"> pattern</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">global</span><span style="color:#89DDFF;"> ?</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">g</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;"> :</span><span style="color:#89DDFF;"> &#39;&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">  flags</span><span style="color:#89DDFF;"> +=</span><span style="color:#BABED8;"> pattern</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">ignoreCase</span><span style="color:#89DDFF;"> ?</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">i</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;"> :</span><span style="color:#89DDFF;"> &#39;&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">  flags</span><span style="color:#89DDFF;"> +=</span><span style="color:#BABED8;"> pattern</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">multiline</span><span style="color:#89DDFF;"> ?</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">m</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;"> :</span><span style="color:#89DDFF;">&#39;&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  return</span><span style="color:#89DDFF;"> new</span><span style="color:#82AAFF;"> RegExp</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">pattern</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">source</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> flags</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#BABED8;"> reg</span><span style="color:#89DDFF;">=new</span><span style="color:#82AAFF;">  RegExp</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/111/</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> </span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#BABED8;"> newReg</span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;">reg</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">clone</span><span style="color:#BABED8;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//newReg-&gt; /\\/111\\//</span></span></code></pre></div><h3 id="javascript-全排列" tabindex="-1">JavaScript 全排列 <a class="header-anchor" href="#javascript-全排列" aria-label="Permalink to &quot;JavaScript 全排列&quot;">​</a></h3><p>全排列是一种对给定字符串中的字符进行重新排列的操作，生成所有可能的排列组合。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#82AAFF;"> permutate</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">str</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;">  var</span><span style="color:#BABED8;"> result</span><span style="color:#89DDFF;"> =</span><span style="color:#F07178;"> []</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">str</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">length</span><span style="color:#89DDFF;"> &gt;</span><span style="color:#F78C6C;"> 1</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#C792EA;">    var</span><span style="color:#BABED8;"> left</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> str</span><span style="color:#F07178;">[</span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">                    // 取字符串的第一个字符作为左侧字符</span></span>
<span class="line"><span style="color:#C792EA;">    var</span><span style="color:#BABED8;"> rest</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> str</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">slice</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> str</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">length</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">  // 剩余部分作为右侧子串</span></span>
<span class="line"><span style="color:#C792EA;">    var</span><span style="color:#BABED8;"> preResult</span><span style="color:#89DDFF;"> =</span><span style="color:#82AAFF;"> permutate</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">rest</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">      // 对右侧子串进行全排列，递归调用 permutate 函数</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    for</span><span style="color:#F07178;"> (</span><span style="color:#C792EA;">var</span><span style="color:#BABED8;"> i</span><span style="color:#89DDFF;"> =</span><span style="color:#F78C6C;"> 0</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> i</span><span style="color:#89DDFF;"> &lt;</span><span style="color:#BABED8;"> preResult</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">length</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> i</span><span style="color:#89DDFF;">++</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">      for</span><span style="color:#F07178;"> (</span><span style="color:#C792EA;">var</span><span style="color:#BABED8;"> j</span><span style="color:#89DDFF;"> =</span><span style="color:#F78C6C;"> 0</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> j</span><span style="color:#89DDFF;"> &lt;</span><span style="color:#BABED8;"> preResult</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">i</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">length</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> j</span><span style="color:#89DDFF;">++</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">        // 在右侧子串的每个位置插入左侧字符，生成新的排列，并加入结果数组</span></span>
<span class="line"><span style="color:#C792EA;">        var</span><span style="color:#BABED8;"> tmp</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> preResult</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">i</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">slice</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> j</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">+</span><span style="color:#BABED8;"> left</span><span style="color:#89DDFF;"> +</span><span style="color:#BABED8;"> preResult</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">i</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">slice</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">j</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> preResult</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">i</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">length</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span></span>
<span class="line"><span style="color:#BABED8;">        result</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">tmp</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">      }</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span><span style="color:#89DDFF;font-style:italic;"> else</span><span style="color:#89DDFF;font-style:italic;"> if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">str</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">length</span><span style="color:#89DDFF;"> ==</span><span style="color:#F78C6C;"> 1</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 如果字符串长度为 1，直接返回包含该字符的数组</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    return</span><span style="color:#F07178;"> [</span><span style="color:#BABED8;">str</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#F07178;">  </span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  return</span><span style="color:#BABED8;"> result</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#BABED8;"> permutations </span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;"> permutate</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">abc</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(permutations)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 输出: [ &#39;abc&#39;, &#39;bac&#39;, &#39;bca&#39;, &#39;acb&#39;, &#39;cab&#39;, &#39;cba&#39; ]</span></span></code></pre></div><h3 id="跨域问题" tabindex="-1">跨域问题 <a class="header-anchor" href="#跨域问题" aria-label="Permalink to &quot;跨域问题&quot;">​</a></h3><h5 id="为什么会出现跨域" tabindex="-1">为什么会出现跨域 <a class="header-anchor" href="#为什么会出现跨域" aria-label="Permalink to &quot;为什么会出现跨域&quot;">​</a></h5><p>在前后端分离的模式下，前后端的域名是不一致的， 此时就会发生跨域访问问题。在请求过程中我们想要发送/接收数据一般都是 POST/GET 请求， 所以会有跨域问题出现</p><p>跨域问题来源于 JavaScript的同源策略， 即 协议 + 主机名 + 端口号 相同，则允许互相访问。 也就是说 JavaScript只能访问和操作自己域下的资源，不能访问和操作其它域下的资源</p><h5 id="同源策略" tabindex="-1">同源策略 <a class="header-anchor" href="#同源策略" aria-label="Permalink to &quot;同源策略&quot;">​</a></h5><p>是由 NetScape 提出的一个著名的安全策略。所谓的同源，指的是协议、域名、端口相同，浏览器处于安全方面考虑，只允许本域名下的借口交互， 不同元的客户端脚本， 在没有明确授权的情况下， 不能读写对方的资源。</p><h3 id="减少页面加载时间" tabindex="-1">减少页面加载时间 <a class="header-anchor" href="#减少页面加载时间" aria-label="Permalink to &quot;减少页面加载时间&quot;">​</a></h3><ol><li>优化压缩图片</li><li>图片格式的选择(GIF:提供颜色较少，可以用在一些对颜色要求不高的地方)</li><li>优化CSS(压缩合并 CSS， 如 margin-left, margin-top 合并成 margin)</li><li>网址后面加斜杠(如 <code>www.campr.com/目录</code>， 会判断这个目录是什么文件类型) CDN托管</li><li>标明高度与宽度(如果浏览器没有找到这两个参数， 它需要一遍下载图片一遍计算大小， 如果图片很多，浏览器会不断调整页面，这不但影响速度，也影响体验； 当浏览器知道了宽高，即使图片无法显示，页面上也会腾出图片的空位，然后继续加载后面的内容， 从而加载时间变快了，浏览器体验也变好了)</li><li>减少 HTTP 请求(合并文件 合并图片)</li></ol><h3 id="this-指向" tabindex="-1">this 指向 <a class="header-anchor" href="#this-指向" aria-label="Permalink to &quot;this 指向&quot;">​</a></h3><p>在JavaScript中， this通常指向的是我们正在执行的函数本身，或者是指向该函数所属的对象</p><p>全局this -&gt; 指向的是window</p><p>对象中的 this -&gt; 指向其本身</p><p>事件中的 this -&gt; 指向事件对象</p><h3 id="数组去重" tabindex="-1">数组去重 <a class="header-anchor" href="#数组去重" aria-label="Permalink to &quot;数组去重&quot;">​</a></h3><ol><li>使用<code>indexOf()</code>/<code>lastIndexOf()</code> 方法</li><li>ES6的 <code>Set</code>结构 <code>Array.form(new Set(arr))</code> 或者扩展运算符 <code>[...new Set(arr)]</code></li><li>使用 <code>sort()</code> 方法排序，然后与相邻的元素比较，不同则存入新数组</li><li><code>includes()</code>方法</li></ol><h3 id="深拷贝与浅拷贝" tabindex="-1">深拷贝与浅拷贝 <a class="header-anchor" href="#深拷贝与浅拷贝" aria-label="Permalink to &quot;深拷贝与浅拷贝&quot;">​</a></h3>`,59),E=p('<p>深拷贝：指针赋值，并且内容拷贝 <code>JSON.parse(JSON.stringify())</code>不仅适用于数组还适用于对象。不能拷贝<em>函数</em>，<em>undefined</em>，<em>symbol</em>。 浅拷贝：只是简单的指针赋值 数组，如果是数组，可以使用数组的一些方法实现：slice()，concat()返回一个新数组的特性实现拷贝。用扩展运算符 spread 实现数组</p><h3 id="for循环与map循环有什么区别" tabindex="-1">For循环与Map循环有什么区别 <a class="header-anchor" href="#for循环与map循环有什么区别" aria-label="Permalink to &quot;For循环与Map循环有什么区别&quot;">​</a></h3><ul><li>For循环 遍历对象自身和继承可枚举的属性，也就是说会包括那些在原型链上的属性</li><li>Map循环方法不会对空数组进行检测， map会返回一个新数组， 不会对原数组产生影响</li></ul><h3 id="类的继承" tabindex="-1">类的继承 <a class="header-anchor" href="#类的继承" aria-label="Permalink to &quot;类的继承&quot;">​</a></h3><p>创建类有三种方法：</p><ul><li>使用 function 和 this 关键字</li><li>原型方法 使用 prototype 和 this 关键字</li><li>使用 <code>object.create()</code> 方法创建</li></ul><p>继承有六种：</p><ol><li>原型继承</li><li>借用构造函数继承</li><li>组合继承</li><li>原型式继承</li><li>寄生式继承</li><li>寄生组合式继承</li></ol>',8),h=s("h3",{id:"同步与异步的区别-阻塞与非阻塞区别",tabindex:"-1"},[n("同步与异步的区别/阻塞与非阻塞区别 "),s("a",{class:"header-anchor",href:"#同步与异步的区别-阻塞与非阻塞区别","aria-label":'Permalink to "同步与异步的区别/阻塞与非阻塞区别"'},"​")],-1),u=s("p",null,"同步(阻塞的) 异步(非阻塞)",-1),b=s("p",null,"比如： 同步，咱两在一起上班，到吃饭时间了，我去喊你一起吃饭，你很忙，我就坐着等你忙完再一起去吃饭",-1),m=s("p",null,"异步，咱两在一起上班，到吃饭时间了，我去喊你一起吃饭，你很忙，我就先自己去吃了，你忙完了再去吃饭",-1),g=s("p",null,"同步（阻塞）异步（非阻塞）这两个关注的是程序在等待调用结果时的状态",-1),v=s("h3",{id:"重绘和回流",tabindex:"-1"},[n("重绘和回流 "),s("a",{class:"header-anchor",href:"#重绘和回流","aria-label":'Permalink to "重绘和回流"'},"​")],-1),C=p('<h3 id="http-https" tabindex="-1">HTTP HTTPS <a class="header-anchor" href="#http-https" aria-label="Permalink to &quot;HTTP HTTPS&quot;">​</a></h3><ul><li><p>HTTP</p><p>HTTP叫做超文本传输协议， 是互联网应用最广泛的一种网络协议</p><p>信息是明文传输</p><p>HTTP 基于 请求-响应 的模式</p><p>无状态保存 无链接</p></li><li><p>HTTPS</p><p>HTTPS是由 ssl+http 协议构建的可进行加密传输，身份认证的网络协议 具有安全性的<code>ssl</code>解密传输协议, 比 HTTP 安全</p><p>HTTP 和 HTTPS 的连接方式完全不同，端口也不同， HTTP是 <em>80</em> , HTTPS是 <em>443</em></p></li></ul><h3 id="如何对网站的文件和资源进行优化" tabindex="-1">如何对网站的文件和资源进行优化 <a class="header-anchor" href="#如何对网站的文件和资源进行优化" aria-label="Permalink to &quot;如何对网站的文件和资源进行优化&quot;">​</a></h3><ol><li>文件合并(目的是减少 http 请求)</li><li>文件压缩(目的是减少文件下载体积)</li><li>使用 CDN 托管资源</li><li>使用缓存</li><li>gizp 压缩网站的js和css文件</li><li><code>meta</code> 标签优化(title, description, keywords)、<code>heading</code> 标签的优化 <code>alt</code>优化</li><li>反向链接，网站外链优化</li></ol><h3 id="预加载与懒加载的区别" tabindex="-1">预加载与懒加载的区别 <a class="header-anchor" href="#预加载与懒加载的区别" aria-label="Permalink to &quot;预加载与懒加载的区别&quot;">​</a></h3><p>预加载是指在页面加载完成之前，提前讲所需资源下载，之后使用的时候从缓存中调用；</p><p>懒加载是延迟加载，按照一定的条件活着需求，等到满足条件的时候再加载对应资源</p><p>两者主要区别是一个提前加载， 一个迟缓甚至不加载， 懒加载对服务器前端有一定的缓解压力的作用，预加载则是会增加服务器前端的压力</p><h3 id="防抖与节流" tabindex="-1">防抖与节流 <a class="header-anchor" href="#防抖与节流" aria-label="Permalink to &quot;防抖与节流&quot;">​</a></h3>',9),f=s("h3",{id:"xss-与-csrf",tabindex:"-1"},[n("XSS 与 CSRF "),s("a",{class:"header-anchor",href:"#xss-与-csrf","aria-label":'Permalink to "XSS 与 CSRF"'},"​")],-1);function j(_,q,S,k,x,T){const a=o;return t(),c("div",null,[y,s("ul",null,[s("li",null,[l(a,{title:"前端数据类型",href:"../../native/javascript/前端数据类型"})])]),D,s("ul",null,[s("li",null,[l(a,{title:"ES6新特性",href:"../../native/javascript/ES6新特性一"})])]),F,s("ul",null,[s("li",null,[l(a,{title:"常用的数组的方法",href:"../../native/javascript/Array/常用的数组的方法"})])]),i,s("ul",null,[s("li",null,[l(a,{title:"原型与原型链",href:"../../native/javascript/原型与原型链"})])]),d,s("ul",null,[s("li",null,[l(a,{title:"call、bind、apply函数的恶区别",href:"../../native/javascript/call-apply-bind的区别"})])]),B,s("ul",null,[s("li",null,[n("具体可见 "),l(a,{title:"JS中的元素尺寸与布局信息",href:"../../native/javascript/JS中的元素尺寸与布局信息"})])]),A,s("ul",null,[s("li",null,[l(a,{title:"手写深拷贝",href:"../../native/javascript/浅拷贝与深拷贝"})])]),E,s("ul",null,[s("li",null,[l(a,{title:"类的继承",href:"../../native/javascript/类的继承"})])]),h,u,b,m,g,v,s("ul",null,[s("li",null,[l(a,{title:"重绘与回流",href:"../../native/javascript/回流与重绘"})])]),C,s("ul",null,[s("li",null,[l(a,{title:"防抖与节流",href:"../../native/javascript/防抖与节流"})])]),f,s("ul",null,[s("li",null,[l(a,{title:"XSS攻击与CSRF攻击",href:"../../native/javascript/XSS攻击与CSRF攻击"})])])])}const J=e(r,[["render",j]]);export{O as __pageData,J as default};
