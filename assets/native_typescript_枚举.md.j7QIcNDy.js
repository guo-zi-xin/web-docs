import{_ as l}from"./chunks/CustomLink.YXjObPrq.js";import{_ as p,o as e,c as t,k as s,a as n,I as c,R as a,aI as r,aJ as D}from"./chunks/framework.AonOEUEq.js";const f=JSON.parse('{"title":"枚举(Enums)","description":"","frontmatter":{},"headers":[],"relativePath":"native/typescript/枚举.md","filePath":"native/typescript/枚举.md","lastUpdated":1700734386000}'),y={name:"native/typescript/枚举.md"},F=a(`<h1 id="枚举-enums" tabindex="-1">枚举(Enums) <a class="header-anchor" href="#枚举-enums" aria-label="Permalink to &quot;枚举(Enums)&quot;">​</a></h1><p><strong>枚举是 TypeScript 中一种特殊的数据类型，允许我们为一组数值设定友好的名字。枚举的定义使用 <code>enum</code> 关键字</strong></p><ul><li><strong>枚举类型被用于取值被限定在一定范围内的取值， 例如 一周只有七天， 颜色限定在红绿蓝等</strong></li></ul><h3 id="基本用法" tabindex="-1">基本用法 <a class="header-anchor" href="#基本用法" aria-label="Permalink to &quot;基本用法&quot;">​</a></h3><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">  enum</span><span style="color:#FFCB6B;"> Direction</span><span style="color:#89DDFF;"> {</span><span style="color:#BABED8;">Up </span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;"> 1</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> Down</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> Left</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> Right</span><span style="color:#89DDFF;">,}</span></span></code></pre></div><p>在这个例子中，我们定义了一个名为 Direction 的枚举，它有四个成员：Up、Down、Left 和 Right。Up 的初始值为 1，其余成员的值会自动递增。</p><p>我们也可以不设置初始值， 则枚举的成员将以0开始依次递增</p><p>枚举值被赋予从0开始递增的数字，同时也可以通过枚举值来进行反向映射</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">  enum</span><span style="color:#FFCB6B;"> Direction</span><span style="color:#89DDFF;"> {</span><span style="color:#BABED8;"> Up</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> Down</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> Left</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;">Right </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#BABED8;">  conssole</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(Direction[</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Up</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">] </span><span style="color:#89DDFF;">===</span><span style="color:#F78C6C;"> 0</span><span style="color:#BABED8;">) </span><span style="color:#676E95;font-style:italic;">// true</span></span>
<span class="line"><span style="color:#BABED8;">  conssole</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(Direction[</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Down</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">] </span><span style="color:#89DDFF;">===</span><span style="color:#F78C6C;"> 1</span><span style="color:#BABED8;">) </span><span style="color:#676E95;font-style:italic;">// true</span></span>
<span class="line"><span style="color:#BABED8;">  conssole</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(Direction[</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Left</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">] </span><span style="color:#89DDFF;">===</span><span style="color:#F78C6C;"> 2</span><span style="color:#BABED8;">) </span><span style="color:#676E95;font-style:italic;">// true</span></span>
<span class="line"><span style="color:#BABED8;">  conssole</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(Direction[</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Right</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">] </span><span style="color:#89DDFF;">===</span><span style="color:#F78C6C;"> 3</span><span style="color:#BABED8;">) </span><span style="color:#676E95;font-style:italic;">// true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 反向映射</span></span>
<span class="line"><span style="color:#BABED8;">  conssole</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(Direction[</span><span style="color:#F78C6C;">0</span><span style="color:#BABED8;">] </span><span style="color:#89DDFF;">===</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">Up</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">) </span><span style="color:#676E95;font-style:italic;">// true</span></span>
<span class="line"><span style="color:#BABED8;">  conssole</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(Direction[</span><span style="color:#F78C6C;">1</span><span style="color:#BABED8;">] </span><span style="color:#89DDFF;">===</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">Down</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">) </span><span style="color:#676E95;font-style:italic;">// true</span></span>
<span class="line"><span style="color:#BABED8;">  conssole</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(Direction[</span><span style="color:#F78C6C;">2</span><span style="color:#BABED8;">] </span><span style="color:#89DDFF;">===</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">Left</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">) </span><span style="color:#676E95;font-style:italic;">// true</span></span>
<span class="line"><span style="color:#BABED8;">  conssole</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(Direction[</span><span style="color:#F78C6C;">3</span><span style="color:#BABED8;">] </span><span style="color:#89DDFF;">===</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">Right</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">) </span><span style="color:#676E95;font-style:italic;">// true</span></span></code></pre></div><p>实际上上述例子会被编译成下面这种格式</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">  var</span><span style="color:#BABED8;"> Direction</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">  (</span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;"> (</span><span style="color:#BABED8;font-style:italic;">Direction</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">      Direction</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">Direction</span><span style="color:#F07178;">[</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Up</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;"> 0</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">Up</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">      Direction</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">Direction</span><span style="color:#F07178;">[</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Down</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;"> 1</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">Down</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">      Direction</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">Direction</span><span style="color:#F07178;">[</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Left</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;"> 2</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">Left</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">      Direction</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">Direction</span><span style="color:#F07178;">[</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Right</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;"> 3</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">Right</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span><span style="color:#BABED8;">)(Direction </span><span style="color:#89DDFF;">||</span><span style="color:#BABED8;"> (Direction </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> {}</span><span style="color:#BABED8;">))</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h3 id="手动赋值" tabindex="-1">手动赋值 <a class="header-anchor" href="#手动赋值" aria-label="Permalink to &quot;手动赋值&quot;">​</a></h3><p>枚举是可以手动赋值的， 并且未手动赋值的枚举值会随着上一项的赋值递增</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">  enum</span><span style="color:#FFCB6B;"> Direction</span><span style="color:#89DDFF;"> {</span><span style="color:#BABED8;"> Up  </span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;"> 3</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> Down </span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;"> 2</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> Left</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;">Right </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#BABED8;">  conssole</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(Direction[</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Up</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">] </span><span style="color:#89DDFF;">===</span><span style="color:#F78C6C;"> 3</span><span style="color:#BABED8;">) </span><span style="color:#676E95;font-style:italic;">// true</span></span>
<span class="line"><span style="color:#BABED8;">  conssole</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(Direction[</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Down</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">] </span><span style="color:#89DDFF;">===</span><span style="color:#F78C6C;"> 2</span><span style="color:#BABED8;">) </span><span style="color:#676E95;font-style:italic;">// true</span></span>
<span class="line"><span style="color:#BABED8;">  conssole</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(Direction[</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Left</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">] </span><span style="color:#89DDFF;">===</span><span style="color:#F78C6C;"> 3</span><span style="color:#BABED8;">) </span><span style="color:#676E95;font-style:italic;">// true</span></span>
<span class="line"><span style="color:#BABED8;">  conssole</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(Direction[</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Right</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">] </span><span style="color:#89DDFF;">===</span><span style="color:#F78C6C;"> 4</span><span style="color:#BABED8;">) </span><span style="color:#676E95;font-style:italic;">// true</span></span></code></pre></div><p>上述示例中， 我们可以发现 如果枚举默认递增的值与手动赋值的值重复时， Typescript是注意不到这一点的， 编译结果是这样</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">  var</span><span style="color:#BABED8;"> Direction</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">  (</span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;"> (</span><span style="color:#BABED8;font-style:italic;">Direction</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">      Direction</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">Direction</span><span style="color:#F07178;">[</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Up</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;"> 3</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">Up</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">      Direction</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">Direction</span><span style="color:#F07178;">[</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Down</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;"> 2</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">Down</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">      Direction</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">Direction</span><span style="color:#F07178;">[</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Left</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;"> 3</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">Left</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">      Direction</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">Direction</span><span style="color:#F07178;">[</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Right</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;"> 4</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">Right</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span><span style="color:#BABED8;">)(Direction </span><span style="color:#89DDFF;">||</span><span style="color:#BABED8;"> (Direction </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> {}</span><span style="color:#BABED8;">))</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>从编译结果我们可以看出来 枚举值递增到<code>3</code>时与前面<code>Up</code>的值重复了， 导致<code>Direction[&quot;Up&quot;]</code>先是<code>3</code> 然后 <code>Direction[&quot;Left&quot;]</code>也是<code>3</code>，所以在赋值时， 最好不要出现这种情况， 以免发生不必要的错误</p><ul><li>手动赋值可以不是数字， 这个时候需要通过类型断言来跳过tsc的类型检查编译出来的js仍是可用的)</li></ul><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">  enum</span><span style="color:#FFCB6B;"> Direction</span><span style="color:#89DDFF;"> {</span><span style="color:#BABED8;"> Up</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> Down</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> Left</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;">Right </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> &lt;</span><span style="color:#FFCB6B;">string</span><span style="color:#BABED8;">&gt;</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">S</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;"> }</span></span></code></pre></div><p>编译结果</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">  var</span><span style="color:#BABED8;"> Direction</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">  (</span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;"> (</span><span style="color:#BABED8;font-style:italic;">Direction</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">      Direction</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">Direction</span><span style="color:#F07178;">[</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Up</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;"> 3</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">Up</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">      Direction</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">Direction</span><span style="color:#F07178;">[</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Down</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;"> 2</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">Down</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">      Direction</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">Direction</span><span style="color:#F07178;">[</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Left</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;"> 3</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">Left</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">      Direction</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">Direction</span><span style="color:#F07178;">[</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Right</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">S</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">Right</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span><span style="color:#BABED8;">)(Direction </span><span style="color:#89DDFF;">||</span><span style="color:#BABED8;"> (Direction </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> {}</span><span style="color:#BABED8;">))</span><span style="color:#89DDFF;">;</span></span></code></pre></div><blockquote><p>当然， 手动赋值也可以是<code>小数</code>或<code>负数</code>，但后续未赋值的枚举值的步长仍为<code>1</code>进行递增</p></blockquote><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">  enum</span><span style="color:#FFCB6B;"> Direction</span><span style="color:#89DDFF;"> {</span><span style="color:#BABED8;"> Up </span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;"> 66</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> Down </span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;"> 1.5</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> Left</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;">Right </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#BABED8;">  conssole</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(Direction[</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Up</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">] </span><span style="color:#89DDFF;">===</span><span style="color:#F78C6C;"> 6</span><span style="color:#BABED8;">) </span><span style="color:#676E95;font-style:italic;">// true</span></span>
<span class="line"><span style="color:#BABED8;">  conssole</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(Direction[</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Down</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">] </span><span style="color:#89DDFF;">===</span><span style="color:#F78C6C;"> 1.5</span><span style="color:#BABED8;">) </span><span style="color:#676E95;font-style:italic;">// true</span></span>
<span class="line"><span style="color:#BABED8;">  conssole</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(Direction[</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Left</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">] </span><span style="color:#89DDFF;">===</span><span style="color:#F78C6C;"> 2.5</span><span style="color:#BABED8;">) </span><span style="color:#676E95;font-style:italic;">// true</span></span>
<span class="line"><span style="color:#BABED8;">  conssole</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(Direction[</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Right</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">] </span><span style="color:#89DDFF;">===</span><span style="color:#F78C6C;"> 3.5</span><span style="color:#BABED8;">) </span><span style="color:#676E95;font-style:italic;">// true</span></span></code></pre></div><h3 id="常数项和计算所得项" tabindex="-1">常数项和计算所得项 <a class="header-anchor" href="#常数项和计算所得项" aria-label="Permalink to &quot;常数项和计算所得项&quot;">​</a></h3><p>枚举的项有两种类型<code>常数项</code>和<code>计算所得项</code>， 上述示例都是为常数项的枚举值， 我们也可以向枚举中添加计算的方式来设置<code>计算所得项</code>的枚举</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">  enum</span><span style="color:#FFCB6B;"> Color</span><span style="color:#89DDFF;"> {</span><span style="color:#BABED8;"> Red</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> Blue</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> Green </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">green</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">length </span><span style="color:#89DDFF;">}</span></span></code></pre></div><p>上述示例中，<code>&#39;green&#39;.length</code>就是一个计算所得项。</p><blockquote><p>⚠ 上面的例子不会报错，<strong>但是如果紧接在计算所得项后面的是未手动赋值的项，那么它就会因为无法获得初始值而报错</strong></p></blockquote><img src="`+r+'" alt="赋值项之后是未赋值的枚举项的报错">',29),i=a(`<p>当满足以下条件时，枚举成员被当作是常数：</p><ul><li>不具有初始化函数并且之前的枚举成员是常数。在这种情况下，当前枚举成员的值为上一个枚举成员的值加 1。但第一个枚举元素是个例外。如果它没有初始化方法，那么它的初始值为 0。</li><li>枚举成员使用常数枚举表达式初始化。常数枚举表达式是 TypeScript 表达式的子集，它可以在编译阶段求值。当一个表达式满足下面条件之一时，它就是一个常数枚举表达式： <ul><li>数字字面量</li><li>引用之前定义的常数枚举成员（可以是在不同的枚举类型中定义的）如果这个成员是在同一个枚举类型中定义的，可以使用非限定名来引用</li><li>带括号的常数枚举表达式</li><li><code>+</code>, <code>-</code>, <code>~</code> 一元运算符应用于常数枚举表达式</li><li><code>+</code>,<code>-</code>, <code>*</code>, <code>/</code>, <code>%</code>, <code>&lt;&lt;</code>, <code>&gt;&gt;</code>, <code>&gt;&gt;&gt;</code>, <code>&amp;</code>, <code>|</code>, <code>^</code> 二元运算符，常数枚举表达式做为其一个操作对象。若常数枚举表达式求值后为 NaN 或 Infinity，则会在编译阶段报错</li></ul></li></ul><p>所有其它情况的枚举成员被当作是需要计算得出的值。</p><h3 id="常数枚举" tabindex="-1">常数枚举 <a class="header-anchor" href="#常数枚举" aria-label="Permalink to &quot;常数枚举&quot;">​</a></h3><p>常数枚举是使用 const enum 定义的枚举类型</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">  const</span><span style="color:#C792EA;"> enum</span><span style="color:#FFCB6B;"> Directions</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">      Up</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">      Down</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">      Left</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">      Right</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">  let</span><span style="color:#BABED8;"> directions </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> [Directions</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">Up</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> Directions</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">Down</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> Directions</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">Left</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> Directions</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">Right]</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>常数枚举与普通枚举的区别是，它会在编译阶段被删除，并且不能包含计算成员。</p><p>上面例子编译结果是</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#BABED8;"> directions </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> [</span><span style="color:#F78C6C;">0</span><span style="color:#676E95;font-style:italic;"> /* Up */</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;"> 1</span><span style="color:#676E95;font-style:italic;"> /* Down */</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;"> 2</span><span style="color:#676E95;font-style:italic;"> /* Left */</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;"> 3</span><span style="color:#676E95;font-style:italic;"> /* Right */</span><span style="color:#BABED8;">]</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>假如包含了计算成员，则会在编译阶段报错：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#C792EA;"> enum</span><span style="color:#FFCB6B;"> Color</span><span style="color:#89DDFF;"> {</span><span style="color:#BABED8;">Red</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> Green</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> Blue </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">blue</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">length</span><span style="color:#89DDFF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// index.ts(1,38): error TS2474: In &#39;const&#39; enum declarations member initializer must be constant expression.</span></span></code></pre></div><img src="`+D+`" alt="赋值计算项编译报错"><div class="info custom-block"><p class="custom-block-title">常量枚举与枚举的区别</p><ul><li><p>声明差异</p><ul><li><strong>常量枚举</strong>通过<code>const enum</code>进行声明，<strong>枚举</strong>则通过<code>enum</code>来声明</li></ul></li><li><p>编译结果差异</p><ul><li><strong>常量枚举</strong>在编译时会被删除，并且不能包含计算成员。 <strong>枚举</strong>在编译时会生成真实的 JavaScript 对象，同时在运行时也会存在对应的对象实体</li></ul></li><li><p>使用场景差异</p><ul><li><strong>常量枚举</strong>比普通<strong>枚举</strong>有着更高的性能和更少的内存占用， 但由于其特性限制，<strong>常量枚举</strong>适用于一些特定的场景，如在需要大量枚举且不需要在运行时访问枚举对象的情况下使用。</li><li><strong>普通枚举</strong>则更灵活，可以包含计算成员和常量成员，适用于其他更加灵活的场景。</li></ul></li></ul></div><h3 id="外部枚举" tabindex="-1">外部枚举 <a class="header-anchor" href="#外部枚举" aria-label="Permalink to &quot;外部枚举&quot;">​</a></h3><p>外部枚举是使用 declare enum 定义的枚举类型：</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">declare</span><span style="color:#C792EA;"> enum</span><span style="color:#FFCB6B;"> Directions</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">    Up</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">    Down</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">    Left</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">    Right</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> directions </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> [Directions</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">Up</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> Directions</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">Down</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> Directions</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">Left</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> Directions</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">Right]</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>declare 定义的类型只会用于编译时的检查，编译结果中会被删除。</p><p>上面例子编译结果是</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#BABED8;"> directions </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> [Directions</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">Up</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> Directions</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">Down</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> Directions</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">Left</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> Directions</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">Right]</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>外部枚举与声明语句一样，常出现在声明文件中。</p><p>同时使用<code>declare</code>和<code>const</code>也是可以的</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">declare</span><span style="color:#C792EA;"> const</span><span style="color:#C792EA;"> enum</span><span style="color:#FFCB6B;"> Directions</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">    Up</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">    Down</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">    Left</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">    Right</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> directions </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> [Directions</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">Up</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> Directions</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">Down</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> Directions</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">Left</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> Directions</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">Right]</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>编译结果</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#BABED8;"> directions </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> [</span><span style="color:#F78C6C;">0</span><span style="color:#676E95;font-style:italic;"> /* Up */</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;"> 1</span><span style="color:#676E95;font-style:italic;"> /* Down */</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;"> 2</span><span style="color:#676E95;font-style:italic;"> /* Left */</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;"> 3</span><span style="color:#676E95;font-style:italic;"> /* Right */</span><span style="color:#BABED8;">]</span><span style="color:#89DDFF;">;</span></span></code></pre></div>`,24);function B(E,A,d,C,u,g){const o=l;return e(),t("div",null,[F,s("ul",null,[s("li",null,[n("常数项和计算所得项的完整定义，引用自"),c(o,{title:"中文手册 - 枚举",href:"https://www.typescriptlang.org/docs/handbook/enums.html"}),n("：")])]),i])}const v=p(y,[["render",B]]);export{f as __pageData,v as default};
