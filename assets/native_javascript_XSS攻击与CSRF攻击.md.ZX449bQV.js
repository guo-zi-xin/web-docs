import{_ as a}from"./chunks/CustomLink.YXjObPrq.js";import{_ as l,o as n,c as o,I as p,R as e}from"./chunks/framework.AonOEUEq.js";const u=JSON.parse('{"title":"XSS攻击与 CSRF攻击","description":"","frontmatter":{},"headers":[],"relativePath":"native/javascript/XSS攻击与CSRF攻击.md","filePath":"native/javascript/XSS攻击与CSRF攻击.md","lastUpdated":1703227363000}'),t={name:"native/javascript/XSS攻击与CSRF攻击.md"},r=e(`<h1 id="xss攻击与-csrf攻击" tabindex="-1">XSS攻击与 CSRF攻击 <a class="header-anchor" href="#xss攻击与-csrf攻击" aria-label="Permalink to &quot;XSS攻击与 CSRF攻击&quot;">​</a></h1><h3 id="xss攻击" tabindex="-1">XSS攻击 <a class="header-anchor" href="#xss攻击" aria-label="Permalink to &quot;XSS攻击&quot;">​</a></h3><p>Cross-site Scripting(<code>跨站脚本攻击</code>)简称 XSS，是一种代码注入攻击。攻击者通过在目标网站上注入恶意脚本，使其在用户的浏览器上运行，利用这些恶意脚本，攻击者可获取用户的敏感信息 如 <code>Cookie</code>、<code>SessionID</code>等，进而危害数据安全</p><h5 id="常见注入方法" tabindex="-1">常见注入方法 <a class="header-anchor" href="#常见注入方法" aria-label="Permalink to &quot;常见注入方法&quot;">​</a></h5><ul><li>在 HTML 中内嵌的文本中，恶意内容以 Script 标签形成注入</li><li>在内联的 JavaScript 中， 拼接的数据突破了原本的限制(字符串、变量、方法名等)</li><li>在标签属性中，恶意内容包含引号，从而突破属性值的限制，注入其他属性或者标签</li><li>在标签的 href、src 等属性中，包含 JavaScript(伪协议)等可执行代码</li><li>在 style 属性和标签中， 包含类似 <code>background-image:url(&quot;javascript...&quot;)</code>的代码 (新版浏览器已经可以防范)</li><li>在 style 属性和标签中，包含类似 expression（...）的CSS表达式代码(新版浏览器已经可以防范)</li></ul><h5 id="xss-攻击分类" tabindex="-1">XSS 攻击分类 <a class="header-anchor" href="#xss-攻击分类" aria-label="Permalink to &quot;XSS 攻击分类&quot;">​</a></h5><p>根据攻击的来源， XSS攻击可以分为存储行，反射型和DOM型三种</p><ol><li>存储型: 即攻击被存储到服务到，常见的是在评论区插入攻击脚本，如果脚本被储存到服务端， 那么所有看见对应评论的用户都会受到攻击</li><li>反射型: 攻击者将脚本混在URL里， 服务端接收到URL将恶意代码当作参数取出并拼接在HTML里返回，浏览器解析此HTML后执行恶意代码</li><li>DOM型: 将攻击脚本写在URL中， 诱导用户点击该URL，如果URL被解析，那么攻击脚本就会被运行</li></ol><blockquote><p>反射型XSS根存储型XSS的区别: <strong>存储型XSS的恶意代码存放在数据库里，反射型XSS的恶意代码存在URL里</strong></p><p>DOM型XSS跟前两种XSS攻击的区别: <strong>DOM型XSS攻击中，取出和执行恶意代码由浏览器端完成，属于前端JavaScript自身的安全漏洞，其他两种XSS都属于服务端的安全漏洞</strong></p></blockquote><h5 id="防范方法" tabindex="-1">防范方法 <a class="header-anchor" href="#防范方法" aria-label="Permalink to &quot;防范方法&quot;">​</a></h5><ul><li>HttpOnly: 在cookie中设置httponly属性之后，js脚本将无法获取到cookie信息</li><li>输入过滤: 一般是用于对于输入格式的检查， 例如: 邮箱、电话号码、用户名、密码等等，按照规定的格式输入，后端也需要做相同的过滤检查，因为攻击者完全可以绕过正常输入流程，直接利用借口向服务器发送设置</li><li>转义HTML: 如果拼接 HTML 是必要的，就需要对引号、尖括号，斜杠进行转移，但这还不是很完善。想对HTML模版各处插入点进行充分的转移，就需要采用合适的转义库</li></ul><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#82AAFF;"> escape</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">str</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">  str</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> str</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">replace</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">&amp;</span><span style="color:#89DDFF;">/</span><span style="color:#F78C6C;">g</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">&amp;amp;</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#BABED8;">  str</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> str</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">replace</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">&lt;</span><span style="color:#89DDFF;">/</span><span style="color:#F78C6C;">g</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">&amp;lt;</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#BABED8;">  str</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> str</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">replace</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">&gt;</span><span style="color:#89DDFF;">/</span><span style="color:#F78C6C;">g</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">&amp;gt;</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#BABED8;">  str</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> str</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">replace</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">&quot;</span><span style="color:#89DDFF;">/</span><span style="color:#F78C6C;">g</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">&amp;quto;</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#BABED8;">  str</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> str</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">replace</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">&#39;</span><span style="color:#89DDFF;">/</span><span style="color:#F78C6C;">g</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">&amp;#39;</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#BABED8;">  str</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> str</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">replace</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">\`</span><span style="color:#89DDFF;">/</span><span style="color:#F78C6C;">g</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">&amp;#96;</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#BABED8;">  str</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> str</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">replace</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">/</span><span style="color:#BABED8;">\\/</span><span style="color:#89DDFF;">/</span><span style="color:#F78C6C;">g</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">&amp;#x2F;</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  return</span><span style="color:#BABED8;"> str</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><ul><li>白名单过滤: 对于现实富文本来说，不能通过上面的办法来转义所有字符，因为这样也会把需要的格式也转义掉。这种情况推荐使用白名单过滤的方法</li></ul><h3 id="csrf攻击" tabindex="-1">CSRF攻击 <a class="header-anchor" href="#csrf攻击" aria-label="Permalink to &quot;CSRF攻击&quot;">​</a></h3><p>Cross-site request forgery (<code>跨站请求伪造</code>),也被称为one-click attack 或者 session riding， 通常缩写为 CSRF 或者 XSRF， 是一种挟制用户在当前已经登陆的web应用程序上执行非本意 的操作的攻击方法。例如: 攻击者诱导受害者进入第三方网站，在第三方网站中，向被攻击者发送跨站请求。利用受害者在被攻击网站已经获取的注册凭证，绕过后台的用户验证，达到冒充用户对被攻击网站执行 某种操作的目的。</p><h5 id="防御方法" tabindex="-1">防御方法 <a class="header-anchor" href="#防御方法" aria-label="Permalink to &quot;防御方法&quot;">​</a></h5><ul><li>验证码: 强制用户必须与应用进行交互，才能最终完成请求。此种方式能很好的遏制CSRF，但用户体验较差</li><li>Refer Check: 请求来源限制，此方法成本最低，但是并不能保证100%有效。因为服务器并不是什么时候都能取到 Referer，而且低版本浏览器存在伪造 Referer的风险</li><li>Token: Token验证CSRF防御机制是公认的最适合的方案，若网站同时存在XSS漏洞时候， Token也是空谈</li></ul><h3 id="xss-和-csrf-的区别" tabindex="-1">XSS 和 CSRF 的区别 <a class="header-anchor" href="#xss-和-csrf-的区别" aria-label="Permalink to &quot;XSS 和 CSRF 的区别&quot;">​</a></h3><ul><li>通常来讲CSRF是由XSS实现的，CSRF时常也被成为XSRF(CSRF实现的方式还可以是直接通过命令行发起请求等)</li><li>本质上讲，XSS是代码注入问题，CSRF是HTTP问题，XSS是内容没有过滤导致浏览器将攻击者的输入当代码执行</li><li>CSRF则是因为浏览器在发送HTTP请求时候自动带上 cookie，而一般网站的 session 都保存在 cookie里 (token验证可以避免)</li></ul><h2 id="来源" tabindex="-1">来源 <a class="header-anchor" href="#来源" aria-label="Permalink to &quot;来源&quot;">​</a></h2>`,20);function c(F,D,i,y,S,d){const s=a;return n(),o("div",null,[r,p(s,{title:"XSS攻击和CSRF攻击",href:"https://juejin.cn/post/6945716641464320008"})])}const A=l(t,[["render",c]]);export{u as __pageData,A as default};
