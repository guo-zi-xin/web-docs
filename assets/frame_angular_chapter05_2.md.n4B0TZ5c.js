import{_ as o}from"./chunks/CustomLink.HhFLulSs.js";import{_ as l,o as s,c as r,m as t,a as e,J as p,a8 as d}from"./chunks/framework.QttzOlP4.js";const n="/web-docs/assets/0503.54ouEqd7.png",c="/web-docs/assets/0504.Un-c6rdK.png",H=JSON.parse('{"title":"Directive的命名和使用规则","description":"","frontmatter":{},"headers":[],"relativePath":"frame/angular/chapter05_2.md","filePath":"frame/angular/chapter05_2.md","lastUpdated":1704710069000}'),i={name:"frame/angular/chapter05_2.md"},h=d('<h1 id="directive的命名和使用规则" tabindex="-1">Directive的命名和使用规则 <a class="header-anchor" href="#directive的命名和使用规则" aria-label="Permalink to &quot;Directive的命名和使用规则&quot;">​</a></h1><p>在前一节中，我们创建了一个名为&quot;people&quot;的Directive。并且通过 <code>&lt;people&gt; &lt;/people&gt;</code> 使用了它。</p><p>但是，在实际应用场景中，我们的命名通常不止1个单词，这时候我们就需要注意Directive的命名和使用规则。</p><p>对Directive的命名，AngularJS是有特殊的规则需求的。并且，在JavaScript中的命名，与在HTML对应使用时的名称<strong>不一样</strong>！</p><h2 id="命名规则" tabindex="-1">命名规则 <a class="header-anchor" href="#命名规则" aria-label="Permalink to &quot;命名规则&quot;">​</a></h2><p>AngularJS要求Directive的命名使用<strong>驼峰式</strong>语法，也就是从第二个单词开始，每个单词的首字母大写，并且不使用连接符号。</p><p>驼峰式命名的例子：</p><ul><li><code>people</code></li><li><code>peopleList</code></li><li><code>peopleListArray</code></li></ul><h2 id="使用规则" tabindex="-1">使用规则 <a class="header-anchor" href="#使用规则" aria-label="Permalink to &quot;使用规则&quot;">​</a></h2><p>在HTML代码中，使用的是连接符的形式，下面我们对比看看命名和使用的对应字符串：</p><table><thead><tr><th>命名</th><th>使用</th></tr></thead><tbody><tr><td><code>people</code></td><td><code>people</code></td></tr><tr><td><code>peopleList</code></td><td><code>people-list</code></td></tr><tr><td><code>peopleListArray</code></td><td><code>people-list-array</code></td></tr></tbody></table><p>实际使用举例</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">people-list</span><span style="color:#89DDFF;">&gt;</span><span style="color:#89DDFF;"> &lt;/</span><span style="color:#F07178;">people-list</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#C792EA;"> people-list-array</span><span style="color:#89DDFF;">&gt;</span><span style="color:#89DDFF;"> &lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><h2 id="为什么会有这种差异" tabindex="-1">为什么会有这种差异 <a class="header-anchor" href="#为什么会有这种差异" aria-label="Permalink to &quot;为什么会有这种差异&quot;">​</a></h2><p>命名和用法不同的核心原因，是<strong>因为HTML对大小写不敏感，而JavaScript对大小写敏感</strong>。</p><p>为了保证HTML和JavaScript都能按原有模式正常工作，AngularJS提出了这套解决方法。</p><h2 id="怎么实现的" tabindex="-1">怎么实现的？ <a class="header-anchor" href="#怎么实现的" aria-label="Permalink to &quot;怎么实现的？&quot;">​</a></h2><p>AngularJS在解析HTML时，会将名称取出（如<code>people-list-array</code>)，并进行一下两个方面的处理：</p><ol><li>去除字段的 x- 或 data- 头。(<code>people-list-array</code>)</li><li>将字段中的连接符号去除，并将第二个单词开始改为首字母大写，其他字母小写。(<code>[people,List,Array]</code>)</li><li>然后合并起来。（<code>peopleListArray</code>)</li></ol><h3 id="连接符" tabindex="-1">连接符 <a class="header-anchor" href="#连接符" aria-label="Permalink to &quot;连接符&quot;">​</a></h3><p>在前面的讲解中，我们讲解示例时，使用的连接符全部都为减号。但实际上，AngularJS支持的连接符有:</p><table><thead><tr><th>符号</th><th>示例</th></tr></thead><tbody><tr><td>减号( - )</td><td><code>people-list</code></td></tr><tr><td>冒号( : )</td><td><code>people:list</code></td></tr><tr><td>下划线( _ )</td><td><code>people_list</code></td></tr></tbody></table><p>但是实际使用中，推荐使用<strong>减号</strong>作为连接符。其他的两种符号，只是因为历史原因提供了支持，但是并不推荐使用。</p><h3 id="为什么要先去除data-x-部分" tabindex="-1">为什么要先去除<code>data-/x-</code>部分 <a class="header-anchor" href="#为什么要先去除data-x-部分" aria-label="Permalink to &quot;为什么要先去除`data-/x-`部分&quot;">​</a></h3>',24),_=t("code",null,"data-/x-",-1),u=t("img",{src:n,alt:"图5-3 HTML5验证结果，无data前缀"},null,-1),g=t("p",null,"而如果我们在ng-app和ng-controller前加上data-前缀，则可以通过HTML5的验证。",-1),m=t("img",{src:c,alt:"图5-4 HTML5验证结果，有data前缀"},null,-1),y=t("p",null,"所以，如果你的项目需要使用HTML5的验证工具，那么就需要在字段前加上data-前缀。",-1),b=t("p",null,"另：x-的存在，可能是针对XHTML的支持。",-1),D=t("p",null,[t("strong",null,"注意："),e("，因为有这个条件存在，因此，请不要给你的Directive起data开头的名字！")],-1);function v(f,F,x,L,T,q){const a=o;return s(),r("div",null,[h,t("p",null,[_,e(" 存在的原因是需要符合HTML5标准。如果你使用"),p(a,{title:"HTML5验证器",href:"https://validator.w3.org/nu/#textarea"}),e("来验证我们之前的代码，你可能会看到如下结果(黄色背景部分代表不符合标准)：")]),u,g,m,y,b,D])}const M=l(i,[["render",v]]);export{H as __pageData,M as default};
