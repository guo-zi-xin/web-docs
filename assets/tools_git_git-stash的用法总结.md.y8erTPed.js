import{_ as s,o as t,c as a,a8 as o,b8 as e}from"./chunks/framework.Qf1t7Yq5.js";const m=JSON.parse('{"title":"git stash","description":"","frontmatter":{},"headers":[],"relativePath":"tools/git/git-stash的用法总结.md","filePath":"tools/git/git-stash的用法总结.md","lastUpdated":1701688734000}'),h={name:"tools/git/git-stash的用法总结.md"},i=o('<h1 id="git-stash" tabindex="-1">git stash <a class="header-anchor" href="#git-stash" aria-label="Permalink to &quot;git stash&quot;">​</a></h1><blockquote><p><strong><code>git stash</code> 命令的作用是将更改存储在一个临时区域中，使得该工作目录变成一个干净的工作状态， 从而可以去执行其他操作</strong></p></blockquote><h3 id="git-stash-常用使用场景" tabindex="-1"><code>git stash</code> 常用使用场景 <a class="header-anchor" href="#git-stash-常用使用场景" aria-label="Permalink to &quot;`git stash` 常用使用场景&quot;">​</a></h3><ul><li>正在进行一些工作，但需要在不更改当前分支或提交任何更改的情况下切换到另一个分支或者进行其他操作。</li><li>想要推送某个分支但又不想包含当前所有的更改，而只想把某些更改推送到远程仓库</li><li>想要在多个分支之间进行代码重构或实验性开发时，但又不想创建新的分支来存储每个实验性更改，可以使用 <code>git stash</code> 保存当前的更改，然后在不同的分支之间应用更改。</li></ul><h3 id="常用的-git-stash命令" tabindex="-1">常用的 <code>git stash</code>命令 <a class="header-anchor" href="#常用的-git-stash命令" aria-label="Permalink to &quot;常用的 `git stash`命令&quot;">​</a></h3><h4 id="_1-git-stash" tabindex="-1">1. <code>git stash</code> <a class="header-anchor" href="#_1-git-stash" aria-label="Permalink to &quot;1. `git stash`&quot;">​</a></h4><p>直接保存其实是执行了命令 <code>git stash save &quot;保存时的描述&quot;</code>命令 只是要保存的描述为空。 执行存储时，添加备注，方便查找，只有 <code>git stash</code> 也要可以的，但查找时不方便识别。</p><h4 id="_2-git-stash-list" tabindex="-1">2. <code>git stash list</code> <a class="header-anchor" href="#_2-git-stash-list" aria-label="Permalink to &quot;2. `git stash list`&quot;">​</a></h4><p><code>git stash list</code> 用于查看执行stash操作的存储列表, 列表格式类似于下面这种格式：</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#C3E88D;"> git</span><span style="color:#C3E88D;"> stash</span><span style="color:#C3E88D;"> list</span></span>\n<span class="line"><span style="color:#FFCB6B;">stash@</span><span style="color:#BABED8;">{0}</span><span style="color:#82AAFF;">:</span><span style="color:#C3E88D;"> WIP</span><span style="color:#C3E88D;"> on</span><span style="color:#C3E88D;"> master:</span><span style="color:#C3E88D;"> e695606</span><span style="color:#C3E88D;"> which</span><span style="color:#C3E88D;"> version</span><span style="color:#C3E88D;"> checked</span><span style="color:#C3E88D;"> in?</span></span></code></pre></div><h4 id="_3-git-stash-show" tabindex="-1">3. <code>git stash show</code> <a class="header-anchor" href="#_3-git-stash-show" aria-label="Permalink to &quot;3. `git stash show`&quot;">​</a></h4><p>显示做了哪些改动，默认show第一个存储,如果要显示其他存贮，后面加 <code>stash@{$num}</code>，比如查看第二个stash详情： <code>git stash show stash@{1}</code></p><h4 id="_4-git-stash-show-p" tabindex="-1">4. <code>git stash show -p</code> <a class="header-anchor" href="#_4-git-stash-show-p" aria-label="Permalink to &quot;4. `git stash show -p`&quot;">​</a></h4><p>显示第一个存储的改动，如果想显示其他存存储，命令：<code>git stash show stash@{$num} -p</code> ，比如第二个：<code>git stash show stash@{1} -p</code></p><h4 id="_5-git-stash-apply" tabindex="-1">5.<code>git stash apply</code> <a class="header-anchor" href="#_5-git-stash-apply" aria-label="Permalink to &quot;5.`git stash apply`&quot;">​</a></h4><p>应用某个存储,但不会把存储从存储列表中删除，默认使用第一个存储,即 <code>stash@{0}</code>，如果要使用其他个，<code>git stash apply stash@{$num}</code>， 比如第二个：<code>git stash apply stash@{1}</code></p><h4 id="_6-git-stash-pop" tabindex="-1">6. <code>git stash pop</code> <a class="header-anchor" href="#_6-git-stash-pop" aria-label="Permalink to &quot;6. `git stash pop`&quot;">​</a></h4><p>命令恢复之前缓存的工作目录，将缓存堆栈中的对应 <code>stash</code>删除，并将对应修改应用到当前的工作目录下,默认为第一个 <code>stash</code>,即 <code>stash@{0}</code>，如果要应用并删除其他 <code>stash</code>，命令：<code>git stash pop stash@{$num}</code> ，比如应用并删除第二个：<code>git stash pop stash@{1}</code></p><h4 id="_7-git-stash-drop-stash-num" tabindex="-1">7. <code>git stash drop stash@{$num}</code> <a class="header-anchor" href="#_7-git-stash-drop-stash-num" aria-label="Permalink to &quot;7. `git stash drop  stash@{$num}`&quot;">​</a></h4><p>丢弃stash@{$num}存储，从列表中删除这个存储</p><h4 id="_8-git-stash-clear" tabindex="-1">8. <code>git stash clear</code> <a class="header-anchor" href="#_8-git-stash-clear" aria-label="Permalink to &quot;8. `git stash clear`&quot;">​</a></h4><p>删除所有缓存的stash</p><blockquote><p>注意：说明:新增的文件，直接执行stash是不会被存储的</p><p>&lt;img src=&quot;/image/git-stash-1.jpg &quot;git stash 不保存新文件&quot;&quot; alt=&quot;git stash 不保存新建文件&quot; /&gt;</p></blockquote><p>这个文件还在，说明没有被存起来。说白了就是没有在git 版本控制中的文件，是不能被 <code>git stash</code>存起来的。</p><p>那要怎么办呢，这个文件我也想存起来，很明显，先执行下 <code>git add</code> 加到git版本控制中，然后再 <code>git stash</code>就可以了，如下：</p><img src="'+e+'" alt="1684753035449">',26),c=[i];function l(d,p,n,r,g,u){return t(),a("div",null,c)}const q=s(h,[["render",l]]);export{m as __pageData,q as default};
