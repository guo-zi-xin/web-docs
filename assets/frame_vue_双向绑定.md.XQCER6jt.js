import{_ as a}from"./chunks/CustomLink.YSvj3KpE.js";import{_ as n,o as l,c as p,J as o,a8 as e,aj as t,ak as c,al as r,am as F}from"./chunks/framework.Qf1t7Yq5.js";const v=JSON.parse('{"title":"Vue 双向绑定原理","description":"","frontmatter":{},"headers":[],"relativePath":"frame/vue/双向绑定.md","filePath":"frame/vue/双向绑定.md","lastUpdated":1703853091000}'),D={name:"frame/vue/双向绑定.md"},y=e('<h1 id="vue-双向绑定原理" tabindex="-1">Vue 双向绑定原理 <a class="header-anchor" href="#vue-双向绑定原理" aria-label="Permalink to &quot;Vue 双向绑定原理&quot;">​</a></h1><h3 id="单向绑定" tabindex="-1">单向绑定 <a class="header-anchor" href="#单向绑定" aria-label="Permalink to &quot;单向绑定&quot;">​</a></h3><p>单向绑定非常简单， 就是把 <code>Model</code>绑定到<code>View</code>, 当我们用<code>JavaScript</code> 代码更新<code>Model</code>时， <code>View</code>就会自动更新，但改变 <code>View</code> 时候,不会影响到<code>Model</code></p><h3 id="双向绑定" tabindex="-1">双向绑定 <a class="header-anchor" href="#双向绑定" aria-label="Permalink to &quot;双向绑定&quot;">​</a></h3><p>双向绑定就是在单向绑定的基础上， 通过修改视图<code>View</code>, <code>Model</code>也会更新, 例如在用户填写表单时， <code>View</code>的状态被更新， 如果此时可以自动更新<code>Model</code>的状态，那么就相当于我们把 <code>Model</code>和 <code>View</code>做了双向绑定，关系如图：</p><img src="'+t+'" alt="双向绑定关系"><h4 id="双向绑定原理" tabindex="-1">双向绑定原理 <a class="header-anchor" href="#双向绑定原理" aria-label="Permalink to &quot;双向绑定原理&quot;">​</a></h4><p>双向数据绑定由三部分组成</p><ul><li>数据层(Model): 应用的数据以及业务逻辑</li><li>视图层(View): 应用的展示效果，各类UI组件</li><li>业务逻辑层(ViewModel): 框架封装的核心，他负责将数据与视图关联起来</li></ul><p>核心是通过业务逻辑层(ViewModel)来进行关联数据与视图</p><h5 id="viewmodel" tabindex="-1">ViewModel <a class="header-anchor" href="#viewmodel" aria-label="Permalink to &quot;ViewModel&quot;">​</a></h5><p>ViewModel的主要职责：</p><ul><li>数据变化后更新视图</li><li>视图变化后更新数据</li></ul><p>还有两个主要部分组成</p><ul><li>监听器(Observer): 对所有数据的属性进行监听</li><li>解析器(Compiler): 对每个元素节点的指令进行扫描跟解析，根据指令模版替换数据，以及绑定相应的更新函数</li></ul><h4 id="实现" tabindex="-1">实现 <a class="header-anchor" href="#实现" aria-label="Permalink to &quot;实现&quot;">​</a></h4><p>以 Vue 为例，先看看双向绑定的流程：</p><ol><li><code>new Vue()</code> 首先执行初始化，对data执行响应化处理，这个过程发生在监听器<code>Observer</code>中</li><li>同时对模版执行编译，找到其中动态绑定的数据，从 data 中获取数据并初始化视图，这个过程发生在解析器<code>Compile</code>中</li><li>同时定义一个更新函数<code>Watcher</code>， 将来对应数据变化<code>Watcher</code>会更新函数</li><li>由于 data 的某个 key 在一个视图中可能出现多次，所以每个 key 都需要一个管家 <code>Dep</code> 来管理多个 <code>Watcher</code></li><li>将来 data 中数据一旦发生变化， 会首先找到对应的 <code>Dep</code>, 通知所有<code>Watcher</code>执行更新函数</li></ol><img src="'+c+`" alt="双向绑定原理"><h4 id="代码实现" tabindex="-1">代码实现 <a class="header-anchor" href="#代码实现" aria-label="Permalink to &quot;代码实现&quot;">​</a></h4><p>先来一个构造函数，执行初始化，对 data 执行响应化处理</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">class</span><span style="color:#FFCB6B;"> Vue</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;">  constructor</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">options</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;">    this.</span><span style="color:#BABED8;">$options</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> options</span></span>
<span class="line"><span style="color:#89DDFF;">    this.</span><span style="color:#BABED8;">$data</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> options</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">data</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 对 data 选项做响应式处理</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">    observe</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this.</span><span style="color:#BABED8;">$data</span><span style="color:#F07178;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 代理 data 到 vm 上</span></span>
<span class="line"><span style="color:#82AAFF;">    proxy</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this</span><span style="color:#F07178;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 执行编译</span></span>
<span class="line"><span style="color:#89DDFF;">    new</span><span style="color:#82AAFF;"> Compile</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">options</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">el</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> this</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>对 data 选项执行响应具体化操作</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#82AAFF;"> observe</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">obj</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">typeof</span><span style="color:#BABED8;"> obj</span><span style="color:#89DDFF;"> !==</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">object</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;"> ||</span><span style="color:#BABED8;"> obj</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> null</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    return</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">  new</span><span style="color:#82AAFF;"> Observer</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">obj</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#FFCB6B;"> Observer</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;">  constructor</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">value</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;">    this.</span><span style="color:#BABED8;">value</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> value</span></span>
<span class="line"><span style="color:#89DDFF;">    this.</span><span style="color:#82AAFF;">walk</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">value</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  walk</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">obj</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">    Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">keys</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">obj</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">forEach</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">key</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#82AAFF;">      defineReactive</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">obj</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> key</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> obj</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">key</span><span style="color:#F07178;">])</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h5 id="编译-compile" tabindex="-1">编译 Compile <a class="header-anchor" href="#编译-compile" aria-label="Permalink to &quot;编译 Compile&quot;">​</a></h5><p>对每个元素节点的指令进行扫描跟解析，根据指令模版替换数据，以及绑定相应的更新函数</p><img src="`+r+`" alt="COmpile结构"><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">class</span><span style="color:#FFCB6B;"> Compile</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;">  constructor</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">el</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> vm</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;">    this.</span><span style="color:#BABED8;">$vm</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> vm</span></span>
<span class="line"><span style="color:#89DDFF;">    this.</span><span style="color:#BABED8;">$el</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">querySelector</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">el</span><span style="color:#F07178;">) </span><span style="color:#676E95;font-style:italic;">// 获取DOM</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">this.</span><span style="color:#BABED8;">$el</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">      this.</span><span style="color:#82AAFF;">compile</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this.</span><span style="color:#BABED8;">$el</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  compile</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">el</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;">    const</span><span style="color:#BABED8;"> childNodes</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> el</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">childNodes</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 遍历子元素</span></span>
<span class="line"><span style="color:#BABED8;">    Array</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">from</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">childNodes</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">forEach</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">node</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">      // 判断是否为节点</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">      if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">isElement</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">node</span><span style="color:#F07178;">)) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">        console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">编译元素</span><span style="color:#89DDFF;">\${</span><span style="color:#BABED8;">node</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">nodeName</span><span style="color:#89DDFF;">}\`</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">      }</span><span style="color:#89DDFF;font-style:italic;"> else</span><span style="color:#89DDFF;font-style:italic;"> if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">isInterpolation</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">node</span><span style="color:#F07178;">)) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">        // 判断是否为插值文本</span></span>
<span class="line"><span style="color:#BABED8;">        console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">编译插值文本</span><span style="color:#89DDFF;">\${</span><span style="color:#BABED8;">node</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">textCOntent</span><span style="color:#89DDFF;">}\`</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">      }</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">      // 判断是否有子元素</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">      if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">node</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">childNodes</span><span style="color:#89DDFF;"> &amp;&amp;</span><span style="color:#BABED8;"> node</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">childNodes</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">length</span><span style="color:#89DDFF;"> &gt;</span><span style="color:#F78C6C;"> 0</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">        // 对元素进行递归遍历</span></span>
<span class="line"><span style="color:#89DDFF;">        this.</span><span style="color:#82AAFF;">compile</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">node</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">      }</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#F07178;">  isElement</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">node</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    return</span><span style="color:#BABED8;"> node</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">nodeType</span><span style="color:#89DDFF;"> ===</span><span style="color:#F78C6C;"> 1</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#F07178;">  isInterpolation</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">node</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    return</span><span style="color:#BABED8;"> node</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">nodeType</span><span style="color:#89DDFF;"> ===</span><span style="color:#F78C6C;"> 3</span><span style="color:#89DDFF;"> &amp;&amp;</span><span style="color:#89DDFF;"> /</span><span style="color:#BABED8;">\\{\\{</span><span style="color:#89DDFF;">(</span><span style="color:#C3E88D;">.</span><span style="color:#89DDFF;">*)</span><span style="color:#BABED8;">\\}\\}</span><span style="color:#89DDFF;">/</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">test</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">node</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">textContent</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h5 id="依赖收集" tabindex="-1">依赖收集 <a class="header-anchor" href="#依赖收集" aria-label="Permalink to &quot;依赖收集&quot;">​</a></h5><p>视图中会用到 data 中某 key 这称为依赖，同一个 key 可能会出现多次，每次都需要收集出来用一个 <code>Watcher</code>来维护它们， 此过程称为依赖收集 多个<code>Watcher</code>需要一个 <code>Dep</code> 来管理，需要更新时由<code>Dep</code> 统一通知</p><img src="`+F+`" alt="依赖收集"><p><strong>实现思路</strong></p><ol><li><code>defineReactive</code>时为每一个<code>key</code>创建一个<code>Dep</code>实例</li><li>初始化视图时读取某个<code>key</code>, 例如<code>name1</code>, 创建一个 <code>watcher1</code></li><li>由于触发<code>name1</code>的<code>getter</code>方法，便将<code>watcher1</code>添加到<code>name1</code>对应的Dep中</li><li>当<code>name1</code>更新，<code>setter</code>触发时，便可通过对应<code>Dep</code>通知管理所有<code>Watcher</code>更新</li></ol><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 负责更新视图</span></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#FFCB6B;"> Watcher</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;">  constructor</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">vm</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> key</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> updater</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;">    this.</span><span style="color:#BABED8;">vm</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> vm</span></span>
<span class="line"><span style="color:#89DDFF;">    this.</span><span style="color:#BABED8;">key</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> key</span></span>
<span class="line"><span style="color:#89DDFF;">    this.</span><span style="color:#BABED8;">updateFn</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> updater</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 创建实例时，把当前实例指定到 Dep.target静态属性上</span></span>
<span class="line"><span style="color:#BABED8;">    Dep</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">target</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> this</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 读一下key，触发get</span></span>
<span class="line"><span style="color:#BABED8;">    vm</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">key</span><span style="color:#F07178;">]</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 置空</span></span>
<span class="line"><span style="color:#BABED8;">    Dep</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">target</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> null</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 未来执行dom更新函数，由dep调用</span></span>
<span class="line"><span style="color:#F07178;">  update</span><span style="color:#89DDFF;">()</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;">    this.</span><span style="color:#BABED8;">updateFn</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">call</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this.</span><span style="color:#BABED8;">vm</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> this.</span><span style="color:#BABED8;">vm</span><span style="color:#F07178;">[</span><span style="color:#89DDFF;">this.</span><span style="color:#BABED8;">key</span><span style="color:#F07178;">])</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>声明Dep</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">class</span><span style="color:#FFCB6B;"> Dep</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;">  constructor</span><span style="color:#89DDFF;"> ()</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;">    this.</span><span style="color:#BABED8;">deps</span><span style="color:#89DDFF;"> =</span><span style="color:#F07178;"> [] </span><span style="color:#676E95;font-style:italic;">//依赖管理</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#F07178;">  addDep</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">dep</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;">    this.</span><span style="color:#BABED8;">deps</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">dep</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#F07178;">  notify</span><span style="color:#89DDFF;">()</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;">    this.</span><span style="color:#BABED8;">deps</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">forEach</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">dep</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#BABED8;"> dep</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">update</span><span style="color:#F07178;">())</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>创建<code>watcher</code>时触发getter</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">class</span><span style="color:#FFCB6B;"> Watcher</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;">  constructor</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">vm</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> key</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> updateFn</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">    Dep</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">target</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> this;</span></span>
<span class="line"><span style="color:#89DDFF;">    this.</span><span style="color:#BABED8;">vm</span><span style="color:#F07178;">[</span><span style="color:#89DDFF;">this.</span><span style="color:#BABED8;">key</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">    Dep</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">target</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> null</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>依赖收集， 创建Dep实例</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#82AAFF;"> defineReactive</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">obj</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> key</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> val</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;">  this.</span><span style="color:#82AAFF;">observe</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">val</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> dep</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> new</span><span style="color:#82AAFF;"> Dep</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#BABED8;">  Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">defineProperty</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">obj</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> key</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">    get</span><span style="color:#89DDFF;">()</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">      Dep</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">target</span><span style="color:#89DDFF;"> &amp;&amp;</span><span style="color:#BABED8;"> dep</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addDep</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">Dep</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">target</span><span style="color:#F07178;">) </span><span style="color:#676E95;font-style:italic;">// Dep.target也就是Watcher实例</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">      return</span><span style="color:#BABED8;"> val</span></span>
<span class="line"><span style="color:#89DDFF;">    },</span></span>
<span class="line"><span style="color:#F07178;">    set</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">newVal</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">      if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">newVal</span><span style="color:#89DDFF;"> ===</span><span style="color:#BABED8;"> val</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">      dep</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">notify</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> // 通知dep执行更新方法</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h2 id="来源" tabindex="-1">来源 <a class="header-anchor" href="#来源" aria-label="Permalink to &quot;来源&quot;">​</a></h2>`,41);function i(B,d,A,E,h,u){const s=a;return l(),p("div",null,[y,o(s,{title:"vue双向绑定",href:"https://vue3js.cn/interview/vue/bind.html#%E4%BA%8C%E3%80%81%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A%E7%9A%84%E5%8E%9F%E7%90%86%E6%98%AF%E4%BB%80%E4%B9%88"})])}const C=n(D,[["render",i]]);export{v as __pageData,C as default};
