import{_ as a}from"./chunks/CustomLink.HhFLulSs.js";import{_ as l,o as p,c as o,J as n,a8 as e,aU as t}from"./chunks/framework.QttzOlP4.js";const g=JSON.parse('{"title":"Typescript中的高级类型","description":"","frontmatter":{},"headers":[],"relativePath":"native/typescript/高级类型.md","filePath":"native/typescript/高级类型.md","lastUpdated":1702535610000}'),c={name:"native/typescript/高级类型.md"},r=e('<h1 id="typescript中的高级类型" tabindex="-1">Typescript中的高级类型 <a class="header-anchor" href="#typescript中的高级类型" aria-label="Permalink to &quot;Typescript中的高级类型&quot;">​</a></h1><img src="'+t+`" alt="Typescript高级类型"><h3 id="交叉类型-intersection-types" tabindex="-1">交叉类型(Intersection Types): <code>&amp;</code> <a class="header-anchor" href="#交叉类型-intersection-types" aria-label="Permalink to &quot;交叉类型(Intersection Types): \`&amp;\`&quot;">​</a></h3><p>交叉类型是将多个类型合并为同一个类型，这让我们可以把现有的类型叠加到一起成为一种类型， 它包含了所需的所有类型的特性。</p><p>👋 不适用于基本类型 如<code>string</code>类型、<code>number</code>类型</p><div class="warning custom-block"><p class="custom-block-title">关于交叉类型产生<code>never</code>类型</p><p>交叉类型在使用的时候有时候会产生一个新的类型<code>never</code>， 一般产生这种情况是两个<code>interface</code>使用交叉类型进行处理， 他们当中都有一个<code>name</code>的同名属性，但两个类型不同，<code>interface1</code>中的<code>name</code>是<code>string</code>类型, <code>interface2</code>的<code>name</code>属性是<code>number</code>类型， 但没有一个属性的类型即是<code>string</code>类型又是<code>number</code>类型</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">interface</span><span style="color:#FFCB6B;"> IDefaultFirst</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">  name</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> string</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#C792EA;">interface</span><span style="color:#FFCB6B;"> IDefaultSecond</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">  name</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> number</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">type</span><span style="color:#FFCB6B;"> CrossType</span><span style="color:#89DDFF;"> =</span><span style="color:#FFCB6B;"> IDefaultFirst</span><span style="color:#89DDFF;"> &amp;</span><span style="color:#FFCB6B;"> IDefaultSecond</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> // CrossType中的name的类型将为‘never’</span></span></code></pre></div></div><ul><li><p><strong>示例</strong></p><p>具体类型联合</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">interface</span><span style="color:#FFCB6B;"> First</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">  name</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> string</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">interface</span><span style="color:#FFCB6B;"> Second</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">  question</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> sstring</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  id</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> numbher</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> getCrossover </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> &lt;</span><span style="color:#FFCB6B;">First</span><span style="color:#89DDFF;">,</span><span style="color:#FFCB6B;"> Second</span><span style="color:#89DDFF;">&gt;(</span><span style="color:#BABED8;font-style:italic;">first</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> First</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> second</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> Second</span><span style="color:#89DDFF;">):</span><span style="color:#FFCB6B;"> First</span><span style="color:#89DDFF;"> &amp;</span><span style="color:#FFCB6B;"> Second</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // Partial 是Typescript的工具类型  </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // Partial&lt;Type&gt;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 作用是 构造类型 Type ，并将它所有的属性设置为可选的。它的返回类型表示输入类型的所有子类型</span></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> result</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> Partial</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">First</span><span style="color:#89DDFF;"> &amp;</span><span style="color:#FFCB6B;"> Second</span><span style="color:#89DDFF;">&gt;</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> {}</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  for</span><span style="color:#F07178;"> (</span><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> key</span><span style="color:#89DDFF;"> in</span><span style="color:#BABED8;"> first</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">first</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">hasOwnProperty</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">key</span><span style="color:#F07178;">)) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      (</span><span style="color:#BABED8;">result</span><span style="color:#89DDFF;font-style:italic;"> as</span><span style="color:#FFCB6B;"> First</span><span style="color:#F07178;">)[</span><span style="color:#BABED8;">key</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> first</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">key</span><span style="color:#F07178;">]</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  for</span><span style="color:#F07178;"> (</span><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> keys</span><span style="color:#89DDFF;"> in</span><span style="color:#BABED8;"> second</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">second</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">hasOwnPropertu</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">keys</span><span style="color:#F07178;">)) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      (</span><span style="color:#BABED8;">result</span><span style="color:#89DDFF;font-style:italic;"> as</span><span style="color:#FFCB6B;"> Second</span><span style="color:#F07178;">)[</span><span style="color:#BABED8;">keys</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> seconds</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">keys</span><span style="color:#F07178;">]</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  return</span><span style="color:#BABED8;"> result</span><span style="color:#89DDFF;font-style:italic;"> as</span><span style="color:#FFCB6B;"> First</span><span style="color:#89DDFF;"> &amp;</span><span style="color:#FFCB6B;"> Second</span><span style="color:#676E95;font-style:italic;"> // 这个类型断言可以省略</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> obj </span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;"> getCrossover</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> a</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">hello</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;"> },</span><span style="color:#89DDFF;"> {</span><span style="color:#F07178;"> b</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 42</span><span style="color:#89DDFF;"> }</span><span style="color:#BABED8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 现在 obj就同时拥有了 a 属性与 b 属性</span></span></code></pre></div><p>泛型联合</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> getCrossover </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> &lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#C792EA;"> extends</span><span style="color:#FFCB6B;"> object</span><span style="color:#89DDFF;">,</span><span style="color:#FFCB6B;"> U</span><span style="color:#C792EA;"> extends</span><span style="color:#FFCB6B;"> object</span><span style="color:#89DDFF;">&gt;(</span><span style="color:#BABED8;font-style:italic;">first</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> T</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> second</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> U</span><span style="color:#89DDFF;">):</span><span style="color:#FFCB6B;"> T</span><span style="color:#89DDFF;"> &amp;</span><span style="color:#FFCB6B;"> U</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> result</span><span style="color:#89DDFF;"> =</span><span style="color:#F07178;"> &lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;"> &amp;</span><span style="color:#FFCB6B;"> U</span><span style="color:#F07178;">&gt;</span><span style="color:#89DDFF;">{}</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  for</span><span style="color:#F07178;"> (</span><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> key</span><span style="color:#89DDFF;"> in</span><span style="color:#BABED8;"> first</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    (&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#F07178;">&gt;</span><span style="color:#BABED8;">result</span><span style="color:#F07178;">)[</span><span style="color:#BABED8;">key</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> first</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">key</span><span style="color:#F07178;">]</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  for</span><span style="color:#F07178;"> (</span><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> keys</span><span style="color:#89DDFF;"> in</span><span style="color:#BABED8;"> second</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">!</span><span style="color:#BABED8;">result</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">hasOwnProperty</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">keys</span><span style="color:#F07178;">)) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      (&lt;</span><span style="color:#FFCB6B;">U</span><span style="color:#F07178;">&gt;</span><span style="color:#BABED8;">result</span><span style="color:#F07178;">)[</span><span style="color:#BABED8;">keys</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> second</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">keys</span><span style="color:#F07178;">]</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  return</span><span style="color:#BABED8;"> result</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> obj </span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;"> getCrossover</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> a</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">hello</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;"> },</span><span style="color:#89DDFF;"> {</span><span style="color:#F07178;"> b</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 42</span><span style="color:#89DDFF;"> }</span><span style="color:#BABED8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 现在 obj就同时拥有了 a 属性与 b 属性</span></span></code></pre></div><p>使用交叉类型进行接口混入</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 初始时的 question 和 answer 定义</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">interface</span><span style="color:#FFCB6B;"> IQuestionRecord</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">  createTime</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> string</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  userName</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> string</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  userAvatar</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> string</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  question</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">    title</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> string</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    content</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> string</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    picture</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> string</span><span style="color:#BABED8;">[]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  };</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">interface</span><span style="color:#FFCB6B;"> IAnswerRecord</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">  createTime</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> string</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  userName</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> string</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  userAvatar</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> string</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  answer</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">    comment</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> string</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    audio</span><span style="color:#89DDFF;">?:</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">      url</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> string</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    };</span></span>
<span class="line"><span style="color:#89DDFF;">  };</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 👇👇👇👇👇通过提取公共部分， 利用联合类型将类型定义简化并且可复用</span></span>
<span class="line"><span style="color:#C792EA;">interface</span><span style="color:#FFCB6B;"> IUserBaseinfo</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">  createTime</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> string</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  userName</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> string</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  useAvatar</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">interface</span><span style="color:#FFCB6B;"> IQuestionRecord</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">  question</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">    title</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> string</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    content</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> string</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    picture</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> string</span><span style="color:#BABED8;">[]</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#C792EA;">interface</span><span style="color:#FFCB6B;"> IAnswerRecord</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">  answer</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">    comment</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> string</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    audio</span><span style="color:#89DDFF;">?:</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">      url</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> string</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 使用交叉类型混入</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// Mixin 类型的含义是遍历传入的泛型 T 和 U 的所有属性， 并且把他们联合，产生新的类型对象， 新的类型对象上每个属性的类型是他们在原本类型上的属性</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// Mixin&lt;T,U&gt;  是泛型类的写法</span></span>
<span class="line"><span style="color:#C792EA;">type</span><span style="color:#FFCB6B;"> Mixin</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">,</span><span style="color:#FFCB6B;">U</span><span style="color:#89DDFF;">&gt;</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">  [</span><span style="color:#FFCB6B;">P</span><span style="color:#89DDFF;"> in</span><span style="color:#89DDFF;"> keyof</span><span style="color:#BABED8;"> (</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;"> &amp;</span><span style="color:#FFCB6B;"> U</span><span style="color:#BABED8;">)]</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> (</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;"> &amp;</span><span style="color:#FFCB6B;"> U</span><span style="color:#BABED8;">)[</span><span style="color:#FFCB6B;">P</span><span style="color:#BABED8;">]</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 另一种写法</span></span>
<span class="line"><span style="color:#C792EA;">type</span><span style="color:#FFCB6B;"> Mixin</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">,</span><span style="color:#FFCB6B;"> U</span><span style="color:#89DDFF;">&gt;</span><span style="color:#89DDFF;"> =</span><span style="color:#FFCB6B;"> T</span><span style="color:#89DDFF;"> &amp;</span><span style="color:#FFCB6B;"> U</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 使用泛型混入， 方便之后复用</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// MixinUserInfo 类型的含义是通过调用混合类型 Mixin， 先将共同的部分IUserBaseInfo类型先混入进去， 整合成新类型， 方便给具体的 question 和 answer 来调用</span></span>
<span class="line"><span style="color:#C792EA;">type</span><span style="color:#FFCB6B;"> MixinUserInfo</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;</span><span style="color:#89DDFF;"> =</span><span style="color:#FFCB6B;"> Mixin</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">IUserBaseInfo</span><span style="color:#89DDFF;">,</span><span style="color:#FFCB6B;"> T</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 这里的 IRecordConfig 是把 question 和 answer 整合成一个类型， 减少不必要的类型定义</span></span>
<span class="line"><span style="color:#C792EA;">interface</span><span style="color:#FFCB6B;"> IRecordConfig</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">  question</span><span style="color:#89DDFF;">?:</span><span style="color:#FFCB6B;">MixinUserInfo</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">IQuestionRecord</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#F07178;">  answer</span><span style="color:#89DDFF;">?:</span><span style="color:#FFCB6B;"> MixinUserInfo</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">IAnswerRecord</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 最终使用的时候的类型</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#C792EA;"> type</span><span style="color:#FFCB6B;"> RecordConfigList</span><span style="color:#89DDFF;"> =</span><span style="color:#FFCB6B;"> IRecordConfig</span><span style="color:#BABED8;">[]</span></span></code></pre></div></li></ul><h3 id="联合类型-union-types" tabindex="-1">联合类型(Union Types): <code>|</code> <a class="header-anchor" href="#联合类型-union-types" aria-label="Permalink to &quot;联合类型(Union Types): \`|\`&quot;">​</a></h3><p>联合类型与交叉类型很有关联，但是使用上完全不同。 联合类型会产生一个包含所有类型的选择集的类型，表示一个值的类型是定义的联合类型中的其中一种。</p><p>当一个变量希望传入某种类型时，可以考虑使用联合类型</p><p>当一个值是联合类型对象时， 我们只能访问这个联合类型中的所有类型中的共同成员</p><ul><li><strong>示例</strong></li></ul><p>定义常量</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">type</span><span style="color:#FFCB6B;"> IQuestionType</span><span style="color:#89DDFF;"> =</span><span style="color:#FFCB6B;"> string</span><span style="color:#89DDFF;"> |</span><span style="color:#FFCB6B;"> number</span><span style="color:#89DDFF;"> |</span><span style="color:#FFCB6B;"> boolean</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 这里表示id的类型是布尔值 它也可以定义为字符串 数字 都是可以正常运行的</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> id</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;">IQuestionType</span><span style="color:#89DDFF;"> =</span><span style="color:#FF9CAC;"> false</span></span></code></pre></div><p>在函数中定义</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> getUnoinType </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> (</span><span style="color:#BABED8;font-style:italic;">value</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> string</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> padding</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> string</span><span style="color:#89DDFF;"> |</span><span style="color:#FFCB6B;"> number</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">typeof</span><span style="color:#BABED8;"> padding</span><span style="color:#89DDFF;"> ===</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">number</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    return</span><span style="color:#82AAFF;"> Array</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">padding</span><span style="color:#89DDFF;"> +</span><span style="color:#F78C6C;"> 1</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">join</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;&#39;</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">+</span><span style="color:#BABED8;"> value</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span><span style="color:#89DDFF;font-style:italic;"> else</span><span style="color:#89DDFF;font-style:italic;"> if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">typeof</span><span style="color:#BABED8;"> padding</span><span style="color:#89DDFF;"> ===</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">string</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    return</span><span style="color:#BABED8;"> padding</span><span style="color:#89DDFF;"> +</span><span style="color:#BABED8;"> value</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  throw</span><span style="color:#89DDFF;"> new</span><span style="color:#82AAFF;"> Error</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">Expected string or number, got &#39;</span><span style="color:#89DDFF;">\${</span><span style="color:#BABED8;">padding</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">&#39;</span><span style="color:#89DDFF;">\`</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#82AAFF;">getUnoinType</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Hello world</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;"> 4</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p><strong>当一个值是联合类型对象时， 我们只能访问这个联合类型中的所有类型中的共同成员</strong></p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">  interface</span><span style="color:#FFCB6B;"> Bird</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">    fly</span><span style="color:#89DDFF;">():</span><span style="color:#FFCB6B;"> void</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    layEggs</span><span style="color:#89DDFF;">():</span><span style="color:#FFCB6B;"> void</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">  interface</span><span style="color:#FFCB6B;"> Fish</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">    swim</span><span style="color:#89DDFF;">():</span><span style="color:#FFCB6B;"> void</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    layEggs</span><span style="color:#89DDFF;">():</span><span style="color:#FFCB6B;"> void</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> getSmallPet </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> ():</span><span style="color:#FFCB6B;">Bird</span><span style="color:#89DDFF;"> |</span><span style="color:#FFCB6B;"> Fish</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // ...</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> pet </span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;"> getSmallPet</span><span style="color:#BABED8;">()</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> </span></span>
<span class="line"><span style="color:#BABED8;">pet</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">layEggs</span><span style="color:#BABED8;">()</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> // 正常运行</span></span>
<span class="line"><span style="color:#BABED8;">pet</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">swim</span><span style="color:#BABED8;">()</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> // 报错， Bird 类型中没有这个属性</span></span></code></pre></div><h3 id="类型守卫-type-guards" tabindex="-1">类型守卫(Type Guards) <a class="header-anchor" href="#类型守卫-type-guards" aria-label="Permalink to &quot;类型守卫(Type Guards)&quot;">​</a></h3><p>类型守卫是一种用于<em>收窄</em>或者<em>断言</em>变量的技术， 通常与联合类型与交叉类型一起使用。</p><p>类型守卫可以通过一些条件检查来确定变量的确切类型， 以便在后续的代码中使用更具体的类型信息</p><p>类型守卫通常有以下几种方式</p><h4 id="typeof类型守卫" tabindex="-1"><code>typeof</code>类型守卫 <a class="header-anchor" href="#typeof类型守卫" aria-label="Permalink to &quot;\`typeof\`类型守卫&quot;">​</a></h4><p>使用<code>typeof</code>操作符检查变量类型</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> printValue </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> (</span><span style="color:#BABED8;font-style:italic;">value</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> string</span><span style="color:#89DDFF;"> |</span><span style="color:#FFCB6B;"> number</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 这里使用 typeof 操作符将 value 值的类型范围收窄到 string 类型， 之后就可以调用字符串的方法</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">typeof</span><span style="color:#BABED8;"> value</span><span style="color:#89DDFF;"> ===</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">string</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">    console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">value</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toUpperCase</span><span style="color:#F07178;">())</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // else判断体里的逻辑是将 value 的类型推断为 number类型， 之后调用 Number 类型的方法</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span><span style="color:#89DDFF;font-style:italic;"> else</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">    console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">value</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toFixed</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">))</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h4 id="instanceof类型守卫" tabindex="-1"><code>instanceof</code>类型守卫 <a class="header-anchor" href="#instanceof类型守卫" aria-label="Permalink to &quot;\`instanceof\`类型守卫&quot;">​</a></h4><p>使用<code>instanceof</code>操作符检查对象是否属于某个类</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">class</span><span style="color:#FFCB6B;"> Cat</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">  meow</span><span style="color:#89DDFF;">()</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">    console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Meow</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#FFCB6B;"> Dog</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">  bark</span><span style="color:#89DDFF;">()</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">    console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Bark</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> makeSound </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> (</span><span style="color:#BABED8;font-style:italic;">animial</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> Cat</span><span style="color:#89DDFF;"> |</span><span style="color:#FFCB6B;"> Dog</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 这里使用 instanceof 操作符将 animial 的类型收窄到 Cat 类上， 之后调用 meow() 方法</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">animial</span><span style="color:#89DDFF;"> instanceof</span><span style="color:#FFCB6B;"> Cat</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">    animial</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">meow</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // else 判断体的逻辑是将 animial 推断为属于 Dog 这个类型， 之后调用bark方法</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span><span style="color:#89DDFF;font-style:italic;"> else</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">    animial</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">bark</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h4 id="自定义类型守卫" tabindex="-1">自定义类型守卫 <a class="header-anchor" href="#自定义类型守卫" aria-label="Permalink to &quot;自定义类型守卫&quot;">​</a></h4><p>通过定义一个返回<strong>类型谓词</strong>的函数， 来自定义一个类型守卫</p><p>🫸 <em>类型谓词</em> 的形式是 <code>paramterName is Type</code>这种形式， <code>paramterName</code>必须是来自当前函数签名里的一个参数名， <code>Type</code>表示一个类型 🫷</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">interface</span><span style="color:#FFCB6B;"> Bird</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">  fly</span><span style="color:#89DDFF;">():</span><span style="color:#FFCB6B;"> void</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  layEggs</span><span style="color:#89DDFF;">():</span><span style="color:#FFCB6B;"> void</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">interface</span><span style="color:#FFCB6B;"> Fish</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">  swim</span><span style="color:#89DDFF;">():</span><span style="color:#FFCB6B;"> void</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  layEggs</span><span style="color:#89DDFF;">():</span><span style="color:#FFCB6B;"> void</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// pet is Fish 这一段就是类型谓词</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> isFish </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> (</span><span style="color:#BABED8;font-style:italic;">pet</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> Bird</span><span style="color:#89DDFF;"> |</span><span style="color:#FFCB6B;"> Fish</span><span style="color:#89DDFF;">):</span><span style="color:#BABED8;font-style:italic;">pet</span><span style="color:#89DDFF;"> is</span><span style="color:#FFCB6B;"> Fish</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  return</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">pet</span><span style="color:#89DDFF;font-style:italic;"> as</span><span style="color:#FFCB6B;"> Fish</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">swim</span><span style="color:#89DDFF;"> !==</span><span style="color:#89DDFF;"> undefined</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> getSmallPet </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> ():</span><span style="color:#FFCB6B;">Bird</span><span style="color:#89DDFF;"> |</span><span style="color:#FFCB6B;"> Fish</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // ...</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> pets </span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;"> getSmallPet</span><span style="color:#BABED8;">()</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 这里 通过自定义的 类型谓词 将pets的类型收窄为 Fish， 之后调用 Fish 类型定义的操作函数</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#BABED8;"> (</span><span style="color:#82AAFF;">isFish</span><span style="color:#BABED8;">(pets)) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">  pets</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">swim</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// else判断体中是将 pets 类型推断为 Bird 类型， 之后调用 Bird 类型定义的操作函数</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#89DDFF;font-style:italic;"> else</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">  pet</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">fly</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h4 id="in操作符" tabindex="-1"><code>in</code>操作符 <a class="header-anchor" href="#in操作符" aria-label="Permalink to &quot;\`in\`操作符&quot;">​</a></h4><p><code>in</code>操作符可以作为类型细化表达式来使用</p><p>对于<code>n in x</code>表达式， 其中<code>n</code>是字符串字面量或字符串字面量类型， 并且<code>x</code>是个联合类型， 那么<code>true</code>分支的类型细化为有一个可选的或者必须的属性， <code>false</code>分支的类型细化为有一个可选的或不存在属性<code>n</code></p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> move </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> (</span><span style="color:#BABED8;font-style:italic;">pet</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> Fish</span><span style="color:#89DDFF;"> |</span><span style="color:#FFCB6B;"> Bird</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">swim</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;"> in</span><span style="color:#BABED8;"> pet</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    return</span><span style="color:#BABED8;"> pet</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">swom</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  return</span><span style="color:#BABED8;"> pet</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">fly</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h3 id="类型别名" tabindex="-1">类型别名 <a class="header-anchor" href="#类型别名" aria-label="Permalink to &quot;类型别名&quot;">​</a></h3><p>类型别名， 顾名思义， 就是给一个类型起一个新名字， 但是不会新创建一个类型。</p><p>类型别名有时候和接口很相似， 但是可以作用于原始值、联合类型，元祖预计其他任何需要手写的类型。</p><p>但是不需要给原始类型起别名，通常没什么用处， 尽管可以运行。</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">type</span><span style="color:#FFCB6B;"> Name</span><span style="color:#89DDFF;"> =</span><span style="color:#FFCB6B;"> string</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">type</span><span style="color:#FFCB6B;"> NameResolver</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> ()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#FFCB6B;"> string</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">type</span><span style="color:#FFCB6B;"> NameOrResolver</span><span style="color:#89DDFF;"> =</span><span style="color:#FFCB6B;"> Name</span><span style="color:#89DDFF;"> |</span><span style="color:#FFCB6B;"> NameResolver</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> getUserName </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> (</span><span style="color:#BABED8;font-style:italic;">name</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> NameOrResolver</span><span style="color:#89DDFF;">):</span><span style="color:#FFCB6B;"> Name</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">typeof</span><span style="color:#BABED8;"> name</span><span style="color:#89DDFF;"> ===</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">string</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    return</span><span style="color:#BABED8;"> name</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span><span style="color:#89DDFF;font-style:italic;"> else</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    return</span><span style="color:#82AAFF;"> name</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h4 id="泛型式类型别名" tabindex="-1">泛型式类型别名 <a class="header-anchor" href="#泛型式类型别名" aria-label="Permalink to &quot;泛型式类型别名&quot;">​</a></h4><p>同接口一样， 类型别名可以是泛型 - 我们可以添加参数类型并且在别名声明的右侧传入：</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">type</span><span style="color:#FFCB6B;"> Container</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> {</span><span style="color:#F07178;"> value</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> T</span><span style="color:#89DDFF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 在类型别名属性中引用自身</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">type</span><span style="color:#FFCB6B;"> Tree</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">  value</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> T</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  left</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> Tree</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;;</span></span>
<span class="line"><span style="color:#F07178;">  right</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> Tree</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>与交叉类型一起使用：</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">type</span><span style="color:#FFCB6B;"> LinkedList</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;</span><span style="color:#89DDFF;"> =</span><span style="color:#FFCB6B;"> T</span><span style="color:#89DDFF;"> &amp;</span><span style="color:#89DDFF;"> {</span><span style="color:#F07178;"> next</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> linkedList</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;</span><span style="color:#89DDFF;"> };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">interface</span><span style="color:#FFCB6B;"> Person</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">  name</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> string</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> people</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> LinkedList</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Person</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> name1 </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> people</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">name</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> name2 </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> people</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">next</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">name</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> name3 </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> people</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">next</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">next</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">name</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> name4 </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> people</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">next</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">next</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">next</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">name </span><span style="color:#89DDFF;">;</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">TIP 🔔</p><ul><li><p>类型别名不能出现在右侧任何地方。</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">type</span><span style="color:#FFCB6B;"> Yikes</span><span style="color:#89DDFF;"> =</span><span style="color:#FFCB6B;"> Array</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Yikes</span><span style="color:#89DDFF;">&gt;</span><span style="color:#676E95;font-style:italic;"> // 这个写法会报错</span></span></code></pre></div></li><li><p>如果需要使用类型注解的层次结构，请使用接口。 它能使用<code>implements</code>和 <code>extedns</code>。</p></li><li><p>为一个简单的对象类型使用类型别名， 只需要一个与异化的名字就可以。 另外。 当想给联合类型和交叉类型提供一个语义化的名称时， 类型别名是一个好的选择。</p></li><li><p>请注意，类型别名在 TypeScript 中只是给现有类型起了一个别名，它们并不会创建出不同或独立的类型。当你使用类型别名时，实际上就相当于直接使用了被别名的原始类型。换句话说，类型别名并不会创建出全新的、不同的类型。</p></li></ul><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">type</span><span style="color:#FFCB6B;"> A</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> {</span><span style="color:#F07178;"> x</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> number</span><span style="color:#89DDFF;"> };</span></span>
<span class="line"><span style="color:#C792EA;">type</span><span style="color:#FFCB6B;"> B</span><span style="color:#89DDFF;"> =</span><span style="color:#FFCB6B;"> A</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> a</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> A</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> {</span><span style="color:#F07178;"> x</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 42</span><span style="color:#89DDFF;"> };</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> b</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> B</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> {</span><span style="color:#F07178;"> x</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 10</span><span style="color:#89DDFF;"> };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">a </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> b</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">  // 合法</span></span>
<span class="line"><span style="color:#BABED8;">b </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> a</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">  // 合法</span></span></code></pre></div><p>上述示例中，类型别名 B 被定义为类型 A 的别名，因此变量 a 和 b 可以互相赋值，因为它们实际上都是指向相同的类型。尽管在代码中看起来好像创建了两个不同的类型，但在 TypeScript 视角下，它们实际上是完全相同的类型</p></div><h4 id="接口与类型别名" tabindex="-1">接口与类型别名 <a class="header-anchor" href="#接口与类型别名" aria-label="Permalink to &quot;接口与类型别名&quot;">​</a></h4><p>类型别名虽然可以和接口一样声明， 但是他们并不同。</p><ol><li><p>接口创建了一个新的名字，可以在其他任何地方使用，但类型别名并不创建新名字 ——例如， 错误信息就不会使用别名。在下面示例中，在编辑器中将鼠标悬停在<code>interfaceed</code>上， 显示它返回的是<code>Interface</code>，但悬停在<code>aliased</code>上时，现实的却是这个字面量类型：</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">type</span><span style="color:#FFCB6B;"> Alias</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> {</span><span style="color:#F07178;"> num</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> number</span><span style="color:#89DDFF;"> };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">interface</span><span style="color:#FFCB6B;"> interface</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;"> num</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> number</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">declare</span><span style="color:#C792EA;"> const</span><span style="color:#BABED8;"> aliased </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> (</span><span style="color:#BABED8;font-style:italic;">arg</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> Alias</span><span style="color:#89DDFF;">):</span><span style="color:#FFCB6B;">Alias</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {}</span></span>
<span class="line"><span style="color:#C792EA;">declare</span><span style="color:#C792EA;"> const</span><span style="color:#BABED8;"> interfaced </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> (</span><span style="color:#BABED8;font-style:italic;">arg</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> Interface</span><span style="color:#89DDFF;">):</span><span style="color:#FFCB6B;"> Interface</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {}</span></span></code></pre></div><p>在旧版本的 TypeScript 里，类型别名不能被继承和实现（它们也不能继承和实现其它类型）。从 TypeScript 2.7 开始， 类型别名可以被继承并生成新的交叉类型。例如： type Cat = Animal &amp; { purrs: true } 。</p><p>因为软件中的对象应该对于扩展是开放的，但是对于修改是封闭的 (opens new window)，你应该尽量去使用接口代替类型别名。</p></li><li><p>如果无法通过接口来描述一个类型并且需要使用联合类型或元祖类型， 这个时候通常会使用类型别名</p></li></ol><h3 id="元组类型-tuple" tabindex="-1">元组类型(Tuple) <a class="header-anchor" href="#元组类型-tuple" aria-label="Permalink to &quot;元组类型(Tuple)&quot;">​</a></h3><p>用于表示固定长度和固定类型排列的数组。在元组中，每个位置上的元素都有一个确定的类型</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> x</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> [</span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">,</span><span style="color:#FFCB6B;"> number</span><span style="color:#BABED8;">]</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 初始化</span></span>
<span class="line"><span style="color:#BABED8;">x </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> [</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">hello</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;"> 10</span><span style="color:#BABED8;">]</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 错误的初始化</span></span>
<span class="line"><span style="color:#BABED8;">x </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> [</span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">hello</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">]</span></span></code></pre></div><p>但是访问一个已知的索引， 会得到正确的类型</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(x[</span><span style="color:#F78C6C;">0</span><span style="color:#BABED8;">]</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">substr</span><span style="color:#BABED8;">(</span><span style="color:#F78C6C;">1</span><span style="color:#BABED8;">)) </span><span style="color:#676E95;font-style:italic;">// ok</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(x[</span><span style="color:#F78C6C;">1</span><span style="color:#BABED8;">]</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">substr</span><span style="color:#BABED8;">(</span><span style="color:#F78C6C;">1</span><span style="color:#BABED8;">)) </span><span style="color:#676E95;font-style:italic;">// Error number 类型没有substr方法</span></span></code></pre></div><p>元组类型在需要固定长度和类型的数组场景下非常有用，例如表示一对坐标、表示函数返回多个不同类型的值等。通过使用元组类型，可以更好地约束数组的结构，提高代码的类型安全性。</p><p><strong>当访问超出已知索引的元素时，会返回元组包含的类型的所有联合类型</strong></p><h3 id="infer-关键字" tabindex="-1">infer 关键字 <a class="header-anchor" href="#infer-关键字" aria-label="Permalink to &quot;infer 关键字&quot;">​</a></h3><p>表示在<code>extends</code>条件语句中待推断的类型变量，它是从泛型里面进行推断</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">type</span><span style="color:#FFCB6B;"> ParamType</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;</span><span style="color:#89DDFF;"> =</span><span style="color:#FFCB6B;"> T</span><span style="color:#C792EA;"> extends</span><span style="color:#89DDFF;"> (</span><span style="color:#BABED8;font-style:italic;">arg</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> infer</span><span style="color:#FFCB6B;"> P</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#FFCB6B;"> any</span><span style="color:#89DDFF;"> ?</span><span style="color:#FFCB6B;"> P</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> T</span></span></code></pre></div><p>在这个条件语句中 <code>T extends (arg: infer P) =&gt; any ? P : T</code> 中， <code>infer P</code>表示待推断的函数参数</p><p>整句的含义为： 如果<code>T</code> 能赋值给 <code>(arg: infer P) =&gt; any</code>, 则结果是 <code>(arg: infer P) =&gt; any</code> 类型中的参数<code>P</code>否则返回<code>T</code></p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">  type</span><span style="color:#FFCB6B;"> shiftArr</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">arr</span><span style="color:#C792EA;"> extends</span><span style="color:#FFCB6B;"> unknown</span><span style="color:#BABED8;">[]</span><span style="color:#89DDFF;">&gt;</span><span style="color:#89DDFF;"> =</span><span style="color:#FFCB6B;"> arr</span><span style="color:#C792EA;"> extends</span><span style="color:#BABED8;"> [</span><span style="color:#FFCB6B;">unknown</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> ...infer</span><span style="color:#FFCB6B;"> restArr</span><span style="color:#BABED8;">]</span></span>
<span class="line"><span style="color:#89DDFF;">    ?</span><span style="color:#FFCB6B;"> restArr</span></span>
<span class="line"><span style="color:#89DDFF;">    :</span><span style="color:#FFCB6B;"> never</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">  type</span><span style="color:#FFCB6B;"> footArr</span><span style="color:#89DDFF;"> =</span><span style="color:#FFCB6B;"> shiftArr</span><span style="color:#89DDFF;">&lt;</span><span style="color:#BABED8;">[</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;"> 2</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;"> 3</span><span style="color:#BABED8;">]</span><span style="color:#89DDFF;">&gt;;</span></span></code></pre></div><p>上面这个示例得到的结果是得到一个去掉首位字符的数组<code>[2,3]</code>, 但他不是结果， 它是一个类型</p><p>整句的含义为<code>shiftArr</code>类型中传入了泛型<code>arr</code>， <code>arr</code>是继承于(或者说arr的类型范围限制在了)<code>unknown</code>数组， 我们通过数组解构的语法 将除去首位字符的元素推断成一个新类型<code>restArr</code>，如果这个<code>restArr</code>存在，那么就返回这个新类型，否则就返回<code>never</code>类型</p><h2 id="引用" tabindex="-1">引用 <a class="header-anchor" href="#引用" aria-label="Permalink to &quot;引用&quot;">​</a></h2>`,66);function F(y,D,i,B,d,C){const s=a;return p(),o("div",null,[r,n(s,{title:"深入理解Typescript",href:"https://jkchao.github.io/typescript-book-chinese/typings/overview.html#%E7%B1%BB%E5%9E%8B%E5%88%AB%E5%90%8D"}),n(s,{title:"TypeScript手册",href:"https://bosens-china.github.io/Typescript-manual/download/zh/reference/advanced-types.html#%E7%B1%BB%E5%9E%8B%E5%AE%88%E5%8D%AB%E4%B8%8E%E7%B1%BB%E5%9E%8B%E5%8C%BA%E5%88%86-type-guards-and-differentiating-types"}),n(s,{title:"这才是真正让你入门Typescript类型体操的文章",href:"https://juejin.cn/post/7283797053338517545?searchId=202312121416195FE61D891B64900A0F78#heading-7"})])}const f=l(c,[["render",F]]);export{g as __pageData,f as default};
