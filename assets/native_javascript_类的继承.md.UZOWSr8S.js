import{_ as n}from"./chunks/CustomLink.YSvj3KpE.js";import{_ as a,o as l,c as p,J as o,a8 as e,aK as t}from"./chunks/framework.Qf1t7Yq5.js";const h=JSON.parse('{"title":"类的继承","description":"","frontmatter":{},"headers":[],"relativePath":"native/javascript/类的继承.md","filePath":"native/javascript/类的继承.md","lastUpdated":1703486970000}'),c={name:"native/javascript/类的继承.md"},r=e(`<h1 id="类的继承" tabindex="-1">类的继承 <a class="header-anchor" href="#类的继承" aria-label="Permalink to &quot;类的继承&quot;">​</a></h1><p>继承(inheritance)是面向对象软件技术中的一个概念</p><p>如果一个类别B &#39;继承自&#39; 另一个类别A，就把这个B称为&#39;A的子类&#39;, 而把A称为 &#39;B的父类别&#39;, 也可以称 &#39;A是B的超类&#39;</p><h3 id="优点" tabindex="-1">优点 <a class="header-anchor" href="#优点" aria-label="Permalink to &quot;优点&quot;">​</a></h3><p>继承可以使得子类有父类别的各种属性和方法，而不需要再次编写相同的代码</p><p>在子类别继承父类别的同时，可以重新定义某些属性，并重写某些方法，即覆盖父类别的原有属性和方法，使其获得与父类别不同的功能</p><p>虽然 JavaScript 不是真正的面相对象语言，但天生的灵活性，使应用场景更丰富</p><p>关于继承， 我们举一个形象的例子</p><p>定义一个类(Class) 叫汽车， 汽车的属性包括颜色、轮胎、品牌、速度、排气量等等</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">class</span><span style="color:#FFCB6B;"> Car</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;">  constructor</span><span style="color:#89DDFF;"> (</span><span style="color:#BABED8;font-style:italic;">color</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> speed</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;">    this.</span><span style="color:#BABED8;">color</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> color</span></span>
<span class="line"><span style="color:#89DDFF;">    this.</span><span style="color:#BABED8;">speed</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> speed</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>由汽车的这个类可以派生出 &#39;轿车&#39; 和 &#39;货车&#39; 两个类，在汽车的基础属性上，为轿车添加一个后备箱，给货车添加一个大货箱</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 货车</span></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#FFCB6B;"> Truck</span><span style="color:#C792EA;"> extends</span><span style="color:#FFCB6B;"> Car</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;">  constructor</span><span style="color:#89DDFF;"> (</span><span style="color:#BABED8;font-style:italic;">color</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> speed</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">    super</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">color</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;">speed</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">    this.</span><span style="color:#BABED8;">Container</span><span style="color:#89DDFF;"> =</span><span style="color:#FF9CAC;"> true</span><span style="color:#676E95;font-style:italic;"> // 货箱</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 轿车</span></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#FFCB6B;"> MiniCar</span><span style="color:#C792EA;"> extends</span><span style="color:#FFCB6B;"> Car</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;">    constructor</span><span style="color:#89DDFF;"> (</span><span style="color:#BABED8;font-style:italic;">color</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> speed</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">    super</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">color</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;">speed</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">    this.</span><span style="color:#BABED8;">Trunk</span><span style="color:#89DDFF;"> =</span><span style="color:#FF9CAC;"> true</span><span style="color:#676E95;font-style:italic;"> // 后备厢</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>这样轿车和货车就是不一样的，但是二者都属于汽车这个类，汽车、轿车继承了汽车的属性，而不需要再次在 &#39;轿车&#39;中定义汽车已有的属性</p><p>在 &#39;轿车&#39; 继承 &#39;汽车&#39; 的同时，也可以重新定义汽车的某些属性，并重写或覆盖某些属性和方法，使其获得与 &#39;汽车&#39;这个父类不停的属性和方法</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">class</span><span style="color:#FFCB6B;"> MiniCar</span><span style="color:#C792EA;"> extends</span><span style="color:#FFCB6B;"> Car</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;">    constructor</span><span style="color:#89DDFF;"> (</span><span style="color:#BABED8;font-style:italic;">color</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> speed</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">    super</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">color</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;">speed</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">    this.</span><span style="color:#BABED8;">color</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">blcak</span><span style="color:#89DDFF;">&#39;</span><span style="color:#676E95;font-style:italic;"> // 覆盖继承自父类别上的颜色</span></span>
<span class="line"><span style="color:#89DDFF;">    this.</span><span style="color:#BABED8;">Trunk</span><span style="color:#89DDFF;"> =</span><span style="color:#FF9CAC;"> true</span><span style="color:#676E95;font-style:italic;"> // 后备厢</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h3 id="实现方式" tabindex="-1">实现方式 <a class="header-anchor" href="#实现方式" aria-label="Permalink to &quot;实现方式&quot;">​</a></h3><ul><li>原型链继承</li><li>构造函数继承(借助call)</li><li>组合继承</li><li>原型式继承</li><li>寄生式继承</li><li>寄生组合式继承</li></ul><h5 id="原型链继承" tabindex="-1">原型链继承 <a class="header-anchor" href="#原型链继承" aria-label="Permalink to &quot;原型链继承&quot;">​</a></h5><p>原型链继承是比较常见的继承方式之一， 其中涉及构造函数、原型和实例。三者之间存在着一定的关系，即每一个构造函数都有一个原型对象，原型对象又包含一个指向构造函数的指针，而实例则包含一个原型对象的指针</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#82AAFF;"> Parent</span><span style="color:#89DDFF;">()</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;">  this.</span><span style="color:#BABED8;">name</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">parent1</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">  this.</span><span style="color:#BABED8;">play</span><span style="color:#89DDFF;"> =</span><span style="color:#F07178;"> [</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;"> 2</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;"> 3</span><span style="color:#F07178;">]</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#82AAFF;"> Child</span><span style="color:#89DDFF;">()</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;">  this.</span><span style="color:#BABED8;">type</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">child2</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">Child</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">prototype </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> new</span><span style="color:#82AAFF;"> Parent</span><span style="color:#BABED8;">()</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">new</span><span style="color:#82AAFF;"> Child</span><span style="color:#BABED8;">())</span></span></code></pre></div><p>上述代码看似没啥问题，但实际上是存在潜在问题</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#BABED8;"> s1 </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> new</span><span style="color:#82AAFF;"> Child</span><span style="color:#BABED8;">()</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#BABED8;"> s2 </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> new</span><span style="color:#82AAFF;"> Child</span><span style="color:#BABED8;">()</span></span>
<span class="line"><span style="color:#BABED8;">s1</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">play</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#BABED8;">(</span><span style="color:#F78C6C;">4</span><span style="color:#BABED8;">)</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(s1</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">play</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> s2</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">play) </span><span style="color:#676E95;font-style:italic;">// [1, 2, 3, 4], [1, 2, 3, 4]</span></span></code></pre></div><p>我们改变了<code>s1</code>的<code>play</code>属性，会发现<code>s2</code>的<code>play</code>也跟着变化了，这是因为这两个实例使用的是同一个原型对象，内存空间是共享的</p><h5 id="构造函数继承" tabindex="-1">构造函数继承 <a class="header-anchor" href="#构造函数继承" aria-label="Permalink to &quot;构造函数继承&quot;">​</a></h5><p>借助<code>call</code>调用 <code>Parent</code>函数</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#82AAFF;"> Parent</span><span style="color:#89DDFF;">()</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;">  this.</span><span style="color:#BABED8;">name</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">parent1</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">Parent</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getName</span><span style="color:#89DDFF;"> =</span><span style="color:#C792EA;"> function</span><span style="color:#89DDFF;"> ()</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  return</span><span style="color:#89DDFF;"> this.</span><span style="color:#BABED8;">name</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#82AAFF;"> Child</span><span style="color:#89DDFF;">()</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">  Parent</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">call</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  this.</span><span style="color:#BABED8;">type</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">child</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> child </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> new</span><span style="color:#82AAFF;"> Child</span><span style="color:#BABED8;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(child) </span><span style="color:#676E95;font-style:italic;">// 没问题</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(child</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getName</span><span style="color:#BABED8;">()) </span><span style="color:#676E95;font-style:italic;">// 会报错</span></span></code></pre></div><p>可以看到，父类原型对象中一旦存在父类之前自己定义的方法，那么子类将无法继承这些方法</p><p>相比于第一种原型链继承的方法一，父类的引用属性不会被共享，优化了第一种继承方式的弊端，但是只能继承父类的实例属性和方法，不能继承原型属性或者方法</p><h5 id="组合继承" tabindex="-1">组合继承 <a class="header-anchor" href="#组合继承" aria-label="Permalink to &quot;组合继承&quot;">​</a></h5><p>前面两种继承方式，各有优缺点，组合继承则是将前面两种继承方式结合继承起来</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#82AAFF;"> Parent</span><span style="color:#89DDFF;"> ()</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;">  this.</span><span style="color:#BABED8;">name</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">parent</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">  this.</span><span style="color:#BABED8;">play</span><span style="color:#89DDFF;"> =</span><span style="color:#F07178;"> [</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;"> 2</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;"> 3</span><span style="color:#F07178;">]</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">Parent</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getName</span><span style="color:#89DDFF;"> =</span><span style="color:#C792EA;"> function</span><span style="color:#89DDFF;"> ()</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  return</span><span style="color:#89DDFF;"> this.</span><span style="color:#BABED8;">name</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#82AAFF;"> Child</span><span style="color:#89DDFF;">()</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 第二次调用 Parent</span></span>
<span class="line"><span style="color:#BABED8;">  Parent</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">call</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">  this.</span><span style="color:#BABED8;">type</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">child</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 第一次调用 Parent()</span></span>
<span class="line"><span style="color:#FFCB6B;">Child</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">prototype </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> new</span><span style="color:#82AAFF;"> Parent</span><span style="color:#BABED8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 手动挂上构造器，指向自己的构造函数</span></span>
<span class="line"><span style="color:#FFCB6B;">Child</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">constructor </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> Child</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#BABED8;"> s1 </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> new</span><span style="color:#82AAFF;"> Child</span><span style="color:#BABED8;">()</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#BABED8;"> s2 </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> new</span><span style="color:#82AAFF;"> Child</span><span style="color:#BABED8;">()</span></span>
<span class="line"><span style="color:#BABED8;">s1</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">play</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#BABED8;">(</span><span style="color:#F78C6C;">4</span><span style="color:#BABED8;">)</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(s1</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">play</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> s2</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">play) </span><span style="color:#676E95;font-style:italic;">// 不互相影响</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(s3</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">getName) </span><span style="color:#676E95;font-style:italic;">// 正常输出 ‘parent’</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(s2</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">getName) </span><span style="color:#676E95;font-style:italic;">// 正常输出 ‘parent’</span></span></code></pre></div><p>这种方式看起来没什么问题，也解决了原型链继承和构造函数继承各自存在的问题， 但是从上面的代码可以看到 <code>Parent</code> 执行了两次，造成了多构造一次的性能开销</p><h5 id="原型式继承" tabindex="-1">原型式继承 <a class="header-anchor" href="#原型式继承" aria-label="Permalink to &quot;原型式继承&quot;">​</a></h5><p>这里主要借助 <code>Object.create</code> 方法实现普通对象的继承</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> parent </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">  name</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">parent</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#BABED8;">  friends: [</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">p1</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">p2</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">p3</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">]</span></span>
<span class="line"><span style="color:#BABED8;">  getName: </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;"> ()</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    return</span><span style="color:#89DDFF;"> this.</span><span style="color:#BABED8;">name</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> person </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">create</span><span style="color:#BABED8;">(parent)</span></span>
<span class="line"><span style="color:#BABED8;">person</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">name </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">tom</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#BABED8;">person</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">friends</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">jerry</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> person2 </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">create</span><span style="color:#BABED8;">(parent)</span></span>
<span class="line"><span style="color:#BABED8;">person</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">friends</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">lucy</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(person</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">name) </span><span style="color:#676E95;font-style:italic;">// tom</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(person</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">name </span><span style="color:#89DDFF;">===</span><span style="color:#BABED8;"> person</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getName</span><span style="color:#BABED8;">()) </span><span style="color:#676E95;font-style:italic;">// true</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(person2</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">name)</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> // parent</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(person</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">friends) </span><span style="color:#676E95;font-style:italic;">// [&#39;p1&#39;, &#39;p2&#39;, &#39;p3&#39;, &#39;jerry&#39;, &#39;lucy&#39;]</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(person2</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">friends) </span><span style="color:#676E95;font-style:italic;">// [&#39;p1&#39;, &#39;p2&#39;, &#39;p3&#39;, &#39;jerry&#39;, &#39;lucy&#39;]</span></span></code></pre></div><p>这种继承方式的缺点也很明显，因为 <code>Object.create</code> 方法实现的是浅拷贝，多个实例的引用类型属性指向相同的内存，存在篡改的可能</p><h5 id="寄生式继承" tabindex="-1">寄生式继承 <a class="header-anchor" href="#寄生式继承" aria-label="Permalink to &quot;寄生式继承&quot;">​</a></h5><p>寄生式继承在上面的继承基础上进行了优化，利用这个浅拷贝的能力再进行增强，添加一些方法</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> parent </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">  name</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">parent</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  friends</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> [</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">p1</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">p2</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">p3</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#82AAFF;">  getName</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;"> function</span><span style="color:#89DDFF;"> ()</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    return</span><span style="color:#89DDFF;"> this.</span><span style="color:#BABED8;">name</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#82AAFF;"> clone</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">original</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;">  let</span><span style="color:#BABED8;"> clone</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">create</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">original</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#BABED8;">  clone</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getFriends</span><span style="color:#89DDFF;"> =</span><span style="color:#C792EA;"> function</span><span style="color:#89DDFF;">()</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    return</span><span style="color:#89DDFF;"> this.</span><span style="color:#BABED8;">friends</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  return</span><span style="color:#BABED8;"> clone</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> person </span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;"> clone</span><span style="color:#BABED8;">(parent)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(person</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getName</span><span style="color:#BABED8;">()) </span><span style="color:#676E95;font-style:italic;">// parent</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(person</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getFriends</span><span style="color:#BABED8;">()) </span><span style="color:#676E95;font-style:italic;">// [&#39;p1&#39;, &#39;p2&#39;, &#39;p3&#39;]</span></span></code></pre></div><p>其优缺点也很明显，跟原型式继承一样，多个实例的引用类型属性指向相同的内存，存在篡改的可能</p><h5 id="寄生组合式继承" tabindex="-1">寄生组合式继承 <a class="header-anchor" href="#寄生组合式继承" aria-label="Permalink to &quot;寄生组合式继承&quot;">​</a></h5><p>寄生组合式继承，借助解决普通对象的继承问题的<code>Object.create</code>方法，在前面几种继承方式的优缺点基础上进行改造，这也是所有继承方式里面相对最优的继承方式</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#82AAFF;"> clone</span><span style="color:#89DDFF;"> (</span><span style="color:#BABED8;font-style:italic;">parent</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> child</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 这里改用 Object.create 就可以减少组合继承中多进行一次构造的过程</span></span>
<span class="line"><span style="color:#FFCB6B;">  child</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">prototype</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">create</span><span style="color:#F07178;">(</span><span style="color:#FFCB6B;">parent</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">prototype</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#FFCB6B;">  child</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">consturctor</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> child</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#82AAFF;"> Parent</span><span style="color:#89DDFF;">()</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;">  this.</span><span style="color:#BABED8;">name</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">parent</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">  this.</span><span style="color:#BABED8;">play</span><span style="color:#89DDFF;"> =</span><span style="color:#F07178;"> [</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;"> 2</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;"> 3</span><span style="color:#F07178;">]</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">Parent</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getName</span><span style="color:#89DDFF;"> =</span><span style="color:#C792EA;"> function</span><span style="color:#89DDFF;"> ()</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  return</span><span style="color:#89DDFF;"> this.</span><span style="color:#BABED8;">name</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#82AAFF;"> Child</span><span style="color:#89DDFF;">()</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">  Parent</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">call</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">  this.</span><span style="color:#BABED8;">friends</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">child</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">clone</span><span style="color:#BABED8;">(Parent</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> Child)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">Child</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getFriends</span><span style="color:#89DDFF;"> =</span><span style="color:#C792EA;"> function</span><span style="color:#89DDFF;"> ()</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  return</span><span style="color:#89DDFF;"> this.</span><span style="color:#BABED8;">friends</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> person </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> new</span><span style="color:#82AAFF;"> Child</span><span style="color:#BABED8;">()</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(person) </span><span style="color:#676E95;font-style:italic;">// { friends: &#39;child&#39;, name: &#39;child&#39;, play: [1, 2, 3], __proto__: Parent}</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(person</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getName</span><span style="color:#BABED8;">()) </span><span style="color:#676E95;font-style:italic;">//parent</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(person</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getFriends</span><span style="color:#BABED8;">()) </span><span style="color:#676E95;font-style:italic;">// child</span></span></code></pre></div><p>可以看到 person 打印出来的结果，属性得到了继承， 方法也没有问题</p><p>文章一开头，我们使用的是<code>ES6</code>中的 <code>extends</code>关键字直接实现继承</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">class</span><span style="color:#FFCB6B;"> Person</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;">  constructor</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">name</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;">    this.</span><span style="color:#BABED8;">name</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> name</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 原型方法</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 即 Person.prototype.getName = function() { }</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 下面可以简写为 getName() { // ... }</span></span>
<span class="line"><span style="color:#F07178;">  getName</span><span style="color:#89DDFF;"> =</span><span style="color:#C792EA;"> function</span><span style="color:#89DDFF;"> ()</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">    console</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">log(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Person</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> this.</span><span style="color:#BABED8;">name</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#FFCB6B;"> Gamer</span><span style="color:#C792EA;"> extends</span><span style="color:#FFCB6B;"> Person</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;">  constructor</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">name</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> age</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 子类中存在构造函数，则需要在使用 ‘this’ 之前首先调用 super()</span></span>
<span class="line"><span style="color:#BABED8;">    super</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">name</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">    this.</span><span style="color:#BABED8;">age</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> age</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;"> </span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> asuna </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> new</span><span style="color:#82AAFF;"> Gamer</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Asuna</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;"> 20</span><span style="color:#BABED8;">)</span></span>
<span class="line"><span style="color:#BABED8;">asuna</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getName</span><span style="color:#BABED8;">() </span><span style="color:#676E95;font-style:italic;">// 成功访问到父类的方法</span></span></code></pre></div><p>利用 <code>babel</code> 工具进行转换， 我们会发现 <code>extends</code> 实际采用的方式也是寄生组合式方式进行继承的，证明这种方式是比较好的解决继承的方式</p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><img src="`+t+'" alt="类的继承"><p>通过 <code>Object.create</code> 来划分不同的继承方式，最后的寄生组合式继承方式是通过组合继承改造之后的最优的继承方式，而 <code>extends</code> 的语法糖和寄生组合继承的方式基本类似</p><h2 id="文章来源" tabindex="-1">文章来源 <a class="header-anchor" href="#文章来源" aria-label="Permalink to &quot;文章来源&quot;">​</a></h2>',51);function F(D,y,i,B,A,E){const s=n;return l(),p("div",null,[r,o(s,{title:"JavaScript如何实现继承",href:"https://vue3js.cn/interview/JavaScript/inherit.html#%E4%B8%80%E3%80%81%E6%98%AF%E4%BB%80%E4%B9%88"})])}const u=a(c,[["render",F]]);export{h as __pageData,u as default};
