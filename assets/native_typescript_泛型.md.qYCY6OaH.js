import{_ as a,o as l,c as p,a as n,a8 as s,aQ as o,aR as e,aS as t,aT as c}from"./chunks/framework.QttzOlP4.js";const h=JSON.parse('{"title":"TS 泛型","description":"","frontmatter":{},"headers":[],"relativePath":"native/typescript/泛型.md","filePath":"native/typescript/泛型.md","lastUpdated":1711377732000}'),r={name:"native/typescript/泛型.md"},F=s(`<h1 id="ts-泛型" tabindex="-1">TS 泛型 <a class="header-anchor" href="#ts-泛型" aria-label="Permalink to &quot;TS 泛型&quot;">​</a></h1><h3 id="定义" tabindex="-1">定义 <a class="header-anchor" href="#定义" aria-label="Permalink to &quot;定义&quot;">​</a></h3><p>在 TypeScript 中，泛型（Generics）是一种强大的类型工具，它允许我们编写可重用、灵活和类型安全的代码。泛型允许我们在定义函数、类或接口时使用类型参数，这些类型参数在使用时可以被动态地指定具体的类型。</p><p><strong>特点：</strong></p><blockquote><p>不是事先定义好类型，而是在使用的时候再指定具体类型</p></blockquote><h3 id="_1-数组泛型-array-generic" tabindex="-1">1. 数组泛型(Array Generic) <a class="header-anchor" href="#_1-数组泛型-array-generic" aria-label="Permalink to &quot;1. 数组泛型(Array Generic)&quot;">​</a></h3><p>我们在指定一个数组的类型时，可以使用 <strong>类型 + 中括号</strong> 表示法来定义，例如： <code>number[]</code>来作为数字数组类型，字符串数组为<code>string[]</code>, 除此之外，我们也可以使用泛型<code>Array&lt;elemType&gt;</code>来定义一个数组:</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> arr</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> Array</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">number</span><span style="color:#89DDFF;">&gt;</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> [</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">4</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">5</span><span style="color:#BABED8;">]</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> strArr</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> Array</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">&gt;</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> [</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">a</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">b</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">c</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">]</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> anyArr</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> Array</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">any</span><span style="color:#89DDFF;">&gt;</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> [</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">b</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> [</span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">4</span><span style="color:#BABED8;">]</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> {</span><span style="color:#F07178;">text</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">c</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">},</span><span style="color:#89DDFF;"> null</span><span style="color:#BABED8;">]</span></span></code></pre></div><h3 id="_2-函数泛型" tabindex="-1">2. 函数泛型 <a class="header-anchor" href="#_2-函数泛型" aria-label="Permalink to &quot;2. 函数泛型&quot;">​</a></h3><blockquote><p>函数泛型允许我们编写可以适用多种类型的函数， 提高代码的灵活性和可复用性。</p></blockquote><p><strong>简单的例子</strong> 我们可以实现一个函数<code>createArray</code>, 它可以创建一个指定长度的数组， 并且将每一项填充一个默认值：</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> createArray </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> (</span><span style="color:#BABED8;font-style:italic;">length</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> number</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> value</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> any</span><span style="color:#89DDFF;">):</span><span style="color:#FFCB6B;"> any</span><span style="color:#BABED8;">[] </span><span style="color:#C792EA;">=&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;">  let</span><span style="color:#BABED8;"> results</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> any</span><span style="color:#F07178;">[] </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> []</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  for</span><span style="color:#F07178;"> (</span><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> key</span><span style="color:#89DDFF;"> =</span><span style="color:#F78C6C;"> 0</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> key</span><span style="color:#F07178;"> &lt;</span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> length</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> key</span><span style="color:#89DDFF;">++</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">    results</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">key</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> value</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  return</span><span style="color:#BABED8;"> results</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>上述示例中， 由于不确定填充值<code>value</code>的类型， 使用了<code>any</code>类型来指定类型， 并且返回值也是<code>any</code>类型的数组, 虽然编译不会报错， 但我们无法得到确定的返回值的类型； 这个时候，泛型就派上用场了：</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">  function</span><span style="color:#82AAFF;"> createArray</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;(</span><span style="color:#BABED8;font-style:italic;">length</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;">number</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> value</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> T</span><span style="color:#89DDFF;">):</span><span style="color:#FFCB6B;"> Array</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;">    let</span><span style="color:#BABED8;"> results</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> Array</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;</span><span style="color:#89DDFF;"> =</span><span style="color:#F07178;"> []</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    for</span><span style="color:#F07178;"> (</span><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> key</span><span style="color:#89DDFF;"> =</span><span style="color:#F78C6C;"> 0</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> key</span><span style="color:#F07178;"> &lt; length</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> key</span><span style="color:#89DDFF;">++</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">      results</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">key</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> value</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    return</span><span style="color:#BABED8;"> results</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 箭头函数</span></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> createArray </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> &lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;(</span><span style="color:#BABED8;font-style:italic;">length</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> number</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> value</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> T</span><span style="color:#89DDFF;">):</span><span style="color:#FFCB6B;"> Array</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;">    let</span><span style="color:#BABED8;"> results</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> Array</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;</span><span style="color:#89DDFF;"> =</span><span style="color:#F07178;"> []</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">      for</span><span style="color:#F07178;"> (</span><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> key</span><span style="color:#89DDFF;"> =</span><span style="color:#F78C6C;"> 0</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> key</span><span style="color:#F07178;"> &lt; length</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> key</span><span style="color:#89DDFF;">++</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">        results</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">key</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> value</span></span>
<span class="line"><span style="color:#89DDFF;">      }</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    return</span><span style="color:#BABED8;"> results</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#82AAFF;">  createArray</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;">(</span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">x</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">) </span><span style="color:#676E95;font-style:italic;">// 返回 [&#39;x&#39;, &#39;x&#39;, &#39;x&#39;]</span></span></code></pre></div><p>我们在函数名后使用了<code>&lt;T&gt;</code>, 其中<code>T</code>表示任意类型， 后面的<code>value</code>参数和函数返回值就可以直接使用<code>Array&lt;T&gt;</code>了。 在调用时，我们传入<code>string</code>类型， 表示指定它的类型为字符串， 当然也可以不指定类型， 由类型推断自动推断出来：</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#82AAFF;">createArray</span><span style="color:#BABED8;">(</span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">x</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">) </span><span style="color:#676E95;font-style:italic;">// 返回 [&#39;x&#39;, &#39;x&#39;, &#39;x&#39;], 通过‘x’的类型自动·推断出泛型的类型</span></span></code></pre></div><p><strong>多个类型参数</strong> 定义泛型的时候，可以一次定义多个类型参数：</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">  function</span><span style="color:#82AAFF;"> swap</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">,</span><span style="color:#FFCB6B;"> U</span><span style="color:#89DDFF;">&gt;(</span><span style="color:#BABED8;font-style:italic;">tuple</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> [</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">,</span><span style="color:#FFCB6B;"> U</span><span style="color:#BABED8;">]</span><span style="color:#89DDFF;">):</span><span style="color:#BABED8;"> [</span><span style="color:#FFCB6B;">U</span><span style="color:#89DDFF;">,</span><span style="color:#FFCB6B;"> T</span><span style="color:#BABED8;">] </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    return</span><span style="color:#F07178;"> [</span><span style="color:#BABED8;">tuple</span><span style="color:#F07178;">[</span><span style="color:#F78C6C;">1</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> tuple</span><span style="color:#F07178;">[</span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">]]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#82AAFF;">  swap</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">number</span><span style="color:#89DDFF;">,</span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;">([</span><span style="color:#F78C6C;">7</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">seven</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">])</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> // [&#39;seven&#39;, 7]</span></span></code></pre></div><p>上述示例中， 我们实现了一个<code>swap</code>函数， 用于交换输入中的元组。</p><p><strong>泛型约束</strong> 在函数内部使用泛型参数时， 由于不知道参数的具体类型， 所以不能够随意使用它的属性与方法：</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> loggingIdentity</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;(</span><span style="color:#BABED8;font-style:italic;">arg</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> T</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> &lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;(</span><span style="color:#BABED8;font-style:italic;">arg</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">):</span><span style="color:#FFCB6B;"> T</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">  console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">arg</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">length</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  return</span><span style="color:#BABED8;"> arg</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#82AAFF;">loggingIdentity</span><span style="color:#BABED8;">(</span><span style="color:#F78C6C;">0</span><span style="color:#BABED8;">)</span></span></code></pre></div>`,21),y=s('<img src="'+o+`" alt="ts泛型类型不明确"><p>这个时候， 我们可以在函数参数类型上加上一些限制， 只能让它穿入那些包含<code>length</code>属性的变量， 这个限制操作就是<code>泛型约束</code></p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">interface</span><span style="color:#FFCB6B;"> Lengthwise</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">  length</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> number</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> loggingIdentity</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#C792EA;"> extends</span><span style="color:#FFCB6B;"> Lengthwise</span><span style="color:#89DDFF;">&gt;(</span><span style="color:#BABED8;font-style:italic;">arg</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> T</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> &lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#C792EA;"> extends</span><span style="color:#FFCB6B;"> Lengthwise</span><span style="color:#89DDFF;">&gt;(</span><span style="color:#BABED8;font-style:italic;">arg</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">):</span><span style="color:#FFCB6B;"> T</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">  console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">arg</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">length</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  return</span><span style="color:#BABED8;"> arg</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> arr </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> [</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">4</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">5</span><span style="color:#BABED8;">]</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> num </span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;"> 5</span></span>
<span class="line"><span style="color:#82AAFF;">loggingIdentity</span><span style="color:#BABED8;">(arr)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">loggingIdentity</span><span style="color:#BABED8;">(num) </span><span style="color:#676E95;font-style:italic;">// ts编译错误</span></span></code></pre></div>`,3),D=s('<img src="'+e+`" alt="ts泛型约束限制"><p>多个泛型类型也可以互相约束:</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> copyFileds </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> &lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#C792EA;"> extends</span><span style="color:#FFCB6B;"> U</span><span style="color:#89DDFF;">,</span><span style="color:#FFCB6B;"> U</span><span style="color:#89DDFF;">&gt;(</span><span style="color:#BABED8;font-style:italic;">target</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> T</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> source</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> U</span><span style="color:#89DDFF;">):</span><span style="color:#FFCB6B;"> T</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    for</span><span style="color:#F07178;"> (</span><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> key</span><span style="color:#89DDFF;"> in</span><span style="color:#BABED8;"> source</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">      target</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">key</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> (&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#F07178;">&gt;</span><span style="color:#BABED8;">source</span><span style="color:#F07178;">)[</span><span style="color:#BABED8;">key</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    return</span><span style="color:#BABED8;"> target</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> obj1 </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> {</span><span style="color:#F07178;"> name</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">张三</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;"> }</span></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> obj2 </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> {</span><span style="color:#F07178;"> name</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">张三</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> sex</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">男</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;"> }</span></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> obj3 </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> {</span><span style="color:#F07178;"> age</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 18</span><span style="color:#89DDFF;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">  copyFileds</span><span style="color:#BABED8;">(obj2</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> obj1) </span><span style="color:#676E95;font-style:italic;">//正常编译</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">  copyFileds</span><span style="color:#BABED8;">(obj3</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> obj1) </span><span style="color:#676E95;font-style:italic;">//ts编译报错，obj3缺少来自obj2的 name 属性</span></span></code></pre></div><p>上述示例中，我们使用<code>T</code>、<code>U</code>两个类型字段， 并且指定<code>T</code>继承自<code>U</code>， 这样就保证了<code>T</code>不会出现<code>U</code>不存在的字段</p><img src="`+t+`" alt="ts泛型以及泛型约束"><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> getData </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> &lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#C792EA;"> extends</span><span style="color:#FFCB6B;"> object</span><span style="color:#89DDFF;">,</span><span style="color:#FFCB6B;"> K</span><span style="color:#C792EA;"> extends</span><span style="color:#89DDFF;"> keyof</span><span style="color:#FFCB6B;"> T</span><span style="color:#89DDFF;">&gt;(</span><span style="color:#BABED8;font-style:italic;">obj</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> T</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> key</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> K</span><span style="color:#89DDFF;">):</span><span style="color:#FFCB6B;">T</span><span style="color:#BABED8;">[</span><span style="color:#FFCB6B;">K</span><span style="color:#BABED8;">]  </span><span style="color:#C792EA;">=&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  return</span><span style="color:#BABED8;"> obj</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">key</span><span style="color:#F07178;">]</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> defaultObj </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> {</span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">张三</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> age</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 18</span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#82AAFF;">getData</span><span style="color:#BABED8;">(defaultObj</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">name</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span></span></code></pre></div><p>上述示例中， 我们实现了一个<code>getData</code>的函数， 它的功能是返回目标对象的目标key的值， 关于类型， 我们约定了K的取值范围只能来自终于T的key值， 使用其它的类型会报错</p><img src="`+c+`" alt="ts泛型以及泛型约束"><h3 id="_3-接口泛型" tabindex="-1">3. 接口泛型 <a class="header-anchor" href="#_3-接口泛型" aria-label="Permalink to &quot;3. 接口泛型&quot;">​</a></h3><p>接口泛型允许我们创建可适用于不同类型的接口定义。例如：</p><ul><li>基本用法</li></ul><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">interface</span><span style="color:#FFCB6B;"> IResponse</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">,</span><span style="color:#FFCB6B;"> U</span><span style="color:#89DDFF;">&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">  str</span><span style="color:#89DDFF;"> :</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  num</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> U</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> newName</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> IResponse</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">,</span><span style="color:#FFCB6B;"> number</span><span style="color:#89DDFF;">&gt;</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> {</span><span style="color:#F07178;">str</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">11</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> num</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 22</span><span style="color:#89DDFF;">}</span></span></code></pre></div><p>上述示例中， 我们定义了一个<code>IResponse</code>的接口， 它接受两个类型参数<code>T</code>和<code>U</code>, 通过指定类型参数为<code>number</code>和<code>string</code>,我们创建了一个具体的<code>newName</code>对象， 它的<code>str</code>类型是<code>string</code>,<code>num</code>的类型是<code>number</code>。</p><ul><li><p>定义函数的形状</p><p><strong>类型确定情况</strong></p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">  interface</span><span style="color:#FFCB6B;"> ISearchFunc</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;">    (</span><span style="color:#BABED8;font-style:italic;">source</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> string</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> subString</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> string</span><span style="color:#89DDFF;">):</span><span style="color:#FFCB6B;"> boolean</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> createArray</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;">ISearchFunc</span></span>
<span class="line"><span style="color:#82AAFF;">  createArray</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> (</span><span style="color:#BABED8;font-style:italic;">source</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> string</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> subString</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> string</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    return</span><span style="color:#BABED8;"> source</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">search</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">subString</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">!==</span><span style="color:#89DDFF;"> -</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span></code></pre></div><p><strong>泛型定义函数</strong></p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">interface</span><span style="color:#FFCB6B;"> ICreateArray</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;">  &lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;(</span><span style="color:#BABED8;font-style:italic;">length</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> number</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> value</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> T</span><span style="color:#89DDFF;">):</span><span style="color:#FFCB6B;"> T</span><span style="color:#BABED8;">[]</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> createArray</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> ICreateArray</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> &lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;(</span><span style="color:#BABED8;font-style:italic;">length</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> number</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> value</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> T</span><span style="color:#89DDFF;">):</span><span style="color:#FFCB6B;"> Array</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> result</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;">T</span><span style="color:#F07178;">[] </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> []</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  for</span><span style="color:#F07178;">(</span><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> k</span><span style="color:#89DDFF;"> =</span><span style="color:#F78C6C;"> 1</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> k</span><span style="color:#89DDFF;">&lt;=</span><span style="color:#BABED8;"> length</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> k</span><span style="color:#89DDFF;">++</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">    result</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">k</span><span style="color:#F07178;">]  </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> value</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  return</span><span style="color:#BABED8;"> result</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">createArray</span><span style="color:#BABED8;">(</span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">y</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span></span></code></pre></div><p>也可以提前把泛型定义到接口上</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">  interface</span><span style="color:#FFCB6B;"> ICreateArray</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;">    (</span><span style="color:#BABED8;font-style:italic;">length</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> number</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> value</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> T</span><span style="color:#89DDFF;">):</span><span style="color:#FFCB6B;"> T</span><span style="color:#BABED8;">[]</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> createArray</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> ICreateArray</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">unknown</span><span style="color:#89DDFF;">&gt;</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> &lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;(</span><span style="color:#BABED8;font-style:italic;">length</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> number</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> value</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> T</span><span style="color:#89DDFF;">):</span><span style="color:#FFCB6B;"> Array</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;">    const</span><span style="color:#BABED8;"> result</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;">T</span><span style="color:#F07178;">[] </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> []</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    for</span><span style="color:#F07178;">(</span><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> k</span><span style="color:#89DDFF;"> =</span><span style="color:#F78C6C;"> 1</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> k</span><span style="color:#89DDFF;">&lt;=</span><span style="color:#BABED8;"> length</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> k</span><span style="color:#89DDFF;">++</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">      result</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">k</span><span style="color:#F07178;">]  </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> value</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    return</span><span style="color:#BABED8;"> result</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">createArray</span><span style="color:#BABED8;">(</span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">y</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span></span></code></pre></div><blockquote><p>⚠️注意：此时定义接口类型时候， 需要传入泛型的类型</p></blockquote></li></ul><h3 id="_4-类泛型" tabindex="-1">4. 类泛型 <a class="header-anchor" href="#_4-类泛型" aria-label="Permalink to &quot;4. 类泛型&quot;">​</a></h3><p>与接口类型相似， 泛型也可以用于类的类型定义中</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">  class</span><span style="color:#FFCB6B;"> GenericNumber</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">    zeroValue</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> T</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    add</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> (</span><span style="color:#BABED8;font-style:italic;">x</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> T</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> y</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> T</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#FFCB6B;"> T</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">  let</span><span style="color:#BABED8;"> myGenericNumber </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> new</span><span style="color:#82AAFF;"> GenericNumber</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">number</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">  myGenericNumber</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">zeroValue </span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;"> 0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">  myGenericNumber</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">add</span><span style="color:#89DDFF;"> =</span><span style="color:#C792EA;"> function</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">x</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> y</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span><span style="color:#89DDFF;font-style:italic;"> return</span><span style="color:#BABED8;"> x</span><span style="color:#89DDFF;"> +</span><span style="color:#BABED8;"> y</span><span style="color:#89DDFF;">;</span><span style="color:#89DDFF;"> };</span></span></code></pre></div>`,17);function B(i,A,C,E,d,g){return l(),p("div",null,[F,n(),y,n(),D])}const f=a(r,[["render",B]]);export{h as __pageData,f as default};
