import{_ as l}from"./chunks/CustomLink.HhFLulSs.js";import{_ as p,o,c as e,m as s,J as t,a8 as a}from"./chunks/framework.QttzOlP4.js";const m=JSON.parse('{"title":"2024-03-20 字节面试","description":"","frontmatter":{},"headers":[],"relativePath":"interview/weeky/240320.md","filePath":"interview/weeky/240320.md","lastUpdated":1711015122000}'),c={name:"interview/weeky/240320.md"},r=a(`<h1 id="_2024-03-20-字节面试" tabindex="-1">2024-03-20 字节面试 <a class="header-anchor" href="#_2024-03-20-字节面试" aria-label="Permalink to &quot;2024-03-20 字节面试&quot;">​</a></h1><h2 id="关于vue组件通信" tabindex="-1">关于Vue组件通信 <a class="header-anchor" href="#关于vue组件通信" aria-label="Permalink to &quot;关于Vue组件通信&quot;">​</a></h2><p>常用的组件通信方式有以下几种</p><ul><li><p><strong>props</strong></p></li><li><p><strong>$emit</strong></p></li><li><p><strong>ref 和 defineExpose</strong></p></li><li><p><strong>provide 和 inject</strong></p></li><li><p><strong>v-model</strong></p></li><li><p><strong>pinia</strong></p></li><li><p><strong>mitt</strong></p></li><li><h3 id="props" tabindex="-1">props <a class="header-anchor" href="#props" aria-label="Permalink to &quot;props&quot;">​</a></h3></li></ul><div style="color:#89DDFF;margin:10px 0;">父组件将数据传给子组件，子组件通过props属性接收父组件传递的数据</div><ul><li>子组件 Child.vue:</li></ul><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#C792EA;"> setup</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * 使用 defineProps 函数来定义 Props 的类型和默认值</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * defineProps 不需要引入就可以直接使用</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">*/</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> props </span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;"> defineProps</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 变量 count 是通过父组件传递过来的</span></span>
<span class="line"><span style="color:#F07178;">  count</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">    type</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> Number</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    default</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 0</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><p>上段代码中， 使用<code>defineProps</code>函数来定义props的类型和默认值。</p><ol><li>在 <code>defineProps</code>的参数中，我们可以定义一个对象，其中的每个属性代表一个Prop</li><li>在这个示例中， 我们定义了一个名为 count 的 prop， 它的类型是 Number，并设置了默认值为0</li><li>之后在<code>&lt;template&gt;</code>中, 可以直接使用 count 变量，他是通过父组件传递过来的</li></ol><ul><li>父组件 Parent.vue</li></ul><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#C792EA;"> setup</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 引入 ref 函数， 用于定义响应式数据</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#89DDFF;"> {</span><span style="color:#BABED8;"> ref</span><span style="color:#89DDFF;"> }</span><span style="color:#89DDFF;font-style:italic;"> from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 引入子组件 Child.vue</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#BABED8;"> Child </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">./Child.vue</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//使用 ref 函数创建一个响应式变量count， 初始值为0， 该变量将用于传递给子组件</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> count </span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;"> ref</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">number</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;">(</span><span style="color:#F78C6C;">0</span><span style="color:#BABED8;">)</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">  &lt;</span><span style="color:#F07178;">div</span><span style="color:#C792EA;"> id</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">parent</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    &lt;!-- 将 count 变量传递给子组件 Child --&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">    &lt;</span><span style="color:#F07178;">Child</span><span style="color:#89DDFF;"> :</span><span style="color:#C792EA;">count</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">count</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">/&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">  &lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><p>上面代码中：</p><ol><li>我们使用了 ref 函数创建了一个响应式变量count，初始值为0，该变量1将用于传递给子组件。</li><li>然后再template中， 通过<code>:count=&quot;count&quot;</code>的方式将count变量传递给子组件<code>Child</code></li></ol><p>通过 props， 就实现了一个最简单的父组件到子组件的数据传递</p><ul><li><h3 id="emit" tabindex="-1">$Emit <a class="header-anchor" href="#emit" aria-label="Permalink to &quot;$Emit&quot;">​</a></h3></li></ul><div style="color:#89DDFF;margin:10px 0;">子组件通过$emit方法触发一个自定义事件，并传递给需要的参数。父组件通过在子组件上监听对应的时间，并指定触发事件时的回调函数</div><p><strong>子组件 Child.vue</strong></p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#C792EA;"> setup</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * 使用 defineProps 函数来定义 Props 的类型和默认值</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * defineProps 不需要引入即可直接使用</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> props </span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;"> defineProps</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 变量 count 是通过父组件传递过来的</span></span>
<span class="line"><span style="color:#F07178;">    count</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">      type</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> Number</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">      default</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 0</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span><span style="color:#BABED8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 使用 defineEmits 函数定义了一个名为 changeParentCount 的自定义事件</span></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> emit </span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;"> defineEmits</span><span style="color:#BABED8;">([</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">changeParentCount</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">])</span></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> changeParentCount </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> ()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 通过 emit 方法触发名为 changeParentCount 的自定义事件，并将参数 5 传递给父组件</span></span>
<span class="line"><span style="color:#82AAFF;">    emit</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">changeParentCount</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;"> 5</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">  &lt;</span><span style="color:#F07178;">div</span><span style="color:#C792EA;"> id</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">child</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">    &lt;</span><span style="color:#F07178;">h1</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;">count: </span><span style="color:#89DDFF;">{{</span><span style="color:#BABED8;"> count </span><span style="color:#89DDFF;">}}&lt;/</span><span style="color:#F07178;">h1</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">    &lt;</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;"> @</span><span style="color:#C792EA;">click</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">changeParentCount</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;">更新父组件的count</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">  &lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><p>上段代码中：</p><ol><li><p>我们在<code>&lt;template&gt;</code>的 button中使用 @click=&quot;changeParentCount&quot; 添加点击事件监听器，当按钮被点击时，将调用 changeParentCount 方法，触发父组件中的自定义事件</p></li><li><p>然后使用 defineEmits函数定义了一个名为 changeParentCount的自定义事件。然后通过 emit方法触发名为 changeParentCount 的自定义事件， 并将参数 5 传递给父组件</p></li></ol><p><strong>父组件 Parent.vue</strong></p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#C792EA;"> setup</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 引入 ref 函数， 用于定义响应式数据</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#89DDFF;"> {</span><span style="color:#BABED8;"> ref</span><span style="color:#89DDFF;"> }</span><span style="color:#89DDFF;font-style:italic;"> from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 引入子组件 Child.vue</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#BABED8;"> Child </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">./Child.vue</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 使用 ref 函数创建了一个响应式变量count， 初始值为0，该变量用于传递给子组件</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> count </span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;"> ref</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">number</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;">(</span><span style="color:#F78C6C;">0</span><span style="color:#BABED8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 这个方法用于处理子组件中触发的自定义事件 changeParentCount 并更新父组件中 count 变量的值</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> changeParentCount </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> (</span><span style="color:#BABED8;font-style:italic;">params</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> number</span><span style="color:#89DDFF;">):</span><span style="color:#FFCB6B;">void</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">  count</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">value</span><span style="color:#89DDFF;"> +=</span><span style="color:#BABED8;"> params</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">  &lt;</span><span style="color:#F07178;">div</span><span style="color:#C792EA;"> id</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">parent</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    &lt;!-- 将 count 变量传递给子组件 Child  --&gt;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    &lt;!-- 监听子组件自定义事件 changeParentCount --&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">    &lt;</span><span style="color:#F07178;">Child</span><span style="color:#89DDFF;"> :</span><span style="color:#C792EA;">count</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">count</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> @</span><span style="color:#C792EA;">changeParentCount</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">changeParentCount</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">/&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">  &lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><p>上面这段代码中：</p><ul><li><p>在template中， 我们通过@符号监听子组件自定义事件changeParentCount 并在父组件中执行名为changeParentCount的方法。它接收一个params的参数，然后更新父组件中count变量的值</p></li><li><h3 id="ref-和-defineexpose" tabindex="-1">ref 和 defineExpose <a class="header-anchor" href="#ref-和-defineexpose" aria-label="Permalink to &quot;ref 和 defineExpose&quot;">​</a></h3></li></ul><div style="color:#89DDFF;margin:10px 0;"> 在Vue3中， ref函数除了可以用于定义一个响应式的变量或引用之外，还可以获取DOM组件实例。 </div><div style="color:#89DDFF;margin:10px 0;">而 defineExpose适用于将组建内部的属性和方法暴露给父组件或者其他组件使用。通过这种方式，我们可以定义哪些部分可以从组件外部访问和调用。</div><p><strong>子组件Child.vue</strong></p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#C792EA;"> setup</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 引入 ref 函数，用于定义响应式数据</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  import</span><span style="color:#89DDFF;"> {</span><span style="color:#BABED8;"> ref</span><span style="color:#89DDFF;"> }</span><span style="color:#89DDFF;font-style:italic;"> from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 定义变量和方法</span></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> msg </span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;"> ref</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">我是子组件中的数据</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> childMethod </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> ():</span><span style="color:#FFCB6B;">void</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">    console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">我是子组件中的方法</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // defineExpose 对外暴露组件内部的属性和方法，不需要引入，直接使用</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 将属性 msg 和方法 childMethod 暴露给父组件</span></span>
<span class="line"><span style="color:#82AAFF;">  defineExpose</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">{</span><span style="color:#BABED8;"> msg</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> childMethod </span><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><p>上面这段代码中</p><ol><li><p>我们定义了一个 msg 变量和一个childMethod的方法。</p></li><li><p>然后使用 defineExpose函数将msg和childMethod对外暴露出去</p></li></ol><p>这样， 我们在父组件中就可以访问子组件的msg属性或者调用 childMethod 方法</p><p><strong>父组件Parent.vue</strong></p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#C792EA;"> setup</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 引入响应式ref</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  import</span><span style="color:#89DDFF;"> {</span><span style="color:#BABED8;"> ref</span><span style="color:#89DDFF;"> }</span><span style="color:#89DDFF;font-style:italic;"> from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 引入子组件 Child.vue</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  import</span><span style="color:#BABED8;"> Child </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">./Child.vue</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 获取子组件DOM实例</span></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> childRef </span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;"> ref</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">null</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 该方法用于获取子组件对外暴露的属性和方法</span></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> getChildPropertyAndMethod </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> ()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 获取子组件对外暴露的属性</span></span>
<span class="line"><span style="color:#BABED8;">    console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">childRef</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">value</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">msg</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 调用子组件对外暴露的方法</span></span>
<span class="line"><span style="color:#BABED8;">    childRef</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">value</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">childMethod</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">  &lt;</span><span style="color:#F07178;">div</span><span style="color:#C792EA;"> id</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">parent</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">    &lt;</span><span style="color:#F07178;">Child</span><span style="color:#C792EA;"> ref</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">childRef</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">/&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">    &lt;</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;"> @</span><span style="color:#C792EA;">click</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">getChildPropertyAndMethod</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;">获取子组件对外暴露的属性和方法</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">  &lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><p>上段代码中</p><ol><li><p>我们在 template子组件Child身上绑定了一个ref，然后通过<code>const childRef = ref(null)</code> 来获取子组件的DOM实例</p></li><li><p>然后给button绑定了一个点击事件 getChildPropertyAndMethod，该方法用于获取子组件对外暴露的属性和方法</p></li><li><p>此时，点击按钮，在控制台中可以看到打印出子组件的数据和方法的结果</p></li></ol><p>总结：这种方式之间的通信，主要是在子组件内部，将属性和方法暴露出去，然后再子组件中，先获取到子组件的DOM实例，然后就可以访问子组件的属性和调用子组件的方法了。</p><ul><li><h3 id="provide-和-inject" tabindex="-1">provide 和 inject <a class="header-anchor" href="#provide-和-inject" aria-label="Permalink to &quot;provide 和 inject&quot;">​</a></h3><ul><li><div style="color:#89DDFF;margin:10px 0;">provide是在父组件中定义的方法，用于提供数据给子组件</div> 它接受两个参数，第一个参数是一个字符串或者一个Symbol类型的键，用于识别提供的数据。第二个参数是要提供的数据本身。 </li></ul><p>这个数据可以是响应式的对象、响应式的ref、reactive对象、函数等。父组件中使用provide提供数据后，所有的子组件都可以通过inject来访问这些数据。</p><ul><li><div style="color:#89DDFF;margin:10px 0;">inject时在子组件中使用的方法，勇于接受父组件提供的数据。</div>它接收一个参数，即要注入的数据的键。 </li></ul><p>在子组件中使用inject时，可以直接使用接收到的数据，而不需要再组件的配置选项中声明这些数据。</p></li></ul><p><strong>父组件Parent.vue</strong></p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#C792EA;"> setup</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * 引入 ref 函数，用于定义响应式数据</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * 引入 provide，用于提供数据给所有子组件</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#89DDFF;"> {</span><span style="color:#BABED8;"> ref</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> provide</span><span style="color:#89DDFF;"> }</span><span style="color:#89DDFF;font-style:italic;"> from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 引入子组件1和子组件2</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#BABED8;"> Child1 </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">./Child1.vue</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#BABED8;"> Child2 </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">./Child2.vue</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 定义一个 message 响应式数据</span></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> message </span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;"> ref</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">我是父组件的数据</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  //使用provide 将数据message注入， 并且提供给所有子组件</span></span>
<span class="line"><span style="color:#82AAFF;">  provide</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">message</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> message)</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">  &lt;</span><span style="color:#F07178;">div</span><span style="color:#C792EA;"> id</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">parent</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">    &lt;</span><span style="color:#F07178;">Child1</span><span style="color:#89DDFF;">/&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">    &lt;</span><span style="color:#F07178;">Child2</span><span style="color:#89DDFF;">/&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">  &lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><p><strong>子组件Child1.vue</strong></p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#C792EA;"> setup</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#89DDFF;"> {</span><span style="color:#BABED8;"> inject</span><span style="color:#89DDFF;"> }</span><span style="color:#89DDFF;font-style:italic;"> from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//使用inject 获取来自父组件的数据 message</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> parentMessage </span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;"> inject</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">message</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">  &lt;</span><span style="color:#F07178;">div</span><span style="color:#C792EA;"> id</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">child</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">    &lt;</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;">子组件1</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> {{</span><span style="color:#BABED8;"> parentMessage </span><span style="color:#89DDFF;">}}&lt;/</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">  &lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><p><strong>子组件Child2.vue</strong></p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#C792EA;"> setup</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#89DDFF;"> {</span><span style="color:#BABED8;"> inject</span><span style="color:#89DDFF;"> }</span><span style="color:#89DDFF;font-style:italic;"> from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//使用inject 获取来自父组件的数据 message</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> parentMessage </span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;"> inject</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">message</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">  &lt;</span><span style="color:#F07178;">div</span><span style="color:#C792EA;"> id</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">child</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">    &lt;</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;">子组件2</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> {{</span><span style="color:#BABED8;"> parentMessage </span><span style="color:#89DDFF;">}}&lt;/</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">  &lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><p>上面的代码中：</p><ol><li><p>我们在父组件 Parent.vue 中定义了一个响应式数据 message</p></li><li><p>然后使用 provide 将数据 message 提供给所有子组件</p></li><li><p>在子组件 Child1 和 Child2 中，我们使用 inject 获取来自父组件的数据 message。</p></li><li><p>此时，在页面中，我们可以看到子组件获取到的父组件数据。</p></li></ol><p><strong>除了获取数据，我们也可以修改数据：</strong></p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#C792EA;"> setup</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  import</span><span style="color:#89DDFF;"> {</span><span style="color:#BABED8;"> inject</span><span style="color:#89DDFF;"> }</span><span style="color:#89DDFF;font-style:italic;"> from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 使用 inject 获取来自父组件的数据 message</span></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> parentMessage </span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;"> inject</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">message</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 该方法用于更改父组件的message</span></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> changeParentMessage </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> ()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">    parentMessage</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">value</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">我更改了message值</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">  &lt;</span><span style="color:#F07178;">div</span><span style="color:#C792EA;"> id</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">child</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">    &lt;</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;">子组件1: </span><span style="color:#89DDFF;">{{</span><span style="color:#BABED8;"> parentMessage </span><span style="color:#89DDFF;">}}&lt;/</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">    &lt;</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;"> @</span><span style="color:#C792EA;">click</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">changeParentMessage</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;">更改父组件message</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">  &lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><p>上面这段代码中：</p><ol><li><p>在子组件 Child1 中，我们定义了一个 changeParentMessage 函数，它更新了来自父组件的 message 值。</p></li><li><p>由于 message 在父组件中是响应式的，所以更新后该值将自动反映在父组件的视图中。</p></li><li><p>此时，我们点击一下按钮，子组件1和子组件2的值都会被更改。</p></li></ol><p>总结：过使用 provide 和 inject，数据能够在父组件和子组件之间进行传递和共享，实现了跨组件的通信。</p><ul><li><h3 id="v-model" tabindex="-1">v-model <a class="header-anchor" href="#v-model" aria-label="Permalink to &quot;v-model&quot;">​</a></h3></li></ul><div style="color:#89DDFF;margin:10px 0;"> v-model可以同事支持多个数据双向绑定。 </div><p><strong>子组件Child.vue</strong></p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#C792EA;"> setup</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> emit </span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;"> defineEmits</span><span style="color:#BABED8;">([</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">update:name</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">update:age</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">])</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> changeParentMsg </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> ()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#82AAFF;">  emit</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">update:name</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Steven</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#82AAFF;">  emit</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">update:age</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;"> 36</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">  &lt;</span><span style="color:#F07178;">div</span><span style="color:#C792EA;"> id</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Child</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">    &lt;</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;"> @</span><span style="color:#C792EA;">click</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">changeParentMsg</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;">更新父组件中的name和age</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">  &lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><p><strong>父组件Parent.vue</strong></p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#C792EA;"> setup</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 引入 ref 函数，用于定义响应式数据</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  import</span><span style="color:#89DDFF;"> {</span><span style="color:#BABED8;"> ref</span><span style="color:#89DDFF;"> }</span><span style="color:#89DDFF;font-style:italic;"> from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 引入子组件</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  import</span><span style="color:#BABED8;"> Child </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">./Child.vue</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 定义两个响应式的变量</span></span>
<span class="line"><span style="color:#C792EA;">  let</span><span style="color:#BABED8;"> name </span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;"> ref</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Echo</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">  let</span><span style="color:#BABED8;"> age </span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;"> ref</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">number</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;">(</span><span style="color:#F78C6C;">26</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">  &lt;</span><span style="color:#F07178;">div</span><span style="color:#C792EA;"> id</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">parent</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">    &lt;</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;">父组件Name：</span><span style="color:#89DDFF;">{{</span><span style="color:#BABED8;"> name </span><span style="color:#89DDFF;">}}&lt;/</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">    &lt;</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;">父组件Age： </span><span style="color:#89DDFF;">{{</span><span style="color:#BABED8;"> age </span><span style="color:#89DDFF;">}}&lt;/</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    &lt;!-- 使用 v-model 将父组件的 name 和 age 双向绑定到子组件的 name 和 age 上 --&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">    &lt;</span><span style="color:#F07178;">Child</span><span style="color:#C792EA;"> v-model</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">name</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">name</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;"> v-model</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">age</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">age</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">/&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">  &lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><p>面的代码中：</p><ol><li><p>我们在父组件内部使用 ref 函数定义了两个响应式变量 name 和 age，并给它们分别赋予初始值。然后在 template 中使用 v-model 将父组件的 name 和 age 双向绑定到子组件的 name 和 age 上。</p></li><li><p>在子组件内部，通过 defineEmits([&#39;name&#39;, &#39;age&#39;])，我们定义了两个事件：update:name 和 update:age。这样，父组件可以监听并处理这两个事件。然后我们 在 template 中定义了一个按钮，并在 script 中实现 changeParentMsg 的方法。当按钮被点击时，这个方法会调用 emit 方法来派发两个事件。</p></li><li><p>通过 emit(&#39;update:name&#39;, &#39;Steven&#39;)，我们触发了一个名为 update:name 的事件，并传递了一个参数 &#39;Steven&#39;。通过这个事件，我们可以告知父组件更新它的 name 值为 &#39;Steven&#39;。</p></li><li><p>通过 emit(&#39;update:age&#39;, 36)，我们触发了一个名为 update:age 的事件，并传递了一个参数 36。通过这个事件，我们可以告知父组件更新它的 age 值为 36。</p></li></ol><p>通过这样的设置，当父组件中的 name 或 age 发生变化时，它们会自动更新到子组件中。同时，当子组件中的 name 或 age 改变时，它们会通过 update:name 和 update:age 事件反馈给父组件，父组件会相应地更新自己的 name 和 age。这就实现了父子组件之间的双向绑定。</p><ul><li><h3 id="mitt" tabindex="-1">mitt <a class="header-anchor" href="#mitt" aria-label="Permalink to &quot;mitt&quot;">​</a></h3></li></ul><p>在Vue3中，可以使用第三方库mitt来实现组件之间的通信。</p><div style="color:#89DDFF;margin:10px 0;">mitt是一个简单且强大的事件总线库(类似于Vue2中的 EventBus), 它提供了一种方便的方式来在不同组件中传递事件和数据。</div><p>首先 安装 mitt.js</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#FFCB6B;">npm</span><span style="color:#C3E88D;"> install</span><span style="color:#C3E88D;"> mitt</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">#     or</span></span>
<span class="line"><span style="color:#FFCB6B;">yarn</span><span style="color:#C3E88D;"> install</span><span style="color:#C3E88D;"> mitt</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">#     or</span></span>
<span class="line"><span style="color:#FFCB6B;">pnpm</span><span style="color:#C3E88D;"> install</span><span style="color:#C3E88D;"> mitt</span></span></code></pre></div><p>接着，创建一个event bus</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#BABED8;"> mitt </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">mitt</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> bus </span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;"> mitt</span><span style="color:#BABED8;">()</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#89DDFF;font-style:italic;"> default</span><span style="color:#BABED8;"> bus</span></span></code></pre></div><p>在需要通信的组件中，导入 event bus 对象并进行事件的监听和触发:</p><p><strong>组件First.vue</strong></p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#C792EA;"> setup</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  import</span><span style="color:#BABED8;"> mitt </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">./mitt</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> emitEvent </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> ()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">    mitt</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">emit</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">updateName</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;"> 36</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">  &lt;</span><span style="color:#F07178;">div</span><span style="color:#C792EA;"> id</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">first</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">    &lt;</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;"> @</span><span style="color:#C792EA;">click</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">emitEvent</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;">更新name和age</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">  &lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><p><strong>组件Second.vue</strong></p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#C792EA;"> setup</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  import</span><span style="color:#BABED8;"> mitt </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">../mitt</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  import</span><span style="color:#89DDFF;"> {</span><span style="color:#BABED8;"> ref</span><span style="color:#89DDFF;"> }</span><span style="color:#89DDFF;font-style:italic;"> from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">  let</span><span style="color:#BABED8;"> name </span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;"> ref</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Echo</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">  let</span><span style="color:#BABED8;"> age </span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;"> ref</span><span style="color:#BABED8;">(</span><span style="color:#F78C6C;">26</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">  mitt</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">on</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">updateName</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> (</span><span style="color:#BABED8;font-style:italic;">data</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">    name</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">value</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">Steven</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">    age</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">value</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> data</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">  &lt;</span><span style="color:#F07178;">div</span><span style="color:#C792EA;"> id</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">second</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">    &lt;</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;">name: </span><span style="color:#89DDFF;">{{</span><span style="color:#BABED8;"> name </span><span style="color:#89DDFF;">}}&lt;/</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">    &lt;</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;">age: </span><span style="color:#89DDFF;">{{</span><span style="color:#BABED8;"> age </span><span style="color:#89DDFF;">}}&lt;/</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">  &lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><p>上面这个例子中：</p><ol><li><p>我们创建了一个名为 mitt 的事件总线对象，并在两个组件中进行了引用。</p></li><li><p>在 First 组件中，当按钮被点击后，我们使用 mitt.emit 方法触发了一个自定义事件，并传递了一些数据。</p></li><li><p>在 Second 组件中，我们使用 mitt.on 方法监听了 updateName 事件，并在回调函数中接收到了传递的数据。然后我们将接收到的数据赋值给相应的属性，在模板中展示出来。</p></li></ol><p>通过这种方式，我们可以在不同的组件中实现通信，First 组件可以通过事件总线发送事件和数据，Second 组件则监听事件并接收到数据进行处理。</p><ul><li><h3 id="pinia" tabindex="-1">Pinia <a class="header-anchor" href="#pinia" aria-label="Permalink to &quot;Pinia&quot;">​</a></h3><p>pinia 是一个为 vue3 设计的状态管理库，类似 Vuex 的设计模式，通过定义 store、状态、getter 和 action，来统一管理应用程序的状态和逻辑。</p></li></ul><h2 id="react中遇到过什么坑" tabindex="-1">React中遇到过什么坑 <a class="header-anchor" href="#react中遇到过什么坑" aria-label="Permalink to &quot;React中遇到过什么坑&quot;">​</a></h2><h3 id="不正确地使用状态更新" tabindex="-1">不正确地使用状态更新 <a class="header-anchor" href="#不正确地使用状态更新" aria-label="Permalink to &quot;不正确地使用状态更新&quot;">​</a></h3><p>直接修改状态（state）而不使用 setState 方法会导致不可预测的结果，因为 React 无法检测到状态的更改。正确的做法是始终使用 setState 来更新状态。</p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#676E95;font-style:italic;">  // 错误的方式</span></span>
<span class="line"><span style="color:#89DDFF;">this.</span><span style="color:#BABED8;">state</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">counter </span><span style="color:#89DDFF;">+=</span><span style="color:#F78C6C;"> 1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 正确的方式</span></span>
<span class="line"><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">setState</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> counter</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> this.</span><span style="color:#BABED8;">state</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">counter </span><span style="color:#89DDFF;">+</span><span style="color:#F78C6C;"> 1</span><span style="color:#89DDFF;"> }</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h3 id="使用索引作为-key" tabindex="-1">使用索引作为 key <a class="header-anchor" href="#使用索引作为-key" aria-label="Permalink to &quot;使用索引作为 key&quot;">​</a></h3><p>在渲染列表时，将索引作为 React 元素的 key 值可能会导致性能问题和不稳定的 UI 行为。最好使用具有唯一标识的属性作为 key。</p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#676E95;font-style:italic;">  // 错误的方式</span></span>
<span class="line"><span style="color:#89DDFF;">{</span><span style="color:#BABED8;">items</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">map</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">item</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> index</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> &lt;</span><span style="color:#F07178;">div</span><span style="color:#C792EA;"> key</span><span style="color:#89DDFF;">={</span><span style="color:#BABED8;">index</span><span style="color:#89DDFF;">}&gt;{</span><span style="color:#BABED8;">item</span><span style="color:#89DDFF;">}&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 正确的方式</span></span>
<span class="line"><span style="color:#89DDFF;">{</span><span style="color:#BABED8;">items</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">map</span><span style="color:#F07178;">(</span><span style="color:#BABED8;font-style:italic;">item</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> &lt;</span><span style="color:#F07178;">div</span><span style="color:#C792EA;"> key</span><span style="color:#89DDFF;">={</span><span style="color:#BABED8;">item</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">id</span><span style="color:#89DDFF;">}&gt;{</span><span style="color:#BABED8;">item</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">name</span><span style="color:#89DDFF;">}&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">}</span></span></code></pre></div><h3 id="忘记绑定事件处理程序" tabindex="-1">忘记绑定事件处理程序 <a class="header-anchor" href="#忘记绑定事件处理程序" aria-label="Permalink to &quot;忘记绑定事件处理程序&quot;">​</a></h3><p>在类组件中，如果没有将事件处理程序绑定到实例上，可能会导致 this 关键字在事件处理程序中指向 undefined。可以使用箭头函数或在构造函数中绑定方法来解决这个问题。</p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#676E95;font-style:italic;">  // 错误的方式</span></span>
<span class="line"><span style="color:#89DDFF;">  &lt;</span><span style="color:#F07178;">button</span><span style="color:#C792EA;"> onClick</span><span style="color:#89DDFF;">={this.</span><span style="color:#BABED8;">handleClick</span><span style="color:#89DDFF;">}&gt;</span><span style="color:#BABED8;">Click me</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 正确的方式</span></span>
<span class="line"><span style="color:#89DDFF;">  &lt;</span><span style="color:#F07178;">button</span><span style="color:#C792EA;"> onClick</span><span style="color:#89DDFF;">={this.</span><span style="color:#BABED8;">handleClick</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">bind</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">this</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">}&gt;</span><span style="color:#BABED8;">Click me</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><h3 id="忘记在条件渲染中处理-null-或-undefined" tabindex="-1">忘记在条件渲染中处理 null 或 undefined <a class="header-anchor" href="#忘记在条件渲染中处理-null-或-undefined" aria-label="Permalink to &quot;忘记在条件渲染中处理 null 或 undefined&quot;">​</a></h3><p>如果在条件渲染中返回 null 或 undefined，可能会导致 TypeError。请确保在返回之前处理这些情况。</p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 错误的方式</span></span>
<span class="line"><span style="color:#89DDFF;">{</span><span style="color:#BABED8;">condition</span><span style="color:#89DDFF;"> &amp;&amp;</span><span style="color:#89DDFF;"> &lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;{</span><span style="color:#BABED8;">undefinedVariable</span><span style="color:#89DDFF;">}&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 正确的方式</span></span>
<span class="line"><span style="color:#89DDFF;">{</span><span style="color:#BABED8;">condition</span><span style="color:#89DDFF;"> &amp;&amp;</span><span style="color:#BABED8;"> undefinedVariable</span><span style="color:#89DDFF;"> &amp;&amp;</span><span style="color:#89DDFF;"> &lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;{</span><span style="color:#BABED8;">undefinedVariable</span><span style="color:#89DDFF;">}&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;}</span></span></code></pre></div><h3 id="在渲染函数中定义函数" tabindex="-1">在渲染函数中定义函数 <a class="header-anchor" href="#在渲染函数中定义函数" aria-label="Permalink to &quot;在渲染函数中定义函数&quot;">​</a></h3><p>在渲染函数中定义新的函数，可能会导致组件重新渲染时创建新的函数实例，影响性能。应该将这些函数提升到组件外部或使用 useCallback Hook。</p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 错误的方式</span></span>
<span class="line"><span style="color:#82AAFF;">render</span><span style="color:#BABED8;">() </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  return</span><span style="color:#F07178;"> (</span></span>
<span class="line"><span style="color:#89DDFF;">    &lt;</span><span style="color:#F07178;">div</span><span style="color:#C792EA;"> onClick</span><span style="color:#89DDFF;">={()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> this.</span><span style="color:#82AAFF;">handleClick</span><span style="color:#BABED8;">()</span><span style="color:#89DDFF;">}&gt;</span><span style="color:#BABED8;">Click me</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#F07178;">  )</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 正确的方式</span></span>
<span class="line"><span style="color:#82AAFF;">handleClick</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> ()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 处理点击事件</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">render</span><span style="color:#BABED8;">() </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  return</span><span style="color:#F07178;"> (</span></span>
<span class="line"><span style="color:#89DDFF;">    &lt;</span><span style="color:#F07178;">div</span><span style="color:#C792EA;"> onClick</span><span style="color:#89DDFF;">={this.</span><span style="color:#BABED8;">handleClick</span><span style="color:#89DDFF;">}&gt;</span><span style="color:#BABED8;">Click me</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#F07178;">  )</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h2 id="ssr中node的配置消耗的qps" tabindex="-1">SSR中Node的配置消耗的QPS <a class="header-anchor" href="#ssr中node的配置消耗的qps" aria-label="Permalink to &quot;SSR中Node的配置消耗的QPS&quot;">​</a></h2><p>△ SSR之前接触并不深刻， 暂时留个坑 通过Next.js 和 Nuxt.js配置时深入了解一下</p><h2 id="react的生命周期" tabindex="-1">React的生命周期 <a class="header-anchor" href="#react的生命周期" aria-label="Permalink to &quot;React的生命周期&quot;">​</a></h2><p>在旧版的 React 中，组件生命周期包括三个阶段：挂载阶段（Mounting）、更新阶段（Updating）、卸载阶段（Unmounting）。每个阶段都对应着一系列的生命周期方法，用于在不同的时机执行特定的逻辑。</p><p>但在新版的 React 中，推荐使用函数式组件和 React Hooks 来编写组件，这种方式下生命周期方法被简化了。</p><h3 id="挂载阶段-mounting" tabindex="-1">挂载阶段（Mounting） <a class="header-anchor" href="#挂载阶段-mounting" aria-label="Permalink to &quot;挂载阶段（Mounting）&quot;">​</a></h3><ul><li><p><strong>constructor()</strong>：构造函数，在组件被创建时调用，用于初始化状态（state）或绑定事件处理方法。</p></li><li><p><strong>static getDerivedStateFromProps(props, state)</strong>：静态方法，用于根据 props 来更新 state。在组件被创建和每次接收到新的 props 时都会调用。</p></li><li><p><strong>render()</strong>：必选方法，返回 React 元素的描述。React 会根据此方法的返回值来构建组件的 DOM 树。</p></li><li><p><strong>componentDidMount()</strong>：组件挂载到 DOM 后立即调用，通常用于执行异步操作、订阅事件等初始化工作。</p></li></ul><h3 id="更新阶段-updating" tabindex="-1">更新阶段（Updating） <a class="header-anchor" href="#更新阶段-updating" aria-label="Permalink to &quot;更新阶段（Updating）&quot;">​</a></h3><ul><li><p><strong>static getDerivedStateFromProps(props, state)</strong>：见上文。 shouldComponentUpdate(nextProps, nextState)：决定是否重新渲染组件，可以通过返回 false 来阻止渲染过程。</p></li><li><p><strong>render()</strong>：见上文。</p></li><li><p><strong>getSnapshotBeforeUpdate(prevProps, prevState)</strong>：在 DOM 更新之前获取当前 DOM 的快照，通常用于保存一些需要在更新后恢复的状态。</p></li><li><p><strong>componentDidUpdate(prevProps, prevState, snapshot)</strong>：在 DOM 更新之后立即调用，通常用于执行副作用操作、与其他 JavaScript 框架进行集成等。</p></li></ul><h3 id="卸载阶段-unmounting" tabindex="-1">卸载阶段（Unmounting） <a class="header-anchor" href="#卸载阶段-unmounting" aria-label="Permalink to &quot;卸载阶段（Unmounting）&quot;">​</a></h3><ul><li><strong>componentWillUnmount()</strong>：在组件即将被销毁并从 DOM 中移除之前调用，通常用于清理定时器、取消订阅等收尾工作。</li></ul><p>另外，还有一些过时的生命周期方法（如 componentWillMount、componentWillReceiveProps、componentDidCatch 等），在新版的 React 中已经被标记为不推荐使用。</p><p>需要注意的是，如果使用函数式组件和 React Hooks 编写组件，那么大部分生命周期方法都不再适用。相反，可以使用 useEffect Hook 来代替生命周期方法的功能。</p><h2 id="常用的react-hook-和功能" tabindex="-1">常用的React Hook 和功能 <a class="header-anchor" href="#常用的react-hook-和功能" aria-label="Permalink to &quot;常用的React Hook 和功能&quot;">​</a></h2><h3 id="usestate" tabindex="-1">useState <a class="header-anchor" href="#usestate" aria-label="Permalink to &quot;useState&quot;">​</a></h3><p>用于管理功能组件中的状态</p><h3 id="useeffect" tabindex="-1">useEffect <a class="header-anchor" href="#useeffect" aria-label="Permalink to &quot;useEffect&quot;">​</a></h3><p>用于在功能组件中执行副作用，例如获取数据或订阅事件</p><h3 id="usecontext" tabindex="-1">useContext <a class="header-anchor" href="#usecontext" aria-label="Permalink to &quot;useContext&quot;">​</a></h3><p>用于访问功能组件中React 上下文的值</p><h3 id="useref" tabindex="-1">useRef <a class="header-anchor" href="#useref" aria-label="Permalink to &quot;useRef&quot;">​</a></h3><p>用于创建对跨渲染保留的元素或值的可变引用</p><h3 id="usecallback" tabindex="-1">useCallback <a class="header-anchor" href="#usecallback" aria-label="Permalink to &quot;useCallback&quot;">​</a></h3><p>缓存回调函数，避免在每次渲染时都创建新的回调函数实例</p><p>当回调函数作为prop传递给子组件时，使用 useCallback可以确保子组件在依赖项未变化时不会因为接收到新的函数引起不必要的重新渲染。</p><p>在某些情况下，可以配合 useMemo 使用， 将计算逻辑和函数绑定在一起，从而在依赖项不变时只计算一次</p><h3 id="usememo" tabindex="-1">useMemo <a class="header-anchor" href="#usememo" aria-label="Permalink to &quot;useMemo&quot;">​</a></h3><p>用于缓存计算值，类似于 useCallback，但是它缓存的是普通数值而不是回调函数</p><h3 id="usereducer" tabindex="-1">useReducer <a class="header-anchor" href="#usereducer" aria-label="Permalink to &quot;useReducer&quot;">​</a></h3><p>用于使用reducer函数的管理状态，类似于Redux的工作方式</p><h3 id="uselayouteffect" tabindex="-1">useLayoutEffect <a class="header-anchor" href="#uselayouteffect" aria-label="Permalink to &quot;useLayoutEffect&quot;">​</a></h3><p>类似于 useEffect 但效果在所有DOM突变后同步运行</p><p>这些Hook提供了强大的工具，用于管理状态，处理副作用和重新编辑 React功能组件中的逻辑。</p><h2 id="什么是虚拟滚动" tabindex="-1">什么是虚拟滚动 <a class="header-anchor" href="#什么是虚拟滚动" aria-label="Permalink to &quot;什么是虚拟滚动&quot;">​</a></h2><p>虚拟滚动列表通过只渲染可视区域的列表项，当用户滚动时，动态计算可视区域的起始索引，然后只渲染这部分列表项，避免了一次加载大量数据从而实现平滑的滚动和效果，并且列表移出可视区域时，虚拟滚动列表会回收对应的DOM元素从而降低内存占用。</p><p>虚拟滚动列表的实现原理通常包括以下几个步骤</p><ol><li><p>计算可视区域的高度以及每个列表项的高度。</p></li><li><p>根据滚动条的位置，计算出可视区域的起始索引和结束索引。</p></li><li><p>只渲染起始索引和结束索引之间的列表项。</p></li><li><p>当滚动条位置变化时，重新计算起始索引和结束索引，并更新渲染的列表项。</p></li></ol><h2 id="lighthouse主要使用什么性能指标" tabindex="-1">lightHouse主要使用什么性能指标 <a class="header-anchor" href="#lighthouse主要使用什么性能指标" aria-label="Permalink to &quot;lightHouse主要使用什么性能指标&quot;">​</a></h2><p>lighthouse主要是用来做性能检测的工具，主要用于分析网络应用和网页，收集现代性能指标并提供对开发人员最佳实践的意见。为lighthouse提供一个需要审查的网址，它将针对此页面运行一连串的测试，然后生成一个有关页面性能的报告。</p><h4 id="主要检测指标" tabindex="-1">主要检测指标 <a class="header-anchor" href="#主要检测指标" aria-label="Permalink to &quot;主要检测指标&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">指标</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">性能指标（Performance）</td><td style="text-align:left;">页面的性能评分，包括首次内容绘制（First Contentful Paint）、首次有效绘制（First Meaningful Paint）、首次 CPU 空闲（First CPU Idle）、可交互时间（Time to Interactive）、速度指标（Speed Index）、输入延迟估值（Estimated Input Latency）。</td></tr><tr><td style="text-align:left;">可访问性（Accessibility）</td><td style="text-align:left;">监测页面的可访问性与优化建议。</td></tr><tr><td style="text-align:left;">最佳实践（Best Practice）</td><td style="text-align:left;">页面是否符合最佳实践。</td></tr><tr><td style="text-align:left;">搜索引擎优化（SEO）</td><td style="text-align:left;">页面是否针对搜索引擎结果排名进行了优化。</td></tr><tr><td style="text-align:left;">PWA（Progressive Web App）</td><td style="text-align:left;">验证 PWA 的各个方面的性能情况。</td></tr></tbody></table><h4 id="评分说明" tabindex="-1">评分说明 <a class="header-anchor" href="#评分说明" aria-label="Permalink to &quot;评分说明&quot;">​</a></h4><p>经过检测，Lighthouse 会对上述五个维度给出一个的评估得分，分值范围0-100，主要分为三个档次，分别用红黄绿三种颜色代表：</p><ul><li><div style="color:red;">0 – 49（慢）：红色</div></li><li><div style="color:orange;">50 – 89（平均值）： 橙色</div></li><li><div style="color:green;">90 – 100（快）： 绿色</div></li></ul><blockquote><p>如果没有分数或得分为 0，则很有可能是检测过程发生了错误，比如网络连接状况异常等；如果得分能达到 90 分以上（绿色），则说明网站应用在该方面的评估表现符合最佳实践。</p></blockquote><h4 id="三种使用方式" tabindex="-1">三种使用方式 <a class="header-anchor" href="#三种使用方式" aria-label="Permalink to &quot;三种使用方式&quot;">​</a></h4><ul><li><p>使用 chrome 调试面板中的 LightHouse (推荐)</p></li><li><p>使用 chrome 插件扩展</p></li><li><p>通过命令行使用 LightHouse</p></li></ul><h2 id="跨页面通信使用什么方式呢" tabindex="-1">跨页面通信使用什么方式呢 <a class="header-anchor" href="#跨页面通信使用什么方式呢" aria-label="Permalink to &quot;跨页面通信使用什么方式呢&quot;">​</a></h2><p>跨页面通信是指在Web开发中，不同页面之间进行数据或消息传递的过程。有几种常用的方式可以实现跨页面通信：</p><h3 id="url-参数传递" tabindex="-1">URL 参数传递 <a class="header-anchor" href="#url-参数传递" aria-label="Permalink to &quot;URL 参数传递&quot;">​</a></h3><p>可以通过URL参数在不同页面之间传递数据。例如，在链接中添加参数，然后在目标页面中读取这些参数。但这种方法适用于传递简单的数据，并且会暴露数据在URL中。</p><h3 id="local-storage" tabindex="-1">Local Storage <a class="header-anchor" href="#local-storage" aria-label="Permalink to &quot;Local Storage&quot;">​</a></h3><p>HTML5的Local Storage提供了一种在浏览器中存储数据的方法，这些数据在不同页面之间是共享的。通过在一个页面中写入数据，然后在另一个页面中读取这些数据，实现跨页面通信。但要注意，由于本地存储是同源策略的一部分，因此只能在相同源的页面之间进行通信。</p><h3 id="session-storage" tabindex="-1">Session Storage <a class="header-anchor" href="#session-storage" aria-label="Permalink to &quot;Session Storage&quot;">​</a></h3><p>类似于Local Storage，但是会话存储的数据在会话结束后被清除。与Local Storage相比，Session Storage更适合临时存储会话期间需要传递的数据。</p><h3 id="cookies" tabindex="-1">Cookies <a class="header-anchor" href="#cookies" aria-label="Permalink to &quot;Cookies&quot;">​</a></h3><p>通过设置cookie，在不同页面之间传递数据。但是，cookies的容量有限，并且会随着每个HTTP请求发送到服务器，可能会影响性能。</p><h3 id="postmessage-api" tabindex="-1">PostMessage API <a class="header-anchor" href="#postmessage-api" aria-label="Permalink to &quot;PostMessage API&quot;">​</a></h3><p>PostMessage API允许在不同的窗口或iframe之间安全地发送消息。通过在发送消息的窗口中调用postMessage()方法，然后在接收消息的窗口中监听message事件来实现跨页面通信。</p><h3 id="websocket" tabindex="-1">WebSocket <a class="header-anchor" href="#websocket" aria-label="Permalink to &quot;WebSocket&quot;">​</a></h3><p>WebSocket是一种在客户端和服务器之间进行全双工通信的协议。虽然WebSocket通常用于实时通信，但也可以用于不同页面之间的通信，通过在页面上建立WebSocket连接，可以实现实时的跨页面数据传输。</p><h2 id="跨域的方法" tabindex="-1">跨域的方法 <a class="header-anchor" href="#跨域的方法" aria-label="Permalink to &quot;跨域的方法&quot;">​</a></h2><p>跨域是指在浏览器中，当一个网页向不同域名、不同端口或不同协议的资源发起请求时，会受到浏览器的同源策略限制，这样的请求就称为跨域请求。为了解决跨域请求的限制，可以采用以下方法：</p><h3 id="jsonp-json-with-padding" tabindex="-1">JSONP (JSON with Padding) <a class="header-anchor" href="#jsonp-json-with-padding" aria-label="Permalink to &quot;JSONP (JSON with Padding)&quot;">​</a></h3><p>JSONP 是一种利用 <code>&lt;script&gt;</code> 标签的 GET 请求来实现跨域通信的技术。虽然 JSONP 能解决部分跨域问题，但是只支持 GET 请求，且存在安全性问题（潜在的跨站脚本攻击）。</p><h3 id="cors-cross-origin-resource-sharing" tabindex="-1">CORS (Cross-Origin Resource Sharing) <a class="header-anchor" href="#cors-cross-origin-resource-sharing" aria-label="Permalink to &quot;CORS (Cross-Origin Resource Sharing)&quot;">​</a></h3><p>CORS 是一种由 W3C 提出的跨域解决方案。通过在服务器端设置相应的 HTTP 头部信息（例如 Access-Control-Allow-Origin），来授权浏览器跨域访问。CORS 支持各种类型的 HTTP 请求，并且在安全性方面比 JSONP 更可靠。</p><h3 id="代理服务器" tabindex="-1">代理服务器 <a class="header-anchor" href="#代理服务器" aria-label="Permalink to &quot;代理服务器&quot;">​</a></h3><p>通过在同源服务器上设置代理服务器来转发请求，从而绕过浏览器的跨域限制。当浏览器无法直接访问目标资源时，可以发送请求到同源服务器上的代理服务器，由代理服务器去请求目标资源，并将结果返回给浏览器。</p><h3 id="websocket-1" tabindex="-1">WebSocket <a class="header-anchor" href="#websocket-1" aria-label="Permalink to &quot;WebSocket&quot;">​</a></h3><p>WebSocket 不受同源策略的限制，因此可以用于跨域通信。通过在客户端和服务器之间建立 WebSocket 连接，可以实现双向实时通信。</p><h3 id="使用跨域资源共享-cors-的服务器端代理" tabindex="-1">使用跨域资源共享 (CORS) 的服务器端代理 <a class="header-anchor" href="#使用跨域资源共享-cors-的服务器端代理" aria-label="Permalink to &quot;使用跨域资源共享 (CORS) 的服务器端代理&quot;">​</a></h3><p>如果目标服务器支持 CORS，可以使用服务器端代理向目标服务器发起请求，并将结果返回给客户端。这种方法将跨域问题留给了服务器端处理，而客户端则通过与同源服务器通信来解决跨域问题。</p><h3 id="json-web-token-jwt" tabindex="-1">JSON Web Token (JWT) <a class="header-anchor" href="#json-web-token-jwt" aria-label="Permalink to &quot;JSON Web Token (JWT)&quot;">​</a></h3><p>可以在请求头中使用 JWT 来进行跨域身份验证。JWT 是一种基于 JSON 的安全传输令牌，可以在不同域之间传递身份验证信息。</p><ul><li>Nginx 反向代理：可以使用 Nginx 等反向代理服务器来转发请求，从而实现跨域访问。通过配置 Nginx，在客户端和目标服务器之间建立代理，使得客户端无感知地访问目标服务器资源。</li></ul><h2 id="通过iframe标签跨页面通信遇到过什么问题" tabindex="-1">通过iframe标签跨页面通信遇到过什么问题 <a class="header-anchor" href="#通过iframe标签跨页面通信遇到过什么问题" aria-label="Permalink to &quot;通过iframe标签跨页面通信遇到过什么问题&quot;">​</a></h2><p><strong>同源策略限制</strong>：同源策略会限制在 <code>&lt;iframe&gt;</code> 中加载的页面与父页面之间的通信，除非它们具有相同的协议、域名和端口。这意味着如果 <code>&lt;iframe&gt;</code> 内嵌的页面与父页面不是同源的话，就无法直接进行跨页面通信。</p><p><strong>安全性问题</strong>：如果不小心，通过 <code>&lt;iframe&gt;</code> 进行跨页面通信可能会引入安全漏洞，例如跨站脚本攻击（XSS）。如果在 <code>&lt;iframe&gt;</code> 中加载的页面可以受到恶意代码的控制，那么恶意代码可能会利用此 <code>&lt;iframe&gt;</code> 来获取父页面的敏感信息或执行恶意操作。</p><p><strong>通信机制限制</strong>：通过 <code>&lt;iframe&gt;</code> 进行跨页面通信通常会依赖于一些基于浏览器的通信机制，例如 window.postMessage()。这些机制可能会有一些限制，如不能直接传递复杂的对象，需要在两个页面中都添加相应的监听器等。</p><p><strong>性能问题</strong>：如果在父页面和 <code>&lt;iframe&gt;</code> 中频繁进行通信，可能会影响页面的性能。特别是在某些情况下，由于通信的频繁性，可能会导致页面变得不稳定或响应变慢。</p><p><strong>浏览器兼容性</strong>：不同浏览器对于 <code>&lt;iframe&gt;</code> 中的跨页面通信机制的支持程度可能有所不同，需要谨慎考虑兼容性问题。</p><p>为了解决这些问题，可以采取一些措施，例如使用安全的通信机制（如 window.postMessage()）、确保所有参与通信的页面都受信任、限制通信频率以减少性能影响等。</p><p>登录状态不一致 通过URL传递token参数进行登录态校验</p><p>还有iframe的宽高设置， 第三方页面的滚动 需要设置是根据那个参数滚动的</p><p><strong>△ 微前端的方式</strong></p><p>微前端之前没怎么接触过，在此做了一些了解</p><p>微前端是一种将前端应用程序拆分为更小、更可管理的部分，并独立开发、测试、部署的方法。在微前端架构中，通常会涉及多个独立的前端应用，它们可以是由不同团队开发、使用不同技术栈构建的。以下是实现微前端的一些常见方式：</p><p><strong>组合式架构</strong>：</p><ul><li><p><strong>基于组件的架构</strong>：将前端应用程序拆分为可复用的组件，每个组件负责自己的 UI 和业务逻辑。然后，通过组合这些组件来构建整个应用程序。</p></li><li><p><strong>模块化的架构</strong>：将前端应用程序划分为独立的模块，每个模块负责特定功能或页面。然后，通过模块化的方式组合这些模块来构建整个应用程序。</p></li></ul><p><strong>微服务架构：</strong></p><ul><li><strong>独立部署的前端应用</strong>：将前端应用程序拆分为多个微服务，每个微服务都是独立开发、测试和部署的。通过服务网关或类似的机制来统一管理这些微服务，使其能够协同工作。</li></ul><p><strong>Web Components：</strong></p><ul><li><strong>使用 Web Components 技术</strong>：Web Components 是一种标准化的 Web 技术，可以将前端应用程序拆分为独立的自定义元素（Custom Elements）、 影子 DOM（Shadow DOM）、模板（Template）和样式（CSS）。通过使用 Web Components，可以实现跨框架和跨应用程序的组件复用和集成。</li></ul><p><strong>框架集成：</strong></p><ul><li><strong>集成不同的前端框架</strong>：将不同的前端框架（如 React、Vue、Angular 等）集成到同一个应用程序中。每个团队可以选择他们喜欢的框架来开发他们的部分，并通过共享数据和通信机制来实现整体应用程序的协同工作。</li></ul><p><strong>路由管理：</strong></p><ul><li><strong>统一的路由管理</strong>：通过统一的路由管理机制来组织和管理不同前端应用程序的路由。可以使用路由中间件或服务来实现统一的路由管理，使得用户能够无缝地在不同的前端应用程序之间进行导航。</li></ul><h2 id="有了解过mono-repo开发方式吗" tabindex="-1">有了解过mono-repo开发方式吗 <a class="header-anchor" href="#有了解过mono-repo开发方式吗" aria-label="Permalink to &quot;有了解过mono-repo开发方式吗&quot;">​</a></h2><p>Mono-repo 是指将一个项目的所有代码都存储在一个单独的代码仓库（Repository）中的开发方式。这种开发方式与将不同功能或模块拆分到单独的仓库中（Multi-repo）相对应。Mono-repo 开发方式有以下特点：</p><ul><li><p><strong>集中管理</strong>：所有项目的代码都集中存储在一个代码仓库中，便于管理和维护。开发者可以在单个仓库中查找所有相关的代码，而不需要在多个仓库之间切换。</p></li><li><p><strong>共享代码</strong>：不同项目之间可以共享代码和资源，避免了代码重复的问题。共享的代码可以更容易地被复用和维护，同时也有助于保持一致性。</p></li><li><p><strong>统一构建和部署</strong>：所有项目的构建和部署流程可以集中在一个仓库中管理，便于统一配置和管理。这样可以减少重复的配置工作，并且更容易保持构建和部署的一致性。</p></li><li><p><strong>跨项目协作</strong>：开发者可以更容易地在不同项目之间进行协作和交流，因为所有代码都在同一个仓库中。这有助于促进团队内部的合作和知识共享。</p></li><li><p><strong>版本控制管理</strong>：所有项目的代码都在同一个版本控制系统中管理，可以更容易地跟踪和管理代码的变化历史。这有助于保持代码的可追溯性和可维护性。</p></li><li><p><strong>减少仓库管理成本</strong>：相比于多个仓库，维护一个单一的代码仓库可以减少仓库管理的成本，包括权限管理、备份和恢复、仓库迁移等方面。</p></li></ul><h2 id="usememo可以在其他地方调用么" tabindex="-1">UseMemo可以在其他地方调用么 <a class="header-anchor" href="#usememo可以在其他地方调用么" aria-label="Permalink to &quot;UseMemo可以在其他地方调用么&quot;">​</a></h2><p>在 React 中，useMemo 是一个自定义 Hook，用于在渲染过程中对值进行记忆（memoization）。useMemo 接受一个函数和依赖项数组作为参数，并返回该函数的记忆化版本。记忆化版本只有在依赖项发生变化时才会重新计算，否则将复用上一次计算的结果。</p><p>useMemo 返回的记忆化值可以在组件的渲染过程中使用，但通常不建议在其他地方调用。这是因为 useMemo 是一个与 React 生命周期相关的 Hook，它的计算是在组件 渲染过程中触发的，并且它的行为依赖于组件的依赖项数组的变化。直接在组件之外调用 useMemo 可能会导致不一致的结果或不可预期的行为。</p><p>如果需要在组件之外的地方进行记忆化计算，可以考虑将记忆化逻辑提取到一个普通的函数中，然后在需要的地方调用该函数。这样可以确保记忆化计算的行为独立于组件的渲染过程，同时也更容易进行测试和维护。</p><h2 id="项目中做了哪些性能优化" tabindex="-1">项目中做了哪些性能优化 <a class="header-anchor" href="#项目中做了哪些性能优化" aria-label="Permalink to &quot;项目中做了哪些性能优化&quot;">​</a></h2><h2 id="构建工具有什么性能优化" tabindex="-1">构建工具有什么性能优化 <a class="header-anchor" href="#构建工具有什么性能优化" aria-label="Permalink to &quot;构建工具有什么性能优化&quot;">​</a></h2><h2 id="基本数据类型" tabindex="-1">基本数据类型 <a class="header-anchor" href="#基本数据类型" aria-label="Permalink to &quot;基本数据类型&quot;">​</a></h2>`,199),F=a(`<h2 id="在项目中有自己实现过hook吗-举个例子说明" tabindex="-1">在项目中有自己实现过Hook吗，举个例子说明 <a class="header-anchor" href="#在项目中有自己实现过hook吗-举个例子说明" aria-label="Permalink to &quot;在项目中有自己实现过Hook吗，举个例子说明&quot;">​</a></h2><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#89DDFF;"> {</span><span style="color:#BABED8;"> useState</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> useEffect</span><span style="color:#89DDFF;"> }</span><span style="color:#89DDFF;font-style:italic;"> from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">react</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 自定义 Hook：使用本地存储管理数据</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#82AAFF;"> useLocalStorage</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">key</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> initialValue</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 使用 useState 来声明状态变量</span></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#89DDFF;"> [</span><span style="color:#BABED8;">value</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> setValue</span><span style="color:#89DDFF;">]</span><span style="color:#89DDFF;"> =</span><span style="color:#82AAFF;"> useState</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 初始化状态变量时，从本地存储中获取对应键的值</span></span>
<span class="line"><span style="color:#C792EA;">    const</span><span style="color:#BABED8;"> storedValue</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> localStorage</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getItem</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">key</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 如果本地存储中有对应键的值，则返回该值；否则返回初始值</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    return</span><span style="color:#BABED8;"> storedValue</span><span style="color:#89DDFF;"> ?</span><span style="color:#BABED8;"> JSON</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">parse</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">storedValue</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> initialValue</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 使用 useEffect 来监听 value 的变化，并更新本地存储中对应的值</span></span>
<span class="line"><span style="color:#82AAFF;">  useEffect</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 将 value 转换为 JSON 字符串，并保存到本地存储中</span></span>
<span class="line"><span style="color:#BABED8;">    localStorage</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setItem</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">key</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> JSON</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">stringify</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">value</span><span style="color:#F07178;">))</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  },</span><span style="color:#F07178;"> [</span><span style="color:#BABED8;">key</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> value</span><span style="color:#F07178;">])</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> // 当 key 或 value 发生变化时触发 useEffect</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 返回 value 和一个用于更新 value 的函数</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  return</span><span style="color:#F07178;"> [</span><span style="color:#BABED8;">value</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> setValue</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 使用自定义 Hook 来管理本地存储中的数据</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#82AAFF;"> ExampleComponent</span><span style="color:#89DDFF;">()</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 使用 useLocalStorage 自定义 Hook 来声明状态变量</span></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#89DDFF;"> [</span><span style="color:#BABED8;">name</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> setName</span><span style="color:#89DDFF;">]</span><span style="color:#89DDFF;"> =</span><span style="color:#82AAFF;"> useLocalStorage</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">name</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &#39;&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 渲染一个输入框，并将其值与本地存储中的 name 绑定</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  return</span><span style="color:#F07178;"> (</span></span>
<span class="line"><span style="color:#89DDFF;">    &lt;</span><span style="color:#F07178;">input</span></span>
<span class="line"><span style="color:#C792EA;">      type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">text</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#C792EA;">      value</span><span style="color:#89DDFF;">={</span><span style="color:#BABED8;">name</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#C792EA;">      onChange</span><span style="color:#89DDFF;">={</span><span style="color:#BABED8;font-style:italic;">e</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#82AAFF;"> setName</span><span style="color:#BABED8;">(e</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">target</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">value)</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#C792EA;">      placeholder</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Enter your name</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">    /&gt;</span></span>
<span class="line"><span style="color:#F07178;">  )</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>在这个例子中，我们定义了一个名为 useLocalStorage 的自定义 Hook，它接受一个键和初始值作为参数，并返回一个状态变量和一个用于更新状态变量的函数。在内部，该 Hook 使用 useState 来声明状态变量，并使用 useEffect 来监听状态变量的变化，并将其保存到本地存 储中。然后，我们在 ExampleComponent 中使用了这个自定义 Hook 来管理输入框中的文本值，将其保存到本地存储中。</p>`,3);function D(i,y,d,u,g,h){const n=l;return o(),e("div",null,[r,s("ul",null,[s("li",null,[t(n,{title:"前端数据类型",href:"../../native/javascript/前端数据类型"})])]),F])}const A=p(c,[["render",D]]);export{m as __pageData,A as default};
