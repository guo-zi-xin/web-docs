import{_ as s,o,c as t,a8 as a}from"./chunks/framework.QttzOlP4.js";const m=JSON.parse('{"title":"CSS权重规则","description":"","frontmatter":{},"headers":[],"relativePath":"native/css/css权重规则.md","filePath":"native/css/css权重规则.md","lastUpdated":1700734386000}'),l={name:"native/css/css权重规则.md"},n=a(`<h1 id="css权重规则" tabindex="-1">CSS权重规则 <a class="header-anchor" href="#css权重规则" aria-label="Permalink to &quot;CSS权重规则&quot;">​</a></h1><ul><li><p><strong>优先级</strong></p><p>浏览器通过优先级来判断哪些属性值与一个元素最为相关，从而在该元素上应用这些属性值。优先级是基于不同种类选择器组成的匹配规则</p></li><li><p><strong><code>css</code> 权重优先级作用</strong></p></li></ul><p>在同一个元素使用不同的方式，声明了相同的一条或多条 <code>css</code> 规则，<strong>浏览器会通过权重来判断哪一种方式的声明，与这个元素最为相关，从而在该元素上应用这个声明方式声明的所有 <code>css</code> 规则</strong>。</p><ul><li>优先级就是分配给指定的 <code>CSS</code> 声明的一个权重，它由 匹配的选择器中的 每一种选择器类型的 数值 决定。</li><li>而当优先级与多个 <code>CSS</code> 声明中任意一个声明的优先级相等的时候，<code>CSS</code> 中最后的那个声明将会被应用到元素上。</li><li>当同一个元素有多个声明的时候，优先级才会有意义。因为每一个直接作用于元素的 <code>CSS</code> 规则总是会接管/覆盖（<code>take over</code>）该元素从祖先元素继承而来的规则。</li></ul><hr><ul><li><p><strong>选择器类型</strong></p><p>选择器类型有很多种 下面的选择器的权重是递增的</p><ol><li>类型选择器（元素选择器，如 <code>&lt;div&gt;</code>标签这些）、伪元素选择器（如 <code>::before</code>， <code>::after</code>）</li><li>class选择器(类名选择器) 、伪类选择器（<code>:active</code>, <code>:focus</code>,<code>:hover</code>,<code>:visited</code>这些）、属性选择器（例如<code>[type=&quot;radio&quot;]</code>）</li><li>ID选择器</li><li>行内样式</li><li>!important</li></ol><ul><li>通过设置元素选择器为1来做对比各种选择器的权重关系</li></ul><table><thead><tr><th>Name</th><th>权重数字</th></tr></thead><tbody><tr><td>元素选择器</td><td>1</td></tr><tr><td>类/伪类选择器</td><td>10</td></tr><tr><td>ID选择器</td><td>100</td></tr><tr><td>行内样式</td><td>1000</td></tr><tr><td>!important</td><td>无穷大， 优先生效</td></tr></tbody></table><p><strong>!important 例外规则</strong> 当在一个样式声明中使用一个 <code>!important</code> 规则时，此声明将覆盖任何其他声明。虽然，从技术上讲，<code>!important</code> 与优先级无关，但它与最终的结果直接相关。使用 <code>!important</code> 是一个坏习惯，应该尽量避免，因为这破坏了样式表中的固有的级联规则 使得调试找 bug 变得更加困难了。当两条相互冲突的带有 <code>!important</code> 规则的声明被应用到相同的元素上时，拥有更大优先级的声明将会被采用。</p></li><li><p><strong>一些经验法则</strong></p><ol><li>一定要优先考虑使用样式规则的优先级来解决问题而不是直接加<code>!important</code></li><li>只有在需要覆盖全占或外部CSS的特定页面中使用<code>!important</code></li><li>不要在你的插件中使用<code>!important</code></li><li>不要在全站范围的CSS代码中使用<code>!important</code></li><li>与其使用<code>!important</code>， 你可以： <ul><li>更好地使用CSS级联属性</li><li>使用更具体的规则， 在您选择的元素之前，增加一个或多个元素， 使选择器变得更加具体， 并获得更高的优先级。</li></ul></li></ol></li><li><p><strong>覆盖important</strong></p><ul><li>虽然我们应该尽量避免使用!important，但你应该知道如何覆盖important，加点权重就可以实现</li></ul><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#676E95;font-style:italic;">&lt;!-- !important 优先级最高， 但也会被权重高的important所覆盖 --&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#C792EA;"> id</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">aa</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;"> class</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">bb</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#89DDFF;">#</span><span style="color:#F78C6C;">a</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#B2CCD6;">  background-color</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> blue </span><span style="color:#F78C6C;">!important</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> /** id的important会将class的important覆盖掉 */</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">bb</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#B2CCD6;">  background-color</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> red </span><span style="color:#F78C6C;">!important</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div></li></ul>`,6),e=[n];function c(p,r,i,d,D,F){return o(),t("div",null,e)}const u=s(l,[["render",c]]);export{m as __pageData,u as default};
