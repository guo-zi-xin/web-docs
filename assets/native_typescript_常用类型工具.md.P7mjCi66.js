import{_ as s,o as a,c as n,a8 as l}from"./chunks/framework.QttzOlP4.js";const d=JSON.parse('{"title":"TypeScript 常用类型工具","description":"","frontmatter":{},"headers":[],"relativePath":"native/typescript/常用类型工具.md","filePath":"native/typescript/常用类型工具.md","lastUpdated":1711377732000}'),p={name:"native/typescript/常用类型工具.md"},o=l(`<h1 id="typescript-常用类型工具" tabindex="-1">TypeScript 常用类型工具 <a class="header-anchor" href="#typescript-常用类型工具" aria-label="Permalink to &quot;TypeScript 常用类型工具&quot;">​</a></h1><h3 id="omit-t-k" tabindex="-1"><code>Omit&lt; T, K &gt;</code> <a class="header-anchor" href="#omit-t-k" aria-label="Permalink to &quot;\`Omit&lt; T, K &gt;\`&quot;">​</a></h3><p><code>Omit&lt; T, K &gt;</code> 用来从对象类型 <code>T</code> 中，删除指定属性 <code>K</code>, 组成一个新的对象返回</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">  interface</span><span style="color:#FFCB6B;"> A</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">  x</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> number</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  y</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> number</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">  type</span><span style="color:#FFCB6B;"> T1</span><span style="color:#89DDFF;"> =</span><span style="color:#FFCB6B;"> Omit</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">A</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">x</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">&gt;;</span><span style="color:#676E95;font-style:italic;">        // { y: number}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">  type</span><span style="color:#FFCB6B;"> T2</span><span style="color:#89DDFF;"> =</span><span style="color:#FFCB6B;"> Omit</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">A</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">y</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">&gt;;</span><span style="color:#676E95;font-style:italic;">        // { x: number }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">  type</span><span style="color:#FFCB6B;"> T3</span><span style="color:#89DDFF;"> =</span><span style="color:#FFCB6B;"> Omit</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">A</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">x</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;"> |</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">y</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">&gt;;</span><span style="color:#676E95;font-style:italic;">  // { }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">  type</span><span style="color:#FFCB6B;"> T4</span><span style="color:#89DDFF;"> =</span><span style="color:#FFCB6B;"> Omit</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">A</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">z</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">&gt;;</span><span style="color:#676E95;font-style:italic;">        // { x: number, y: number }</span></span></code></pre></div><p>上面的示例中 <code>Omit&lt; T, K &gt;</code> 从对象类型 <code>A</code>里删除指定属性， 返回剩下的属性</p><p>指定删除的键名<code>Keys</code>可以是对象类型<code>Type</code>中不存在的属性，但必须兼容<code>string | number | symbol</code></p><p><code>Omit&lt; T, K &gt;</code> 实现如下</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">type</span><span style="color:#FFCB6B;"> Omit</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">,</span><span style="color:#FFCB6B;"> k</span><span style="color:#C792EA;"> extends</span><span style="color:#89DDFF;"> keyof</span><span style="color:#FFCB6B;"> any</span><span style="color:#89DDFF;">&gt;</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> </span></span>
<span class="line"><span style="color:#FFCB6B;">Pick</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">,</span><span style="color:#FFCB6B;"> Exclude</span><span style="color:#89DDFF;">&lt;keyof</span><span style="color:#FFCB6B;"> T</span><span style="color:#89DDFF;">,</span><span style="color:#FFCB6B;"> K</span><span style="color:#89DDFF;">&gt;&gt;</span></span></code></pre></div><h3 id="pick-t-k" tabindex="-1"><code>Pick&lt; T, K &gt;</code> <a class="header-anchor" href="#pick-t-k" aria-label="Permalink to &quot;\`Pick&lt; T, K &gt;\`&quot;">​</a></h3><p><code>Pick&lt; T, K &gt;</code>返回一个新的对象类型，第一个参数<code>T</code>是一个对象类型，第二个参数<code>K</code>是<code>T</code>里面被选定的键名。</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">interface</span><span style="color:#FFCB6B;"> A</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">  x</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> number</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  y</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> number</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">type</span><span style="color:#FFCB6B;"> T1</span><span style="color:#89DDFF;"> =</span><span style="color:#FFCB6B;"> Pick</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">A</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">x</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">&gt;;</span><span style="color:#676E95;font-style:italic;">      // { x: number }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">type</span><span style="color:#FFCB6B;"> T2</span><span style="color:#89DDFF;"> =</span><span style="color:#FFCB6B;"> Pick</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">A</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">y</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">&gt;;</span><span style="color:#676E95;font-style:italic;">      // { y: number }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">type</span><span style="color:#FFCB6B;"> T3</span><span style="color:#89DDFF;"> =</span><span style="color:#FFCB6B;"> Pick</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">A</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">x</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;"> |</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">y</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#676E95;font-style:italic;"> // { x: number, y: number }</span></span></code></pre></div><p>上面示例中, <code>Pick&lt; T, K &gt;</code> 会从对象类型<code>A</code>中挑选出指定的键名，组成一个新的对象类型。</p><p>指定的键名<code>K</code>必须是对象键名<code>T</code>中已经存在的键名，否则会报错：</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">interface</span><span style="color:#FFCB6B;"> A</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">  x</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> number</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  y</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> number</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">type</span><span style="color:#FFCB6B;"> T4</span><span style="color:#89DDFF;"> =</span><span style="color:#FFCB6B;"> Pick</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">A</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">z</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#676E95;font-style:italic;">        //报错</span></span></code></pre></div><p><code>Pick&lt; T, K &gt;</code>实现如下</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">type</span><span style="color:#FFCB6B;"> Pick</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">,</span><span style="color:#FFCB6B;"> K</span><span style="color:#C792EA;"> extends</span><span style="color:#89DDFF;"> keyof</span><span style="color:#FFCB6B;"> T</span><span style="color:#89DDFF;">&gt;</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">  [</span><span style="color:#FFCB6B;">P</span><span style="color:#89DDFF;"> in</span><span style="color:#FFCB6B;"> K</span><span style="color:#BABED8;">]</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> T</span><span style="color:#BABED8;">[</span><span style="color:#FFCB6B;">P</span><span style="color:#BABED8;">]</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h3 id="partial-t" tabindex="-1"><code>Partial&lt; T &gt;</code> <a class="header-anchor" href="#partial-t" aria-label="Permalink to &quot;\`Partial&lt; T &gt;\`&quot;">​</a></h3><p><code>Partial&lt; T &gt;</code>返回一个新类型，将参数类型 <code>T</code>的所有属性变为可选属性</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">interface</span><span style="color:#FFCB6B;"> A</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">  x</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> number</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  y</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> number</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">type</span><span style="color:#FFCB6B;"> T1</span><span style="color:#89DDFF;"> =</span><span style="color:#FFCB6B;"> Partial</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">A</span><span style="color:#89DDFF;">&gt;;</span><span style="color:#676E95;font-style:italic;"> // { x?: number; y?: number }</span></span></code></pre></div><p><code>Partial&lt; T &gt;</code>实现如下</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">type</span><span style="color:#FFCB6B;"> Partial</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 遍历T的属性名: 对应的属性值</span></span>
<span class="line"><span style="color:#BABED8;">  [</span><span style="color:#FFCB6B;">P</span><span style="color:#89DDFF;"> in</span><span style="color:#89DDFF;"> keyof</span><span style="color:#FFCB6B;"> T</span><span style="color:#BABED8;">]</span><span style="color:#89DDFF;">?:</span><span style="color:#FFCB6B;"> T</span><span style="color:#BABED8;">[</span><span style="color:#FFCB6B;">P</span><span style="color:#BABED8;">]</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h3 id="required-t" tabindex="-1"><code>Required&lt; T &gt;</code> <a class="header-anchor" href="#required-t" aria-label="Permalink to &quot;\`Required&lt; T &gt;\`&quot;">​</a></h3><p><code>Required&lt;T&gt;</code>返回一个新类型，将参数类型<code>T</code>的所有属性变为必选属性。 它与<code>Partial</code>作用刚好相反。</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">interface</span><span style="color:#FFCB6B;"> A</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">  x</span><span style="color:#89DDFF;">?:</span><span style="color:#FFCB6B;"> number</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  y</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;">number</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">type</span><span style="color:#FFCB6B;"> T1</span><span style="color:#89DDFF;"> =</span><span style="color:#FFCB6B;"> Required</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">A</span><span style="color:#89DDFF;">&gt;</span><span style="color:#676E95;font-style:italic;"> // { x: number; y: number }</span></span></code></pre></div><p><code>Required&lt; T &gt;</code>的实现如下</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">type</span><span style="color:#FFCB6B;"> Required</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">  [</span><span style="color:#FFCB6B;">P</span><span style="color:#89DDFF;"> in</span><span style="color:#89DDFF;"> keyof</span><span style="color:#FFCB6B;"> T</span><span style="color:#BABED8;">]</span><span style="color:#89DDFF;">-?:</span><span style="color:#FFCB6B;"> T</span><span style="color:#BABED8;">[</span><span style="color:#FFCB6B;">P</span><span style="color:#BABED8;">]</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>上述代码中, 符号<code>-?</code>表示去除可选属性的&quot;问号&quot;，使其变为必选属性。</p><p>相对应的，符号<code>+?</code>表示增加可选属性的&quot;问号&quot;，等同于<code>?</code> 因此， 前面的<code>Partial&lt; T &gt;</code>的定义也可以写成下面这样：</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">type</span><span style="color:#FFCB6B;"> Partial</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">  [</span><span style="color:#FFCB6B;">P</span><span style="color:#89DDFF;"> in</span><span style="color:#89DDFF;"> keyof</span><span style="color:#FFCB6B;"> T</span><span style="color:#BABED8;">]</span><span style="color:#89DDFF;">+?:</span><span style="color:#FFCB6B;"> T</span><span style="color:#BABED8;">[</span><span style="color:#FFCB6B;">P</span><span style="color:#BABED8;">]</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h3 id="readonly-t" tabindex="-1"><code>Readonly&lt; T &gt;</code> <a class="header-anchor" href="#readonly-t" aria-label="Permalink to &quot;\`Readonly&lt; T &gt;\`&quot;">​</a></h3><p><code>Readonly&lt; T &gt;</code>返回一个新类型， 将参数类型<code>T</code>的所有属性变为只读属性</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">interface</span><span style="color:#FFCB6B;"> A</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">  x</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> number</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  y</span><span style="color:#89DDFF;">?:</span><span style="color:#FFCB6B;"> number</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">type</span><span style="color:#FFCB6B;"> T1</span><span style="color:#89DDFF;"> =</span><span style="color:#FFCB6B;"> Readonly</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">A</span><span style="color:#89DDFF;">&gt;</span><span style="color:#676E95;font-style:italic;">  // { readonly x: number; readonly y?: number}</span></span></code></pre></div><p>上面示例中， <code>y</code>是可选属性，<code>Readonly&lt; T &gt;</code>不会改变这一点， 只会让<code>y</code>变为只读</p><p><code>Readonly</code>的实现如下</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">type</span><span style="color:#FFCB6B;"> Readonly</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;">  readonly</span><span style="color:#BABED8;"> [</span><span style="color:#FFCB6B;">P</span><span style="color:#89DDFF;"> in</span><span style="color:#89DDFF;"> keyof</span><span style="color:#FFCB6B;"> T</span><span style="color:#BABED8;">]</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> T</span><span style="color:#BABED8;">[</span><span style="color:#FFCB6B;">P</span><span style="color:#BABED8;">]</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">PS</p><p>我们可以自定义类型工具<code>Mutable&lt; T &gt;</code>, 将参数类型的所有属性变为可变属性。</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">type</span><span style="color:#FFCB6B;"> Mutable</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;">  -</span><span style="color:#C792EA;">readonly</span><span style="color:#BABED8;"> [</span><span style="color:#FFCB6B;">P</span><span style="color:#89DDFF;"> in</span><span style="color:#89DDFF;"> keyof</span><span style="color:#FFCB6B;"> T</span><span style="color:#BABED8;">]</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> T</span><span style="color:#BABED8;">[</span><span style="color:#FFCB6B;">P</span><span style="color:#BABED8;">]</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>上面代码中， <code>-readonly</code>表示去除属性的只读标志。</p><p>相应地, <code>+readonly</code>就表示增加只读标志，等同于<code>readonly</code>。因此，<code>Readonly&lt; T &gt;</code>的实现也可以写成下面这样:</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">type</span><span style="color:#FFCB6B;"> Readonly</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;">  +</span><span style="color:#C792EA;">readonly</span><span style="color:#BABED8;"> [</span><span style="color:#FFCB6B;">P</span><span style="color:#89DDFF;"> in</span><span style="color:#89DDFF;"> keyof</span><span style="color:#FFCB6B;"> T</span><span style="color:#BABED8;">]</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> T</span><span style="color:#BABED8;">[</span><span style="color:#FFCB6B;">P</span><span style="color:#BABED8;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div></div><blockquote><p><code>Readonly&lt; T &gt;</code>可以与<code>Partial&lt; T &gt;</code>结合使用，将所有属性变成只读的可选属性</p></blockquote><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">interface</span><span style="color:#FFCB6B;"> Person</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">  name</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> string</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  age</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> number</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> worker</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;">Readonly</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Partial</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Person</span><span style="color:#89DDFF;">&gt;&gt;</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> {</span><span style="color:#F07178;"> name</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">张三</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">worker</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">name </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">李四</span><span style="color:#89DDFF;">&#39;</span><span style="color:#676E95;font-style:italic;"> // 报错</span></span></code></pre></div><h3 id="record-t-k" tabindex="-1"><code>Record&lt; T, K &gt;</code> <a class="header-anchor" href="#record-t-k" aria-label="Permalink to &quot;\`Record&lt; T, K &gt;\`&quot;">​</a></h3><p><code>Record&lt;T, K&gt;</code>返回一个对象类型，参数<code>K</code>作为键名，参数<code>T</code>作为键值类型。</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">type</span><span style="color:#FFCB6B;"> T</span><span style="color:#89DDFF;"> =</span><span style="color:#FFCB6B;"> Record</span><span style="color:#89DDFF;">&lt;</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">a</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#FFCB6B;"> number</span><span style="color:#89DDFF;">&gt;</span><span style="color:#676E95;font-style:italic;">   // { a: number }</span></span></code></pre></div><p>上面示例中，<code>Record&lt; T, K &gt;</code>的第一个参数 &#39;a&#39; 用作对象的键名，第二个参数&#39;number&#39; 是 &#39;a&#39;的键值类型。</p><p>参数<code>K</code>可以是联合类型，这时会依次展开为多个键。</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">type</span><span style="color:#FFCB6B;"> T</span><span style="color:#89DDFF;"> =</span><span style="color:#FFCB6B;"> Record</span><span style="color:#89DDFF;">&lt;</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">a</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;"> |</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">b</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#FFCB6B;"> number</span><span style="color:#89DDFF;">&gt;</span><span style="color:#676E95;font-style:italic;"> // { a: number, b: number}</span></span></code></pre></div><p>上面示例中，第一个参数是联合类型<code>&#39;a&#39; | &#39;b&#39;</code>，展开成两个键名<code>a</code>和<code>b</code>。</p><p>如果参数<code>T</code>是联合类型，表明键值是联合类型</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">type</span><span style="color:#FFCB6B;"> T</span><span style="color:#89DDFF;"> =</span><span style="color:#FFCB6B;"> Record</span><span style="color:#89DDFF;">&lt;</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">a</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#FFCB6B;"> number</span><span style="color:#89DDFF;"> |</span><span style="color:#FFCB6B;"> string</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><p>参数<code>K</code>的类型必须兼容<code>string | number |symbol</code>类型，否则不能用作键名， 会报错。</p><p><code>Record&lt; K,T &gt;</code>的实现如下：</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">type</span><span style="color:#FFCB6B;"> Record</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">K</span><span style="color:#C792EA;"> extends</span><span style="color:#FFCB6B;"> string</span><span style="color:#89DDFF;"> |</span><span style="color:#FFCB6B;"> number</span><span style="color:#89DDFF;"> |</span><span style="color:#FFCB6B;"> symbol</span><span style="color:#89DDFF;">,</span><span style="color:#FFCB6B;"> T</span><span style="color:#89DDFF;">&gt;</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">  [</span><span style="color:#FFCB6B;">P</span><span style="color:#89DDFF;"> in</span><span style="color:#FFCB6B;"> K</span><span style="color:#BABED8;">]</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> T</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h3 id="exclude-t-u" tabindex="-1"><code>Exclude&lt; T, U &gt;</code> <a class="header-anchor" href="#exclude-t-u" aria-label="Permalink to &quot;\`Exclude&lt; T, U &gt;\`&quot;">​</a></h3><p><code>Exclude&lt; T, U &gt;</code>用来从联合类型<code>T</code>里面，删除某些类型<code>U</code>，组成一个新的类型返回。</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">type</span><span style="color:#FFCB6B;"> T1</span><span style="color:#89DDFF;"> =</span><span style="color:#FFCB6B;"> Exclude</span><span style="color:#89DDFF;">&lt;</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">a</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;"> |</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">b</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;"> |</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">c</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">a</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">&gt;;</span><span style="color:#676E95;font-style:italic;">            // &#39;b&#39; | &#39;c&#39;</span></span>
<span class="line"><span style="color:#C792EA;">type</span><span style="color:#FFCB6B;"> T2</span><span style="color:#89DDFF;"> =</span><span style="color:#FFCB6B;"> Exclude</span><span style="color:#89DDFF;">&lt;</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">a</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;"> |</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">b</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;"> |</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">c</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">a</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;"> |</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">b</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">&gt;;</span><span style="color:#676E95;font-style:italic;">      // &#39;c&#39;</span></span>
<span class="line"><span style="color:#C792EA;">type</span><span style="color:#FFCB6B;"> T3</span><span style="color:#89DDFF;"> =</span><span style="color:#FFCB6B;"> Exclude</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;"> |</span><span style="color:#BABED8;"> (</span><span style="color:#89DDFF;">()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#FFCB6B;"> void</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">,</span><span style="color:#FFCB6B;"> Function</span><span style="color:#89DDFF;">&gt;;</span><span style="color:#676E95;font-style:italic;"> // string</span></span>
<span class="line"><span style="color:#C792EA;">type</span><span style="color:#FFCB6B;"> T4</span><span style="color:#89DDFF;"> =</span><span style="color:#FFCB6B;"> Exclude</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;"> |</span><span style="color:#FFCB6B;"> string</span><span style="color:#BABED8;">[]</span><span style="color:#89DDFF;">,</span><span style="color:#FFCB6B;"> any</span><span style="color:#BABED8;">[]</span><span style="color:#89DDFF;">&gt;;</span><span style="color:#676E95;font-style:italic;">        // string</span></span>
<span class="line"><span style="color:#C792EA;">type</span><span style="color:#FFCB6B;"> T5</span><span style="color:#89DDFF;"> =</span><span style="color:#FFCB6B;"> Exclude</span><span style="color:#89DDFF;">&lt;</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#FFCB6B;"> void</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">|</span><span style="color:#FFCB6B;"> null</span><span style="color:#89DDFF;">,</span><span style="color:#FFCB6B;"> Function</span><span style="color:#89DDFF;">&gt;;</span><span style="color:#676E95;font-style:italic;">    // null</span></span>
<span class="line"><span style="color:#C792EA;">type</span><span style="color:#FFCB6B;"> T6</span><span style="color:#89DDFF;"> =</span><span style="color:#FFCB6B;"> Exclude</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F78C6C;">200</span><span style="color:#89DDFF;"> |</span><span style="color:#F78C6C;"> 400</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;"> 200</span><span style="color:#89DDFF;"> |</span><span style="color:#F78C6C;"> 201</span><span style="color:#89DDFF;">&gt;;</span><span style="color:#676E95;font-style:italic;">            // 400</span></span>
<span class="line"><span style="color:#C792EA;">type</span><span style="color:#FFCB6B;"> T7</span><span style="color:#89DDFF;"> =</span><span style="color:#FFCB6B;"> Exclude</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">number</span><span style="color:#89DDFF;">,</span><span style="color:#FFCB6B;"> boolean</span><span style="color:#89DDFF;">&gt;;</span><span style="color:#676E95;font-style:italic;">                 // number</span></span></code></pre></div><p><code>Exclude&lt; T, U &gt;</code>的实现如下：</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">type</span><span style="color:#FFCB6B;"> Exclude</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">,</span><span style="color:#FFCB6B;"> U</span><span style="color:#89DDFF;">&gt;</span><span style="color:#89DDFF;"> =</span><span style="color:#FFCB6B;"> T</span><span style="color:#C792EA;"> extends</span><span style="color:#FFCB6B;"> U</span><span style="color:#89DDFF;"> ?</span><span style="color:#FFCB6B;"> never</span><span style="color:#89DDFF;"> :</span><span style="color:#FFCB6B;"> T</span></span></code></pre></div><p>上面代码中， 等号右边的部分，表示先判断<code>T</code>是否兼容<code>U</code>,如果是的话就返回<code>never</code>类型，否则就返回当前类型<code>T</code>。</p><p>由于<code>never</code>类型是任何其他类型的子类型，它跟其它类型组成联合类型时候，可以直接将<code>never</code>类型从联合类型中&#39;消掉&#39;， 因此<code>Exclude&lt; T, U &gt;</code>相当于删除兼容的类型， 剩下不兼容的类型</p><h3 id="extract-t-u" tabindex="-1"><code>Extract&lt; T, U &gt;</code> <a class="header-anchor" href="#extract-t-u" aria-label="Permalink to &quot;\`Extract&lt; T, U &gt;\`&quot;">​</a></h3><p><code>Extract&lt; T, U &gt;</code>用来从联合类型<code>T</code>中，提取指定类型<code>U</code>,组成一个新类型返回。它与<code>Exclude&lt; T, U &gt;</code>正好相反。</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">type</span><span style="color:#FFCB6B;"> T1</span><span style="color:#89DDFF;"> =</span><span style="color:#FFCB6B;"> Extract</span><span style="color:#89DDFF;">&lt;</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">a</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;"> |</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">b</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;"> |</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">c</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">a</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">&gt;;</span><span style="color:#676E95;font-style:italic;">          // &#39;a&#39;</span></span>
<span class="line"><span style="color:#C792EA;">type</span><span style="color:#FFCB6B;"> T2</span><span style="color:#89DDFF;"> =</span><span style="color:#FFCB6B;"> Extract</span><span style="color:#89DDFF;">&lt;</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">a</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;"> |</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">b</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;"> |</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">c</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">a</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;"> |</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">b</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">&gt;;</span><span style="color:#676E95;font-style:italic;">    // &#39;a&#39; | &#39;b&#39;</span></span>
<span class="line"><span style="color:#C792EA;">type</span><span style="color:#FFCB6B;"> T3</span><span style="color:#89DDFF;"> =</span><span style="color:#FFCB6B;"> Extract</span><span style="color:#89DDFF;">&lt;</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">a</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;"> |</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">b</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;"> |</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">c</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">a</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;"> |</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">d</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">&gt;;</span><span style="color:#676E95;font-style:italic;">    // &#39;a&#39;</span></span>
<span class="line"><span style="color:#C792EA;">type</span><span style="color:#FFCB6B;"> T4</span><span style="color:#89DDFF;"> =</span><span style="color:#FFCB6B;"> Extract</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;"> |</span><span style="color:#FFCB6B;"> string</span><span style="color:#BABED8;">[]</span><span style="color:#89DDFF;">,</span><span style="color:#FFCB6B;"> any</span><span style="color:#BABED8;">[]</span><span style="color:#89DDFF;">&gt;;</span><span style="color:#676E95;font-style:italic;">      // string[]</span></span>
<span class="line"><span style="color:#C792EA;">type</span><span style="color:#FFCB6B;"> T5</span><span style="color:#89DDFF;"> =</span><span style="color:#FFCB6B;"> Extract</span><span style="color:#89DDFF;">&lt;</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#FFCB6B;"> void</span><span style="color:#BABED8;">) </span><span style="color:#89DDFF;">|</span><span style="color:#FFCB6B;"> null</span><span style="color:#89DDFF;">,</span><span style="color:#FFCB6B;"> Function</span><span style="color:#89DDFF;">&gt;;</span><span style="color:#676E95;font-style:italic;"> // () =&gt; void</span></span>
<span class="line"><span style="color:#C792EA;">type</span><span style="color:#FFCB6B;"> T6</span><span style="color:#89DDFF;"> =</span><span style="color:#FFCB6B;"> Extract</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F78C6C;">200</span><span style="color:#89DDFF;"> |</span><span style="color:#F78C6C;"> 400</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;"> 200</span><span style="color:#89DDFF;"> |</span><span style="color:#F78C6C;"> 201</span><span style="color:#89DDFF;">&gt;;</span><span style="color:#676E95;font-style:italic;">          // 200</span></span></code></pre></div><p>如果参数<code>U</code>不包含在联合类型<code>T</code>中， 则返回never类型</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">type</span><span style="color:#FFCB6B;"> T</span><span style="color:#89DDFF;"> =</span><span style="color:#FFCB6B;"> Extract</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;"> |</span><span style="color:#FFCB6B;"> number</span><span style="color:#89DDFF;">,</span><span style="color:#FFCB6B;"> boolean</span><span style="color:#89DDFF;">&gt;;</span><span style="color:#676E95;font-style:italic;">    // never</span></span></code></pre></div><p><code>Extract&lt; T, U &gt;</code>实现如下：</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">type</span><span style="color:#FFCB6B;"> Extract</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">,</span><span style="color:#FFCB6B;"> U</span><span style="color:#89DDFF;">&gt;</span><span style="color:#89DDFF;"> =</span><span style="color:#FFCB6B;"> T</span><span style="color:#C792EA;"> extends</span><span style="color:#FFCB6B;"> U</span><span style="color:#89DDFF;"> ?</span><span style="color:#FFCB6B;"> T</span><span style="color:#89DDFF;"> :</span><span style="color:#FFCB6B;"> never</span></span></code></pre></div><h3 id="nonnullable-t" tabindex="-1"><code>NonNullable&lt; T &gt;</code> <a class="header-anchor" href="#nonnullable-t" aria-label="Permalink to &quot;\`NonNullable&lt; T &gt;\`&quot;">​</a></h3><p><code>NonNullable&lt; T &gt;</code>用来从联合类型<code>T</code>中删除<code>null</code>类型和 <code>undefined</code>类型，组成一个新类型返回，也就是返回<code>T</code>的非空类型版本</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">type</span><span style="color:#FFCB6B;"> T1</span><span style="color:#89DDFF;"> =</span><span style="color:#FFCB6B;"> NonNullable</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;"> |</span><span style="color:#FFCB6B;"> number</span><span style="color:#89DDFF;"> |</span><span style="color:#FFCB6B;"> undefined</span><span style="color:#89DDFF;">&gt;</span><span style="color:#676E95;font-style:italic;"> // string | number</span></span>
<span class="line"><span style="color:#C792EA;">type</span><span style="color:#FFCB6B;"> T2</span><span style="color:#89DDFF;"> =</span><span style="color:#FFCB6B;"> NonNullable</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">string</span><span style="color:#BABED8;">[] </span><span style="color:#89DDFF;">|</span><span style="color:#FFCB6B;"> null</span><span style="color:#89DDFF;"> |</span><span style="color:#FFCB6B;"> undefined</span><span style="color:#89DDFF;">&gt;</span><span style="color:#676E95;font-style:italic;"> // string[]</span></span>
<span class="line"><span style="color:#C792EA;">type</span><span style="color:#FFCB6B;"> T3</span><span style="color:#89DDFF;"> =</span><span style="color:#FFCB6B;"> NonNullable</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">boolean</span><span style="color:#89DDFF;">&gt;</span><span style="color:#676E95;font-style:italic;">  // boolean</span></span>
<span class="line"><span style="color:#C792EA;">type</span><span style="color:#FFCB6B;"> T4</span><span style="color:#89DDFF;"> =</span><span style="color:#FFCB6B;"> NonNullable</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">number</span><span style="color:#89DDFF;"> |</span><span style="color:#FFCB6B;"> null</span><span style="color:#89DDFF;">&gt;</span><span style="color:#676E95;font-style:italic;"> // number</span></span>
<span class="line"><span style="color:#C792EA;">type</span><span style="color:#FFCB6B;"> T5</span><span style="color:#89DDFF;"> =</span><span style="color:#FFCB6B;"> NonNullable</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;"> |</span><span style="color:#FFCB6B;"> undefined</span><span style="color:#89DDFF;">&gt;</span><span style="color:#676E95;font-style:italic;"> // string</span></span>
<span class="line"><span style="color:#C792EA;">type</span><span style="color:#FFCB6B;"> T6</span><span style="color:#89DDFF;"> =</span><span style="color:#FFCB6B;"> NonNullable</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">null</span><span style="color:#89DDFF;"> |</span><span style="color:#FFCB6B;"> undefined</span><span style="color:#89DDFF;">&gt;</span><span style="color:#676E95;font-style:italic;"> // never</span></span></code></pre></div><p><code>NonNullable&lt; T &gt;</code>的实现如下：</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">type</span><span style="color:#FFCB6B;"> NonNullable</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;</span><span style="color:#89DDFF;"> =</span><span style="color:#FFCB6B;"> T</span><span style="color:#89DDFF;"> &amp;</span><span style="color:#89DDFF;"> {}</span></span></code></pre></div><p>上面代码中， <code>T &amp; {}</code> 等同于求 <code>T &amp; Object</code>的交叉类型。由于 Typescript的非空值都是<code>Object</code>的子类型，所以会返回自身；而<code>null</code>和 <code>undefined</code>不属于<code>Object</code>， 会返回<code>never</code>类型。</p><h3 id="returntype-t" tabindex="-1"><code>ReturnType&lt; T &gt;</code> <a class="header-anchor" href="#returntype-t" aria-label="Permalink to &quot;\`ReturnType&lt; T &gt;\`&quot;">​</a></h3><p><code>ReturnType&lt; T &gt;</code>提取函数类型<code>T</code>的返回值类型，作为一个新类型返回</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">type</span><span style="color:#FFCB6B;"> T1</span><span style="color:#89DDFF;"> =</span><span style="color:#FFCB6B;"> ReturnType</span><span style="color:#89DDFF;">&lt;()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#FFCB6B;"> string</span><span style="color:#89DDFF;">&gt;</span><span style="color:#676E95;font-style:italic;">  // string</span></span>
<span class="line"><span style="color:#C792EA;">type</span><span style="color:#FFCB6B;"> T2</span><span style="color:#89DDFF;"> =</span><span style="color:#FFCB6B;"> ReturnType</span><span style="color:#89DDFF;">&lt;()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span><span style="color:#F07178;"> a</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> string</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> b</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> number</span><span style="color:#89DDFF;">}&gt;</span><span style="color:#676E95;font-style:italic;"> // { a: string, y: number}</span></span>
<span class="line"><span style="color:#C792EA;">type</span><span style="color:#FFCB6B;"> T3</span><span style="color:#89DDFF;"> =</span><span style="color:#FFCB6B;"> ReturnType</span><span style="color:#89DDFF;">&lt;(</span><span style="color:#BABED8;font-style:italic;">s</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#FFCB6B;"> void</span><span style="color:#89DDFF;">&gt;</span><span style="color:#676E95;font-style:italic;"> // void</span></span>
<span class="line"><span style="color:#C792EA;">type</span><span style="color:#FFCB6B;"> T4</span><span style="color:#89DDFF;"> =</span><span style="color:#FFCB6B;"> ReturnType</span><span style="color:#89DDFF;">&lt;()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> ()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#FFCB6B;"> any</span><span style="color:#BABED8;">[]</span><span style="color:#89DDFF;">&gt;</span><span style="color:#676E95;font-style:italic;"> // () =&gt; any[]</span></span>
<span class="line"><span style="color:#C792EA;">type</span><span style="color:#FFCB6B;"> T5</span><span style="color:#89DDFF;"> =</span><span style="color:#FFCB6B;"> ReturnType</span><span style="color:#89DDFF;">&lt;typeof</span><span style="color:#BABED8;"> Math</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">random</span><span style="color:#89DDFF;">&gt;</span><span style="color:#676E95;font-style:italic;"> // number</span></span>
<span class="line"><span style="color:#C792EA;">type</span><span style="color:#FFCB6B;"> T6</span><span style="color:#89DDFF;"> =</span><span style="color:#FFCB6B;"> ReturnType</span><span style="color:#89DDFF;">&lt;typeof</span><span style="color:#BABED8;"> Array</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">isArray</span><span style="color:#89DDFF;">&gt;</span><span style="color:#676E95;font-style:italic;"> //boolean</span></span></code></pre></div><p>如果参数类型是泛型参数，返回值取决于泛型类型。如果泛型不带有限制条件，就会返回<code>unknown</code></p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">type</span><span style="color:#FFCB6B;"> T7</span><span style="color:#89DDFF;"> =</span><span style="color:#FFCB6B;"> ReturnType</span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#FFCB6B;"> T</span><span style="color:#89DDFF;">&gt;</span><span style="color:#676E95;font-style:italic;"> // unknown</span></span>
<span class="line"><span style="color:#C792EA;">type</span><span style="color:#FFCB6B;"> T8</span><span style="color:#89DDFF;"> =</span><span style="color:#FFCB6B;"> ReturnType</span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#C792EA;"> extends</span><span style="color:#FFCB6B;"> U</span><span style="color:#89DDFF;">,</span><span style="color:#FFCB6B;"> U</span><span style="color:#C792EA;"> extends</span><span style="color:#FFCB6B;"> number</span><span style="color:#BABED8;">[]</span><span style="color:#89DDFF;">&gt;()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#FFCB6B;"> T</span><span style="color:#89DDFF;">&gt;</span><span style="color:#676E95;font-style:italic;"> // number[]</span></span></code></pre></div><p>如果类型不是函数，会报错</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">type</span><span style="color:#FFCB6B;"> T9</span><span style="color:#89DDFF;"> =</span><span style="color:#FFCB6B;"> ReturnType</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">boolean</span><span style="color:#89DDFF;">&gt;</span><span style="color:#676E95;font-style:italic;"> //报错</span></span>
<span class="line"><span style="color:#C792EA;">type</span><span style="color:#FFCB6B;"> T0</span><span style="color:#89DDFF;"> =</span><span style="color:#FFCB6B;"> ReturnType</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Function</span><span style="color:#89DDFF;">&gt;</span><span style="color:#676E95;font-style:italic;"> //报错</span></span></code></pre></div><p><code>any</code>和<code>never</code>是两个特殊值，分别返回<code>any</code>和 <code>never</code></p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">type</span><span style="color:#FFCB6B;"> T1</span><span style="color:#89DDFF;"> =</span><span style="color:#FFCB6B;"> ReturnType</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">any</span><span style="color:#89DDFF;">&gt;;</span><span style="color:#676E95;font-style:italic;"> // any</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">type</span><span style="color:#FFCB6B;"> T2</span><span style="color:#89DDFF;"> =</span><span style="color:#FFCB6B;"> ReturnType</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">never</span><span style="color:#89DDFF;">&gt;;</span><span style="color:#676E95;font-style:italic;"> // never</span></span></code></pre></div><p><code>ReturnType&lt; T &gt;</code>的实现如下：</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">type</span><span style="color:#FFCB6B;"> ReturnType</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#C792EA;"> extends</span><span style="color:#89DDFF;"> (...</span><span style="color:#BABED8;font-style:italic;">args</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> any</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#FFCB6B;"> any</span><span style="color:#89DDFF;">&gt;</span><span style="color:#89DDFF;"> =</span><span style="color:#FFCB6B;"> T</span><span style="color:#C792EA;"> extends</span><span style="color:#89DDFF;"> (...</span><span style="color:#BABED8;font-style:italic;">args</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;">any</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> infer</span><span style="color:#FFCB6B;"> R</span><span style="color:#89DDFF;"> ?</span><span style="color:#FFCB6B;"> R</span><span style="color:#89DDFF;"> :</span><span style="color:#FFCB6B;"> any</span></span></code></pre></div><h3 id="parameters-t" tabindex="-1"><code>Parameters&lt; T &gt;</code> <a class="header-anchor" href="#parameters-t" aria-label="Permalink to &quot;\`Parameters&lt; T &gt;\`&quot;">​</a></h3><p><code>Parameters&lt; T &gt;</code>从函数类型里面提取参数类型，组成一个元组返回</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">type</span><span style="color:#FFCB6B;"> T1</span><span style="color:#89DDFF;"> =</span><span style="color:#FFCB6B;"> Parameters</span><span style="color:#89DDFF;">&lt;()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#FFCB6B;"> string</span><span style="color:#89DDFF;">&gt;</span><span style="color:#676E95;font-style:italic;">  // []</span></span>
<span class="line"><span style="color:#C792EA;">type</span><span style="color:#FFCB6B;"> T2</span><span style="color:#89DDFF;"> =</span><span style="color:#FFCB6B;"> Parameters</span><span style="color:#89DDFF;">&lt;(</span><span style="color:#BABED8;font-style:italic;">s</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> string</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#FFCB6B;"> void</span><span style="color:#89DDFF;">&gt;;</span><span style="color:#676E95;font-style:italic;"> // [s: string]</span></span>
<span class="line"><span style="color:#C792EA;">type</span><span style="color:#FFCB6B;"> T3</span><span style="color:#89DDFF;"> =</span><span style="color:#FFCB6B;"> Parameters</span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;(</span><span style="color:#BABED8;font-style:italic;">arg</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#FFCB6B;"> T</span><span style="color:#89DDFF;">&gt;</span><span style="color:#676E95;font-style:italic;"> //[arg:unknown]</span></span>
<span class="line"><span style="color:#C792EA;">type</span><span style="color:#FFCB6B;"> T4</span><span style="color:#89DDFF;"> =</span><span style="color:#FFCB6B;"> Parameters</span><span style="color:#89DDFF;">&lt;(</span><span style="color:#BABED8;font-style:italic;">x</span><span style="color:#89DDFF;"> :</span><span style="color:#89DDFF;"> {</span><span style="color:#F07178;">a</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> number</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> b</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> string</span><span style="color:#89DDFF;">})</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#FFCB6B;"> void</span><span style="color:#89DDFF;">&gt;</span><span style="color:#676E95;font-style:italic;"> // [x: { a: number, b:number }]</span></span></code></pre></div><blockquote><p>上面实例中，<code>Parameters&lt; T &gt;</code>的返回值会包括函数的参数名，这一点需要注意。</p></blockquote><p>如果参数类型<code>T</code>不是带有参数的函数形式， 会报错</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">type</span><span style="color:#FFCB6B;"> T5</span><span style="color:#89DDFF;"> =</span><span style="color:#FFCB6B;"> Parameters</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">&gt;</span><span style="color:#676E95;font-style:italic;"> // 报错</span></span>
<span class="line"><span style="color:#C792EA;">type</span><span style="color:#FFCB6B;"> T6</span><span style="color:#89DDFF;"> =</span><span style="color:#FFCB6B;"> Parameters</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Function</span><span style="color:#89DDFF;">&gt;</span><span style="color:#676E95;font-style:italic;"> //报错</span></span></code></pre></div><p><code>any</code>和<code>never</code>是两个特殊值，分别返回<code>unknown[]</code>和 <code>never</code></p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">type</span><span style="color:#FFCB6B;"> T7</span><span style="color:#89DDFF;"> =</span><span style="color:#FFCB6B;"> Parameters</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">any</span><span style="color:#89DDFF;">&gt;;</span><span style="color:#676E95;font-style:italic;"> // unknown[]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">type</span><span style="color:#FFCB6B;"> T8</span><span style="color:#89DDFF;"> =</span><span style="color:#FFCB6B;"> Parameters</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">never</span><span style="color:#89DDFF;">&gt;;</span><span style="color:#676E95;font-style:italic;"> // never</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">引申</p><p><code>Parameters&lt; T &gt;</code>主要用于从外部模块提供的函数类型中，获取参数类型。</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">interface</span><span style="color:#FFCB6B;"> IRequest</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">  first</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> string</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  last</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> string</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">interface</span><span style="color:#FFCB6B;"> IReponse</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">  name</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> IRequest</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  gift</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> string</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#C792EA;"> function</span><span style="color:#82AAFF;"> getGift</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">name</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> IRequest</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> gift</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> string</span><span style="color:#89DDFF;">):</span><span style="color:#FFCB6B;"> IReponse</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // ...</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>上述示例中，模块只输出了函数<code>getGift()</code>, 没有输出参数<code>IRequest</code>和返回值<code>IReponse</code>。</p><p>这时就可以通过<code>Parameters&lt; T &gt;</code>和 <code>ReturnType&lt; T &gt;</code> 拿到这两个接口类型</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">type</span><span style="color:#FFCB6B;"> ParaT</span><span style="color:#89DDFF;"> =</span><span style="color:#FFCB6B;"> Parameters</span><span style="color:#89DDFF;">&lt;typeof</span><span style="color:#BABED8;"> getGift</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;">[</span><span style="color:#F78C6C;">0</span><span style="color:#BABED8;">] </span><span style="color:#676E95;font-style:italic;">// IRequest</span></span>
<span class="line"><span style="color:#C792EA;">type</span><span style="color:#FFCB6B;"> ReturnT</span><span style="color:#89DDFF;"> =</span><span style="color:#FFCB6B;"> ReturnType</span><span style="color:#89DDFF;">&lt;typeof</span><span style="color:#BABED8;"> getGift</span><span style="color:#89DDFF;">&gt;</span><span style="color:#676E95;font-style:italic;"> // IResponse</span></span></code></pre></div></div><p><code>Parameters&lt; T &gt;</code>实现如下：</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">type</span><span style="color:#FFCB6B;"> Parameters</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#C792EA;"> extends</span><span style="color:#89DDFF;"> (...</span><span style="color:#BABED8;font-style:italic;">args</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;">any</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#FFCB6B;"> any</span><span style="color:#89DDFF;">&gt;</span><span style="color:#89DDFF;"> =</span><span style="color:#FFCB6B;"> T</span><span style="color:#C792EA;"> extends</span><span style="color:#89DDFF;"> (...</span><span style="color:#BABED8;font-style:italic;">args</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> infer</span><span style="color:#FFCB6B;"> P</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#FFCB6B;"> any</span><span style="color:#89DDFF;"> ?</span><span style="color:#FFCB6B;"> P</span><span style="color:#89DDFF;"> :</span><span style="color:#FFCB6B;"> never</span></span></code></pre></div><h3 id="constructorparameters-t" tabindex="-1"><code>ConstructorParameters&lt; T &gt;</code> <a class="header-anchor" href="#constructorparameters-t" aria-label="Permalink to &quot;\`ConstructorParameters&lt; T &gt;\`&quot;">​</a></h3><p><code>ConstructorParameters&lt; T &gt;</code>提取构造方法<code>T</code>的参数类型，组成一个元祖类型返回</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">type</span><span style="color:#FFCB6B;"> T1</span><span style="color:#89DDFF;"> =</span><span style="color:#FFCB6B;"> ConstructorParameters</span><span style="color:#89DDFF;">&lt;</span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#89DDFF;"> (</span><span style="color:#BABED8;font-style:italic;">x</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> string</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> y</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> number</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#FFCB6B;"> object</span><span style="color:#89DDFF;">&gt;</span><span style="color:#676E95;font-style:italic;"> // [x: string, y:number]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">type</span><span style="color:#FFCB6B;"> T2</span><span style="color:#89DDFF;"> =</span><span style="color:#FFCB6B;"> ConstructorParameters</span><span style="color:#89DDFF;">&lt;</span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#89DDFF;"> (</span><span style="color:#BABED8;font-style:italic;">x</span><span style="color:#89DDFF;">?:</span><span style="color:#FFCB6B;"> string</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#FFCB6B;"> object</span><span style="color:#89DDFF;">&gt;</span><span style="color:#676E95;font-style:italic;"> // [x?: string | undefined]</span></span></code></pre></div><p>它可以返回一些内置构造方法的参数类型</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">type</span><span style="color:#FFCB6B;"> T3</span><span style="color:#89DDFF;"> =</span><span style="color:#FFCB6B;"> ConstructorParameters</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">ErrorConstructor</span><span style="color:#89DDFF;">&gt;</span><span style="color:#676E95;font-style:italic;"> // [message?: string]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">type</span><span style="color:#FFCB6B;"> T4</span><span style="color:#89DDFF;"> =</span><span style="color:#FFCB6B;"> COnstructorParameter</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">FunctionConstructor</span><span style="color:#89DDFF;">&gt;</span><span style="color:#676E95;font-style:italic;"> // string[]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">type</span><span style="color:#FFCB6B;"> T5</span><span style="color:#89DDFF;"> =</span><span style="color:#FFCB6B;"> ConstructorParameter</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">RegExpConstructor</span><span style="color:#89DDFF;">&gt;</span><span style="color:#676E95;font-style:italic;"> //[pattern:string | RegExp, flags?: string]</span></span></code></pre></div><p>如果参数类型不是构造方法，就会报错</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">type</span><span style="color:#FFCB6B;"> T6</span><span style="color:#89DDFF;"> =</span><span style="color:#FFCB6B;"> ConstructorParameters</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">&gt;</span><span style="color:#676E95;font-style:italic;"> //报错</span></span>
<span class="line"><span style="color:#C792EA;">type</span><span style="color:#FFCB6B;"> T7</span><span style="color:#89DDFF;"> =</span><span style="color:#FFCB6B;"> ConstructorParameters</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Function</span><span style="color:#89DDFF;">&gt;</span><span style="color:#676E95;font-style:italic;"> //报错</span></span></code></pre></div><p><code>any</code>和<code>never</code>是两个特殊值，分别返回<code>unknown[]</code>和 <code>never</code></p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">type</span><span style="color:#FFCB6B;"> T7</span><span style="color:#89DDFF;"> =</span><span style="color:#FFCB6B;"> ConstructorParameters</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">any</span><span style="color:#89DDFF;">&gt;;</span><span style="color:#676E95;font-style:italic;"> // unknown[]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">type</span><span style="color:#FFCB6B;"> T8</span><span style="color:#89DDFF;"> =</span><span style="color:#FFCB6B;"> ConstructorParameters</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">never</span><span style="color:#89DDFF;">&gt;;</span><span style="color:#676E95;font-style:italic;"> // never</span></span></code></pre></div><p><code>ConstructorParameters&lt; T &gt;</code>实现如下：</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">type</span><span style="color:#FFCB6B;"> ConstructorParameters</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#C792EA;"> extends</span><span style="color:#C792EA;"> abstract</span><span style="color:#89DDFF;font-style:italic;"> new</span><span style="color:#89DDFF;"> (...</span><span style="color:#BABED8;font-style:italic;">args</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> any</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#FFCB6B;"> any</span><span style="color:#89DDFF;">&gt;</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> </span></span>
<span class="line"><span style="color:#FFCB6B;">T</span><span style="color:#C792EA;"> extends</span><span style="color:#C792EA;"> abstract</span><span style="color:#89DDFF;font-style:italic;"> new</span><span style="color:#89DDFF;"> (...</span><span style="color:#BABED8;font-style:italic;">args</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> infer</span><span style="color:#FFCB6B;"> P</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#FFCB6B;"> any</span><span style="color:#89DDFF;"> ?</span><span style="color:#FFCB6B;"> P</span><span style="color:#89DDFF;"> :</span><span style="color:#FFCB6B;"> never</span></span></code></pre></div><h3 id="thisparametertype-t" tabindex="-1"><code>ThisParameterType&lt; T &gt;</code> <a class="header-anchor" href="#thisparametertype-t" aria-label="Permalink to &quot;\`ThisParameterType&lt; T &gt;\`&quot;">​</a></h3><p><code>ThisParameterType&lt; T &gt;</code>提取函数类型中的<code>this</code>参数的类型</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#82AAFF;"> toHex</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;font-style:italic;">this</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> number</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  return</span><span style="color:#89DDFF;"> this.</span><span style="color:#82AAFF;">toString</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">16</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">type</span><span style="color:#FFCB6B;"> T</span><span style="color:#89DDFF;"> =</span><span style="color:#FFCB6B;"> ThisParameterType</span><span style="color:#89DDFF;">&lt;typeof</span><span style="color:#BABED8;"> toHex</span><span style="color:#89DDFF;">&gt;</span><span style="color:#676E95;font-style:italic;"> // number</span></span></code></pre></div><p>如果函数没有 <code>this</code>参数， 则返回<code>unknown</code></p><p><code>ThisParameterType&lt; T &gt;</code>实现如下</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">type</span><span style="color:#FFCB6B;"> ThisParameterType</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;</span><span style="color:#89DDFF;"> =</span><span style="color:#FFCB6B;"> T</span><span style="color:#C792EA;"> extends</span><span style="color:#89DDFF;"> (</span><span style="color:#89DDFF;font-style:italic;">this</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> infer</span><span style="color:#FFCB6B;"> U</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> ...</span><span style="color:#BABED8;font-style:italic;">args</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> never</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#FFCB6B;"> any</span><span style="color:#89DDFF;"> ?</span><span style="color:#FFCB6B;"> U</span><span style="color:#89DDFF;"> :</span><span style="color:#FFCB6B;"> unknown</span></span></code></pre></div><h3 id="instancetype-t" tabindex="-1"><code>InstanceType&lt; T &gt;</code> <a class="header-anchor" href="#instancetype-t" aria-label="Permalink to &quot;\`InstanceType&lt; T &gt;\`&quot;">​</a></h3><p><code>InstanceType&lt; T &gt;</code>提取构造函数的返回值的类型（即实例类型），参数<code>T</code>是一个构造函数，等同于构造函数的<code>ReturnType&lt; T &gt;</code>。</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">type</span><span style="color:#FFCB6B;"> T</span><span style="color:#89DDFF;"> =</span><span style="color:#FFCB6B;"> InstanceType</span><span style="color:#89DDFF;">&lt;</span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#89DDFF;"> ()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#FFCB6B;"> object</span><span style="color:#89DDFF;">&gt;</span><span style="color:#676E95;font-style:italic;"> // object</span></span></code></pre></div><p>上面示例中，类型参数是一个构造函数<code>new () =&gt; object</code>, 返回值是该构造函数的实例类型(<code>object</code>)。</p><p>示例：</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">type</span><span style="color:#FFCB6B;"> A</span><span style="color:#89DDFF;"> =</span><span style="color:#FFCB6B;"> InstanceType</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">ErrorConstructor</span><span style="color:#89DDFF;">&gt;</span><span style="color:#676E95;font-style:italic;"> // Error</span></span>
<span class="line"><span style="color:#C792EA;">type</span><span style="color:#FFCB6B;"> B</span><span style="color:#89DDFF;"> =</span><span style="color:#FFCB6B;"> InstanceType</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">FunctionCOnstructor</span><span style="color:#89DDFF;">&gt;</span><span style="color:#676E95;font-style:italic;"> // Function</span></span>
<span class="line"><span style="color:#C792EA;">type</span><span style="color:#FFCB6B;"> C</span><span style="color:#89DDFF;"> =</span><span style="color:#FFCB6B;"> InstanceType</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">RegExpConstructor</span><span style="color:#89DDFF;">&gt;</span><span style="color:#676E95;font-style:italic;"> // RegExp</span></span></code></pre></div><p>上面示例中， <code>InstanceType&lt; T &gt;</code>的参数都是Typescript内置的原生对象的构造函数类型，所以返回值就是这些构造函数的实例类型。</p><p>由于 Class作为类型， 代表实例类型， 要获取它的构造方法，必须把它当成值，然后用<code>typeof</code>运算符获取它的构造方法类型</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">class</span><span style="color:#FFCB6B;"> D</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">  x</span><span style="color:#89DDFF;"> =</span><span style="color:#F78C6C;"> 0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  y</span><span style="color:#89DDFF;"> =</span><span style="color:#F78C6C;"> 0</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">type</span><span style="color:#FFCB6B;"> T</span><span style="color:#89DDFF;"> =</span><span style="color:#FFCB6B;"> InstanceType</span><span style="color:#89DDFF;">&lt;typeof</span><span style="color:#BABED8;"> D</span><span style="color:#89DDFF;">&gt;</span><span style="color:#676E95;font-style:italic;"> // D</span></span></code></pre></div><p>上面示例中，<code>typeof C</code>是<code>C</code>的构造方法类型，然后 InstanceType 就能获得实例类型，即<code>C</code>本身。</p><p>如果类型参数不是构造方法，就会报错</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">type</span><span style="color:#FFCB6B;"> T1</span><span style="color:#89DDFF;"> =</span><span style="color:#FFCB6B;"> InstanceType</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">&gt;;</span><span style="color:#676E95;font-style:italic;"> // 报错</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">type</span><span style="color:#FFCB6B;"> T2</span><span style="color:#89DDFF;"> =</span><span style="color:#FFCB6B;"> InstanceType</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Function</span><span style="color:#89DDFF;">&gt;;</span><span style="color:#676E95;font-style:italic;"> // 报错</span></span></code></pre></div><p>如果类型参数是<code>any</code>或<code>never</code>两个特殊值，分别返回<code>any</code>和<code>never</code>。</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">type</span><span style="color:#FFCB6B;"> T3</span><span style="color:#89DDFF;"> =</span><span style="color:#FFCB6B;"> InstanceType</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">any</span><span style="color:#89DDFF;">&gt;;</span><span style="color:#676E95;font-style:italic;"> // any</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">type</span><span style="color:#FFCB6B;"> T4</span><span style="color:#89DDFF;"> =</span><span style="color:#FFCB6B;"> InstanceType</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">never</span><span style="color:#89DDFF;">&gt;;</span><span style="color:#676E95;font-style:italic;"> // never</span></span></code></pre></div><p><code>InstanceType&lt; T &gt;</code>的实现如下:</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">type</span><span style="color:#FFCB6B;"> InstanceType</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#C792EA;"> extends</span><span style="color:#C792EA;"> abstract</span><span style="color:#89DDFF;font-style:italic;"> new</span><span style="color:#89DDFF;"> (...</span><span style="color:#BABED8;font-style:italic;">args</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> any</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#FFCB6B;"> any</span><span style="color:#89DDFF;">&gt;</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> </span></span>
<span class="line"><span style="color:#FFCB6B;">T</span><span style="color:#C792EA;"> extends</span><span style="color:#C792EA;"> abstract</span><span style="color:#89DDFF;font-style:italic;"> new</span><span style="color:#89DDFF;"> (...</span><span style="color:#BABED8;font-style:italic;">args</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> any</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> infer</span><span style="color:#FFCB6B;"> R</span><span style="color:#89DDFF;"> ?</span><span style="color:#FFCB6B;"> R</span><span style="color:#89DDFF;"> :</span><span style="color:#FFCB6B;"> any</span></span></code></pre></div><h3 id="awaited-t" tabindex="-1"><code>Awaited&lt; T &gt;</code> <a class="header-anchor" href="#awaited-t" aria-label="Permalink to &quot;\`Awaited&lt; T &gt;\`&quot;">​</a></h3><p><code>Awaited&lt; T &gt;</code>用来取出 Promise 的返回值类型，适合用在描述<code>then()</code>方法和<code>await</code>命令的参数类型。</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">type</span><span style="color:#FFCB6B;"> A</span><span style="color:#89DDFF;">  =</span><span style="color:#FFCB6B;"> Awaited</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Promise</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">&gt;&gt;</span><span style="color:#676E95;font-style:italic;"> // string</span></span></code></pre></div><p>它也可以返回多重 Promise 的返回值类型。</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">type</span><span style="color:#FFCB6B;"> B</span><span style="color:#89DDFF;"> =</span><span style="color:#FFCB6B;"> Awaited</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Promise</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Promise</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">number</span><span style="color:#89DDFF;">&gt;&gt;&gt;;</span><span style="color:#676E95;font-style:italic;"> // number</span></span></code></pre></div><p>如果它的类型参数不是 Promise 类型，那么就会原样返回。</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">type</span><span style="color:#FFCB6B;"> C</span><span style="color:#89DDFF;"> =</span><span style="color:#FFCB6B;"> Awaited</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">boolean</span><span style="color:#89DDFF;"> |</span><span style="color:#FFCB6B;"> Promise</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">number</span><span style="color:#89DDFF;">&gt;&gt;;</span><span style="color:#676E95;font-style:italic;"> // number | boolean</span></span></code></pre></div><p>上面示例中，类型参数是一个联合类型，其中的<code>boolean</code>会原样返回，所以最终返回的是<code>number|boolean</code>。</p><p><code>Awaited&lt; T &gt;</code>实现如下</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">type</span><span style="color:#FFCB6B;"> Awaited</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> </span></span>
<span class="line"><span style="color:#FFCB6B;">T</span><span style="color:#C792EA;"> extends</span><span style="color:#FFCB6B;"> null</span><span style="color:#89DDFF;"> |</span><span style="color:#FFCB6B;"> undefined</span><span style="color:#89DDFF;"> ?</span><span style="color:#FFCB6B;"> T</span><span style="color:#89DDFF;"> :</span><span style="color:#BABED8;"> </span></span>
<span class="line"><span style="color:#FFCB6B;">  T</span><span style="color:#C792EA;"> extends</span><span style="color:#FFCB6B;"> object</span><span style="color:#89DDFF;"> &amp;</span><span style="color:#BABED8;"> </span></span>
<span class="line"><span style="color:#89DDFF;">    {</span></span>
<span class="line"><span style="color:#F07178;">      then</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">onfulfilled</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> infer</span><span style="color:#FFCB6B;"> F</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> ...</span><span style="color:#BABED8;font-style:italic;">args</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> infer</span><span style="color:#FFCB6B;"> _</span><span style="color:#89DDFF;">):</span><span style="color:#FFCB6B;"> any</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span><span style="color:#89DDFF;"> ?</span><span style="color:#FFCB6B;"> F</span><span style="color:#C792EA;"> extends</span><span style="color:#89DDFF;"> (</span><span style="color:#BABED8;font-style:italic;">value</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> infer</span><span style="color:#FFCB6B;"> V</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> ...</span><span style="color:#BABED8;font-style:italic;">args</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> infer</span><span style="color:#FFCB6B;"> _</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#FFCB6B;"> any</span><span style="color:#89DDFF;"> ?</span><span style="color:#BABED8;"> </span></span>
<span class="line"><span style="color:#FFCB6B;">        Awaited</span><span style="color:#89DDFF;">&lt;</span><span style="color:#BABED8;">...</span><span style="color:#89DDFF;">&gt;</span><span style="color:#89DDFF;"> :</span><span style="color:#FFCB6B;"> never</span><span style="color:#89DDFF;"> :</span><span style="color:#BABED8;"> </span></span>
<span class="line"><span style="color:#FFCB6B;">    T</span></span></code></pre></div><h3 id="omitthisparameter-t" tabindex="-1"><code>OmitThisParameter&lt; T &gt;</code> <a class="header-anchor" href="#omitthisparameter-t" aria-label="Permalink to &quot;\`OmitThisParameter&lt; T &gt;\`&quot;">​</a></h3><p><code>OmitThisParameter&lt; T &gt;</code>从函数类型中移除<code>this</code>参数。</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#82AAFF;"> toHex</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;font-style:italic;">this</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;">number</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  return</span><span style="color:#89DDFF;"> this.</span><span style="color:#82AAFF;">toString</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">16</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">type</span><span style="color:#FFCB6B;"> T</span><span style="color:#89DDFF;"> =</span><span style="color:#FFCB6B;"> OmitThisParameter</span><span style="color:#89DDFF;">&lt;typeof</span><span style="color:#BABED8;"> toHex</span><span style="color:#89DDFF;">&gt;</span><span style="color:#676E95;font-style:italic;"> // () =&gt; string</span></span></code></pre></div><p>上面示例中，<code>OmitThisParameter&lt; T &gt;</code>给出了函数<code>toHex()</code>的类型，并将其中的<code>this</code>参数删除。</p><p>如果函数没有 this 参数，则返回原始函数类型。</p><p><code>OmitThisParameter&lt; T &gt;</code>实现如下:</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">type</span><span style="color:#FFCB6B;"> OmitThisParameter</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;</span><span style="color:#89DDFF;"> =</span><span style="color:#FFCB6B;"> unknown</span><span style="color:#C792EA;"> extends</span><span style="color:#FFCB6B;"> ThisParameterType</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;</span><span style="color:#89DDFF;"> ?</span><span style="color:#BABED8;"> </span></span>
<span class="line"><span style="color:#FFCB6B;">  T</span><span style="color:#89DDFF;"> :</span><span style="color:#FFCB6B;"> T</span><span style="color:#C792EA;"> extends</span><span style="color:#89DDFF;"> (...</span><span style="color:#BABED8;font-style:italic;">args</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> infer</span><span style="color:#FFCB6B;"> A</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> infer</span><span style="color:#FFCB6B;"> R</span><span style="color:#89DDFF;"> ?</span><span style="color:#89DDFF;"> (...</span><span style="color:#BABED8;font-style:italic;">args</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> A</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#FFCB6B;"> R</span><span style="color:#89DDFF;"> :</span><span style="color:#FFCB6B;"> T</span></span></code></pre></div><h3 id="thistype-t" tabindex="-1"><code>ThisType&lt; T &gt;</code> <a class="header-anchor" href="#thistype-t" aria-label="Permalink to &quot;\`ThisType&lt; T &gt;\`&quot;">​</a></h3><p><code>ThisType&lt; T &gt;</code>不返回类型， 只用来跟其他类型组成交叉类型，用来提示Typescript其他类型的<code>this</code>的类型</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">interface</span><span style="color:#FFCB6B;"> HelperThisValue</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">  logError</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> (</span><span style="color:#BABED8;font-style:italic;">error</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> string</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#FFCB6B;"> void</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> helperFunctions</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span></span>
<span class="line"><span style="color:#89DDFF;">{</span><span style="color:#BABED8;"> [</span><span style="color:#BABED8;font-style:italic;">name</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> string</span><span style="color:#BABED8;">]</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> Function</span><span style="color:#89DDFF;"> }</span><span style="color:#89DDFF;"> &amp;</span><span style="color:#FFCB6B;"> ThisType</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">HelperThisValue</span><span style="color:#89DDFF;">&gt;</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> </span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#82AAFF;">  hello</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;"> function</span><span style="color:#89DDFF;">()</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;">    this.</span><span style="color:#82AAFF;">logError</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Error: Something Wrong</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">) </span><span style="color:#676E95;font-style:italic;">//正确</span></span>
<span class="line"><span style="color:#89DDFF;">    this.</span><span style="color:#82AAFF;">update</span><span style="color:#F07178;">() </span><span style="color:#676E95;font-style:italic;">// 报错</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>上面示例中，变量<code>helperFunctions</code>的类型是一个正常的对象类型与<code>ThisType&lt; HelperThisValue &gt;</code>组成的交叉类型。</p><p>这里的<code>ThisType</code>的作用是提示 TypeScript，变量<code>helperFunctions</code>的<code>this</code>应该满足<code>HelperThisValue</code>的条件。所以，<code>this.logError()</code>可以正确调用，而<code>this.update()</code>会报错，因为<code>HelperThisValue</code>里面没有这个方法。</p><div class="warning custom-block"><p class="custom-block-title">注意📌</p><p>注意，使用这个类型工具时，必须打开noImplicitThis设置。</p></div><p>下面是另一个例子:</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> obj</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> ThisType</span><span style="color:#89DDFF;">&lt;{</span><span style="color:#F07178;"> x</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> number</span><span style="color:#89DDFF;"> }&gt;</span><span style="color:#89DDFF;"> &amp;</span></span>
<span class="line"><span style="color:#89DDFF;">  {</span><span style="color:#F07178;"> getX</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> ()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#FFCB6B;"> number</span><span style="color:#89DDFF;"> };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">obj </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">  getX</span><span style="color:#89DDFF;">()</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    return</span><span style="color:#89DDFF;"> this.</span><span style="color:#BABED8;">x</span><span style="color:#89DDFF;"> +</span><span style="color:#89DDFF;"> this.</span><span style="color:#BABED8;">y</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> // 报错</span></span>
<span class="line"><span style="color:#89DDFF;">  },</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span></code></pre></div><p>上面示例中，<code>getX()</code>里面的<code>this.y</code>会报错，因为根据<code>ThisType&lt; { x: number } &gt;</code>，这个对象的<code>this</code>不包含属性<code>y</code>。</p><p><code>ThisType&lt; T &gt;</code>的实现就是一个空接口</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">interface</span><span style="color:#FFCB6B;"> ThisType</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;</span><span style="color:#89DDFF;"> {</span><span style="color:#89DDFF;"> }</span></span></code></pre></div>`,153),e=[o];function t(c,r,F,y,D,i){return a(),n("div",null,e)}const C=s(p,[["render",t]]);export{d as __pageData,C as default};
