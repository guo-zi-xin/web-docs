import{_ as s,o as a,c as n,a8 as l}from"./chunks/framework.Qf1t7Yq5.js";const o="/web-docs/assets/0402_ng-controller.7_KkD4HA.png",u=JSON.parse('{"title":"控制器ng-controller","description":"","frontmatter":{},"headers":[],"relativePath":"frame/angular/chapter04_3.md","filePath":"frame/angular/chapter04_3.md","lastUpdated":1704710069000}'),p={name:"frame/angular/chapter04_3.md"},t=l(`<h1 id="控制器ng-controller" tabindex="-1">控制器<code>ng-controller</code> <a class="header-anchor" href="#控制器ng-controller" aria-label="Permalink to &quot;控制器\`ng-controller\`&quot;">​</a></h1><p>控制器<code>ng-controller</code>是使用AngularJS的核心功能之一。在前一节我们已经了解了作用域的概念，<code>ng-controller</code>则是真正应用作用域来制作功能的核心部分。</p><p>应用<code>ng-controller</code>和应用<code>ng-app</code>类似，下面我们来尝试创建一个控制器吧！</p><p>还是在app.js中，我们创建一个控制器，代码如下：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#676E95;font-style:italic;">//app.js</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#BABED8;"> App </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> angular</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">module</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">App</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> [])</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">App</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">controller</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">FirstCtrl</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#C792EA;"> function</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">$scope</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#BABED8;">    $scope</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">data</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">      message </span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">Hello</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">    };</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>同时，我们在<code>index.html</code>中进行一些代码修改，最终代码如下：</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#89DDFF;">&lt;!</span><span style="color:#F07178;">DOCTYPE</span><span style="color:#C792EA;"> html</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">html</span><span style="color:#C792EA;"> lang</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">zh</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;"> ng-app</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">App</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">head</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">    &lt;</span><span style="color:#F07178;">meta</span><span style="color:#C792EA;"> charset</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">UTF-8</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    &lt;!-- 网页的标题，我们在这里使用了AngularJS的基本表达式 --&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">    &lt;</span><span style="color:#F07178;">title</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;">{{&quot;学习AngularJS 1.x&quot;}}</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">title</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">head</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">body</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    &lt;!-- 将FirstCtrl绑定到这个div标签上，这个标签中的内容将可以使用FirstCtrl中的数据--&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">    &lt;</span><span style="color:#F07178;">div</span><span style="color:#C792EA;"> ng-controller</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">FirstCtrl</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">        &lt;</span><span style="color:#F07178;">h1</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;">{{data.message + &quot; World!&quot;}}</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">h1</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">    &lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    &lt;!-- 以下表达式不会输出任何内容，因为它在FirstCtrl之外--&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">    &lt;</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;">下面的内容不会显示</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">    &lt;</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;">{{data.message}}</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    &lt;</span><span style="color:#F07178;">script</span><span style="color:#C792EA;"> type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">text/javascript</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;"> src</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">components/angular/angular.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">    &lt;</span><span style="color:#F07178;">script</span><span style="color:#C792EA;"> type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">text/javascript</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;"> src</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">js/app.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">body</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">html</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><p>刷新页面，我们可以看到运行的效果:</p><img src="`+o+`" alt="图4-2 ng-controller运行结果"><p>下面，我们再来分析下<code>ng-controller</code>的具体形式：</p><h2 id="ng-controller详解" tabindex="-1"><code>ng-controller</code>详解 <a class="header-anchor" href="#ng-controller详解" aria-label="Permalink to &quot;\`ng-controller\`详解&quot;">​</a></h2><h3 id="javascript部分" tabindex="-1">JavaScript部分 <a class="header-anchor" href="#javascript部分" aria-label="Permalink to &quot;JavaScript部分&quot;">​</a></h3><p>我们先分析<code>ng-controller</code>的JavaScript编码部分</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#676E95;font-style:italic;">//原有的ng-app声明部分</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#BABED8;"> App </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> angular</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">module</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">App</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> [])</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * App.controller 声明ng-controller的方法</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * “FirstCtrl” 这个ng-controller的名称</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * function($scope){} 这个ng-controller的实体，并注入$scope（下文详解）</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#BABED8;">App</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">controller</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">FirstCtrl</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#C792EA;"> function</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">$scope</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#BABED8;">    $scope</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">data</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">      message </span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">Hello</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">    };</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h4 id="function-scope-详解" tabindex="-1"><code>function($scope){}</code>详解 <a class="header-anchor" href="#function-scope-详解" aria-label="Permalink to &quot;\`function($scope){}\`详解&quot;">​</a></h4><p><code>funtion(){}</code>封装的函数，会被绑定到<code>FirstCtrl</code>上。这个概念相对容易理解，我们需要注意的，是我们在<code>function</code>中传入的<strong>参数</strong><code>$scope</code>。</p><p>与一般的函数声明时的参数不同，此处的参数是<strong>不可随意命名</strong>的，AngularJS会解析参数的名称，并转化为对应的对象传入。</p><p>这里使用的<code>$scope</code>，用于将<code>ng-controller</code>中的数据和HTML代码绑定起来，传入<code>$scope</code>的数据，可以直接在HTML代码中调用。在上面的例子中，我们对<code>$scope</code>传入了<code>{data:{message:&quot;Hello&quot;}}</code>对象，并在HTML代码中直接使用了<code>data.message</code>来调用。</p><p><code>data</code>命名并不是固定用法，我们也可以使用<code>$scope.shuju = {m:&quot;hello&quot;}</code>。（这里只是为了表明变量命名的约束，如果可能，请不要使用拼音命名的变量）。</p><p>值得注意的是，<code>$scope</code>之下除了可以传入数据外，还可以传入其他函数，比如我们声明一个<code>onClick</code>函数传入<code>$scope</code>之后，可在HTML页面中调用这个功能，实现比如按钮点击触发功能的效果。</p><h3 id="html中调用ng-controller中的数据" tabindex="-1">HTML中调用<code>ng-controller</code>中的数据 <a class="header-anchor" href="#html中调用ng-controller中的数据" aria-label="Permalink to &quot;HTML中调用\`ng-controller\`中的数据&quot;">​</a></h3><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">h1</span><span style="color:#89DDFF;">&gt;{{</span><span style="color:#BABED8;">data.message + </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;"> World!</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">}}&lt;/</span><span style="color:#F07178;">h1</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><p>在<code>$scope</code>中传入数据后，通过表达式可以直接调用。</p><h3 id="为什么要额外封装一层" tabindex="-1">为什么要额外封装一层 <a class="header-anchor" href="#为什么要额外封装一层" aria-label="Permalink to &quot;为什么要额外封装一层&quot;">​</a></h3><p>在AngularJS中，最简单传入数据的方法其实可以更简单，但是<strong>不推荐这样做</strong>。</p><p>最简单的做法</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#676E95;font-style:italic;">//JavaScript</span></span>
<span class="line"><span style="color:#BABED8;">$scope</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">message </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">Hello</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span></code></pre></div><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#BABED8;">//HTML</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#C792EA;"> ng-controller</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">FirstCtrl</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#BABED8;">  {{message}}</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><p>为什么不推荐这样做呢？因为在我们后续会学习应用<code>filter</code>或<code>directive</code>等功能时，或者将数据在多个<code>ng-controller</code>之间共享时，如果不对数据进行二次封装，可能会导致数据互相访问不了的情况。在使用AngularJS的时候，养成数据二次封装的习惯，可以避免很多这样的问题。</p>`,29),e=[t];function c(r,D,F,y,i,d){return a(),n("div",null,e)}const h=s(p,[["render",c]]);export{u as __pageData,h as default};
