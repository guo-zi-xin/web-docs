import{_ as s,o as n,c as a,R as l}from"./chunks/framework.AonOEUEq.js";const B=JSON.parse('{"title":"关于this指向","description":"","frontmatter":{},"headers":[],"relativePath":"native/javascript/关于this指向.md","filePath":"native/javascript/关于this指向.md","lastUpdated":1709739409000}'),p={name:"native/javascript/关于this指向.md"},o=l(`<h1 id="关于this指向" tabindex="-1">关于this指向 <a class="header-anchor" href="#关于this指向" aria-label="Permalink to &quot;关于this指向&quot;">​</a></h1><h3 id="this指向的规律" tabindex="-1">this指向的规律 <a class="header-anchor" href="#this指向的规律" aria-label="Permalink to &quot;this指向的规律&quot;">​</a></h3><ol><li><p>在函数体中， 非显式或隐式地简单调用函数时，在严格模式下， 函数内的 <code>this</code> 会 被绑定到 <code>undefined</code> 上， 在非严格模式下则会被绑定到全局对象 <code>window/global</code>上</p></li><li><p>一般使用 <code>new</code> 方法调用构造函数时， 构造函数的<code>this</code>会被绑定到新创建的对象上</p></li><li><p>一般通过 <code>call</code>、<code>apply</code>、<code>bind</code> 方法显式调用函数时，函数体内的 <code>this</code> 会被绑定到指定参数的对象上</p></li><li><p>一般通过上下文对象调用函数时，函数体内的<code>this</code> 会被绑定到该对象上, 在更复杂的嵌套关系中， <code>this</code>指向的是最后一个调用它的对象</p></li><li><p>在箭头函数中，<code>this</code> 指向是由外层(函数或全局)作用域来决定的</p></li></ol><h5 id="全局环境中的this" tabindex="-1">全局环境中的<code>this</code> <a class="header-anchor" href="#全局环境中的this" aria-label="Permalink to &quot;全局环境中的\`this\`&quot;">​</a></h5><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * 正常模式下 this指向的是 全局window对象</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#82AAFF;"> func1</span><span style="color:#89DDFF;"> ():</span><span style="color:#FFCB6B;">void</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">  console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *  严格模式下 this指向是 undefined</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#82AAFF;"> func2</span><span style="color:#89DDFF;"> ()</span><span style="color:#89DDFF;"> :</span><span style="color:#FFCB6B;">void</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;">  &#39;</span><span style="color:#C3E88D;">use strict</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#BABED8;">  console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">func1</span><span style="color:#BABED8;">() </span><span style="color:#676E95;font-style:italic;">// 打印 window</span></span>
<span class="line"><span style="color:#82AAFF;">func2</span><span style="color:#BABED8;">() </span><span style="color:#676E95;font-style:italic;">// 打印 undefined</span></span></code></pre></div><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> foo </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">  bar</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 10</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#82AAFF;">  func</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;"> function</span><span style="color:#89DDFF;"> ()</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">    console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#BABED8;">    console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this.</span><span style="color:#BABED8;">bar</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> func1 </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> foo</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">func</span></span>
<span class="line"><span style="color:#82AAFF;">func1</span><span style="color:#BABED8;">() </span><span style="color:#676E95;font-style:italic;">// this打印出来为 window this.bar打印出来为 undefined</span></span></code></pre></div><blockquote><p>上述示例中的<code>this</code>结果为<code>window</code>。 虽然<code>func</code>函数 是<code>foo</code> 对象中的方法，但是在赋值给<code>func1</code>之后， 调用<code>func1</code>是在全局<code>window</code>中执行的， 所以此时的<code>this</code>指 向<code>window</code>; 如果是直接调用 <code>foo.func()</code> 那么<code>this</code>指向的是<code>foo</code>对象</p></blockquote><h5 id="上下文对象中调用的this" tabindex="-1">上下文对象中调用的<code>this</code> <a class="header-anchor" href="#上下文对象中调用的this" aria-label="Permalink to &quot;上下文对象中调用的\`this\`&quot;">​</a></h5><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">interface</span><span style="color:#FFCB6B;"> Student</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">  name</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> string</span></span>
<span class="line"><span style="color:#F07178;">  fn</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> ()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#FFCB6B;"> Student</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> student</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> Student</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">  name</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">Lucas</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#82AAFF;">  fn</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;"> function</span><span style="color:#89DDFF;"> ()</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    return</span><span style="color:#89DDFF;"> this</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(student</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">fn</span><span style="color:#BABED8;">() </span><span style="color:#89DDFF;">===</span><span style="color:#BABED8;"> student) </span><span style="color:#676E95;font-style:italic;">// 返回true</span></span></code></pre></div><p><strong>当为更复杂的嵌套关系</strong></p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * 这里嵌套了两层对象， 此时this的指向应该是最后一个调用他的对象</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> person </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">  name</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">Lucas</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  brother</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">    name</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">Mike</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#82AAFF;">    fn</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;"> function</span><span style="color:#89DDFF;">()</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">      return</span><span style="color:#89DDFF;"> this.</span><span style="color:#BABED8;">name</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(person</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">brother</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">fn</span><span style="color:#BABED8;">()) </span><span style="color:#676E95;font-style:italic;">//输出Mike</span></span></code></pre></div><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> o1 </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">  text</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">o1</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#82AAFF;">  fn</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;"> function</span><span style="color:#89DDFF;"> ()</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    return</span><span style="color:#89DDFF;"> this.</span><span style="color:#BABED8;">text</span><span style="color:#F07178;"> </span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> o2 </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">  text</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">o2</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#82AAFF;">  fn</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;"> function</span><span style="color:#89DDFF;"> ()</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    return</span><span style="color:#BABED8;"> o1</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">fn</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> o3 </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">  text</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">o3</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#82AAFF;">  fn</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;"> function</span><span style="color:#89DDFF;"> ()</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;">    var</span><span style="color:#BABED8;"> fn</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> o1</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">fn</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    return</span><span style="color:#82AAFF;"> fn</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * 上述第一个例子中 函数返回了this.text, 并且通过o1对象直接调用， </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * 所以打印项为 &#39;o1&#39;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * 第二个例子中， 函数返回了 o1.fn()的调用 </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * 此时已经执行完成， 结果为&#39;o1&#39;,所以o2.fn() 打印 &#39;o1&#39;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * 第三个例子中， 通过把o1.fn 赋值给 fn 变量， return 的值时 执行fn函数， </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * 此时this指向window， window上没有text属性，所以返回undefined</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(o1</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">fn</span><span style="color:#BABED8;">()) </span><span style="color:#676E95;font-style:italic;">// &#39;o1&#39;</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(o2</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">fn</span><span style="color:#BABED8;">()) </span><span style="color:#676E95;font-style:italic;">// &#39;o1&#39;</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(o3</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">fn</span><span style="color:#BABED8;">()) </span><span style="color:#676E95;font-style:italic;">// undefined</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">拓展</p><p><strong>如果想要让console.log(o2.fn())语句输出为 o2 的处理方法</strong></p><ol><li><p>可以使用 <code>call</code>、<code>bind</code>、<code>apply</code> 修改<code>this</code>指向的方法， 将<code>this</code>指向到o2</p></li><li><p>也可以通过修改o2对象中return返回的调用方式：</p></li></ol><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> o1 </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">  text</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">o1</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#82AAFF;">  fn</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;"> function</span><span style="color:#89DDFF;"> ()</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    return</span><span style="color:#89DDFF;"> this.</span><span style="color:#BABED8;">text</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> o2 </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">  text</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">o2</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  fn</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> o1</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">fn</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(o2</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">fn</span><span style="color:#BABED8;">()) </span><span style="color:#676E95;font-style:italic;">// 此时打印o2</span></span></code></pre></div></div><h5 id="通过bind、call、apply-改变this指向" tabindex="-1">通过bind、call、apply 改变this指向 <a class="header-anchor" href="#通过bind、call、apply-改变this指向" aria-label="Permalink to &quot;通过bind、call、apply 改变this指向&quot;">​</a></h5><blockquote><p><strong>它们都是用来改变相关函数的 this 指向， 但这个<code>call</code>、<code>apply</code>是直接进行相关函数调用的；<code>bind</code>不会执行相关函数，而是返回一个函数，这个新的函数已经自动绑定了新的<code>this</code>指向，我们可以手动调用它:</strong></p></blockquote><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 1</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> target </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> {}</span><span style="color:#BABED8;"> </span></span>
<span class="line"><span style="color:#BABED8;">fn</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">call</span><span style="color:#BABED8;">(target</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">arg1</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">arg2</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 2 </span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> target </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> {}</span></span>
<span class="line"><span style="color:#BABED8;">fn</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">apply</span><span style="color:#BABED8;">(target</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> [</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">arg1</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">arg2</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">])</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 3 </span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> target </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> {}</span></span>
<span class="line"><span style="color:#BABED8;">fn</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">bind</span><span style="color:#BABED8;">(target</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">arg1</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">arg2</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)()</span></span></code></pre></div><p><strong>示例</strong></p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> foo </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">  name</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">Lucas</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#82AAFF;">  logName</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;"> function</span><span style="color:#89DDFF;"> ()</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">    console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this.</span><span style="color:#BABED8;">name</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> bar </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">  name</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">Mike</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(foo</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">logName</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">call</span><span style="color:#BABED8;">(bar)) </span><span style="color:#676E95;font-style:italic;">// 输出为 &#39;Mike&#39;</span></span></code></pre></div><h5 id="构造函数和this" tabindex="-1">构造函数和this <a class="header-anchor" href="#构造函数和this" aria-label="Permalink to &quot;构造函数和this&quot;">​</a></h5><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#82AAFF;"> Foo</span><span style="color:#89DDFF;">()</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;">  this.</span><span style="color:#BABED8;">bar</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">Lucas</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> instance </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> new</span><span style="color:#82AAFF;"> Foo</span><span style="color:#BABED8;">()</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(instance</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">bar) </span><span style="color:#676E95;font-style:italic;">// 输出 &#39;Lucas&#39;</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title"><code>new</code>操作符的作用</p><p><code>new</code>操作符用于创建一个给定构造函数的实例对象</p><p><strong>主要的工作</strong></p><ul><li>创建一个新的对象<code>obj</code></li><li>将对象与构造函数通过原型链连接起来</li><li>将构造函数中的<code>this</code>绑定到新建的对象<code>obj</code>上</li><li>根据构造函数返回类型作为判断， 如果是原始值则被忽略，如果是返回对象， 需要正常处理</li></ul><p>上述过程可以用如下代码表述</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#BABED8;"> obj </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> {}</span></span>
<span class="line"><span style="color:#BABED8;">obj</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">__proto__ </span><span style="color:#89DDFF;">=</span><span style="color:#FFCB6B;"> Foo</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">prototype</span></span>
<span class="line"><span style="color:#BABED8;">Foo</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">call</span><span style="color:#BABED8;">(obj)</span></span></code></pre></div></div><p><strong>如果构造函数中出现了显式 <code>return</code> 的状况，那么需要注意，其可以洗分为两种情况</strong></p><ul><li>执行一个构造函数， 如果返回的是一个对象(复杂类型)， 则<code>this</code>指向被返回的对象</li></ul><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#82AAFF;"> Foo</span><span style="color:#89DDFF;"> ()</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;">  this.</span><span style="color:#BABED8;">user</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">Lucas</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> o</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> {}</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  return</span><span style="color:#BABED8;"> o</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> instance </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> new</span><span style="color:#82AAFF;"> Foo</span><span style="color:#BABED8;">()</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(instance</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">user) </span><span style="color:#676E95;font-style:italic;">// 输出 undefined</span></span></code></pre></div><ul><li>执行一个构造函数， 如果返回的不是一个对象(基本类型)，那么 <code>this</code>仍然指向实例</li></ul><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#82AAFF;"> Foo</span><span style="color:#89DDFF;"> ()</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;">  this.</span><span style="color:#BABED8;">user</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">Lucas</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> o</span><span style="color:#89DDFF;"> =</span><span style="color:#F78C6C;"> 1</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  return</span><span style="color:#BABED8;"> o</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> instance </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> new</span><span style="color:#82AAFF;"> Foo</span><span style="color:#BABED8;">()</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(instance</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">user) </span><span style="color:#676E95;font-style:italic;">// 输出 &#39;Lucas&#39;</span></span></code></pre></div><h5 id="箭头函数中的this" tabindex="-1">箭头函数中的this <a class="header-anchor" href="#箭头函数中的this" aria-label="Permalink to &quot;箭头函数中的this&quot;">​</a></h5><blockquote><p>箭头函数的<code>this</code>指向的是由其所属函数或者全局作用域决定的</p></blockquote><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * this 出现在 setTimeout的 匿名函数中， 因此this指向window对象</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> foo </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#82AAFF;">  fn</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;"> function</span><span style="color:#89DDFF;"> ()</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#82AAFF;">    setTimeout</span><span style="color:#F07178;">(</span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">()</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">      console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(foo</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">fn</span><span style="color:#BABED8;">()) </span><span style="color:#676E95;font-style:italic;">// 输出 window 对象</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * 如果想要this指向 foo 这个对象，则可以使用箭头函数来解决</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> foo </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#82AAFF;">  fn</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;"> function</span><span style="color:#89DDFF;"> ()</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#82AAFF;">    setTimeout</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">      console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(foo</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">fn</span><span style="color:#BABED8;">()) </span><span style="color:#676E95;font-style:italic;">// 此时this指向的 foo对象</span></span></code></pre></div><h3 id="this优先级" tabindex="-1">this优先级 <a class="header-anchor" href="#this优先级" aria-label="Permalink to &quot;this优先级&quot;">​</a></h3><p><strong>我们常常把通过 <code>call</code>、<code>bind</code>、<code>apply</code>、<code>new</code>对 <code>this</code>进行绑定的情况称为显示绑定；</strong></p><p><strong>根据调用关系确定<code>this</code>指向的情况称为隐式绑定</strong></p><blockquote><p>显示绑定的优先级会比隐式绑定的优先级高</p></blockquote><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#82AAFF;"> foo</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">a</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">  console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this.</span><span style="color:#BABED8;">a</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> obj1 </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">  a</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 1</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  foo</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> foo</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> obj2 </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">  a</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 2</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  foo</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> foo</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">obj1</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">foo</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">call</span><span style="color:#BABED8;">(obj2) </span><span style="color:#676E95;font-style:italic;">// 输出为2</span></span>
<span class="line"><span style="color:#BABED8;">obj2</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">foo</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">call</span><span style="color:#BABED8;">(obj1) </span><span style="color:#676E95;font-style:italic;">// 输出为1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * 说明 call apply 方法的优先级会更高</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span></code></pre></div><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#82AAFF;"> foo</span><span style="color:#89DDFF;"> (</span><span style="color:#BABED8;font-style:italic;">a</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;">  this.</span><span style="color:#BABED8;">a</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> a</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> obj1 </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> {}</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#BABED8;"> bar </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> foo</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">bind</span><span style="color:#BABED8;">(obj1)</span></span>
<span class="line"><span style="color:#82AAFF;">bar</span><span style="color:#BABED8;">(</span><span style="color:#F78C6C;">2</span><span style="color:#BABED8;">)</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(obj1</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">a) </span><span style="color:#676E95;font-style:italic;">//输出值为 2</span></span></code></pre></div><p>上述代码中通过<code>bind</code>函数中的<code>this</code>绑定为obj1对象。 执行bar(2)后， obj1的值为 {a: 2}, 所以输出值为2</p><blockquote><p><strong>当使用 bar作为构造函数时， new的优先级比bind绑定的优先级更高</strong></p></blockquote><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> bar1 </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> new</span><span style="color:#82AAFF;"> bar</span><span style="color:#BABED8;">(</span><span style="color:#F78C6C;">3</span><span style="color:#BABED8;">)</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(bar1) </span><span style="color:#676E95;font-style:italic;">// 输出 3</span></span></code></pre></div><blockquote><p>箭头函数的绑定无法被修改， 因此属于优先级高的一列</p></blockquote><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#82AAFF;"> foo</span><span style="color:#89DDFF;"> ()</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  return</span><span style="color:#BABED8;font-style:italic;"> a</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">    console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this.</span><span style="color:#BABED8;">a</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> obj1 </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">  a</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 2</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> obj2 </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">  a</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 3</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * 箭头函数捕获的是其外部作用域的 this 值，而不是在调用时绑定的 this 值。</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * 因此，无论如何调用 bar，它始终会打印 foo 函数所在作用域的 this.a 值，</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * 而不会受到 call 方法的影响。</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> bar </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> foo</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">call</span><span style="color:#BABED8;">(obj1) </span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(bar) </span><span style="color:#676E95;font-style:italic;">// 这一步打印结果为 foo函数体</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(bar</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">call</span><span style="color:#BABED8;">(obj2)) </span><span style="color:#676E95;font-style:italic;">// 这里打印的是 2</span></span></code></pre></div><blockquote><p>如果修改了foo函数为箭头函数的形式：</p></blockquote><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#BABED8;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;"> 123</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> foo </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> ()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#BABED8;font-style:italic;"> a</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">  console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this.</span><span style="color:#BABED8;">a</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> obj1 </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">  a</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 2</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> obj2 </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">  a</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 3</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#BABED8;"> bar </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> foo</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">call</span><span style="color:#BABED8;">(obj1)</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(bar</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">call</span><span style="color:#BABED8;">(obj2)) </span><span style="color:#676E95;font-style:italic;">// 输出为123， 因为箭头函数的this无法被修改</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">注意</p><p>如果把上述代码中的变量a的声明换成const 则 输出结果会被改变 因为 <strong><code>const</code>声明的变量是不会被放在全局作用域中， 他有自己的块级作用域</strong></p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#BABED8;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;"> 123</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> foo </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> ()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#BABED8;font-style:italic;"> a</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">  console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this.</span><span style="color:#BABED8;">a</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> obj1 </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">  a</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 2</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> obj2 </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">  a</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 3</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#BABED8;"> bar </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> foo</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">call</span><span style="color:#BABED8;">(obj1)</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(bar</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">call</span><span style="color:#BABED8;">(obj2)) </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *  输出为undefined， </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * 因为箭头函数的this无法被修改, </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * 并且 const 盛名的变量是块级作用域， 不在window全局对象中.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span></code></pre></div></div>`,43),e=[o];function c(t,r,y,F,D,i){return n(),a("div",null,e)}const E=s(p,[["render",c]]);export{B as __pageData,E as default};
