import{_ as s,o as a,c as n,a8 as l}from"./chunks/framework.Qf1t7Yq5.js";const A=JSON.parse('{"title":"ES6 数据类型的扩展","description":"","frontmatter":{},"headers":[],"relativePath":"native/javascript/ES6数据类型的扩展.md","filePath":"native/javascript/ES6数据类型的扩展.md","lastUpdated":1704707797000}'),o={name:"native/javascript/ES6数据类型的扩展.md"},p=l(`<h1 id="es6-数据类型的扩展" tabindex="-1">ES6 数据类型的扩展 <a class="header-anchor" href="#es6-数据类型的扩展" aria-label="Permalink to &quot;ES6 数据类型的扩展&quot;">​</a></h1><h3 id="字符串类型的扩展" tabindex="-1">字符串类型的扩展 <a class="header-anchor" href="#字符串类型的扩展" aria-label="Permalink to &quot;字符串类型的扩展&quot;">​</a></h3><h5 id="模版字符串" tabindex="-1">模版字符串 <a class="header-anchor" href="#模版字符串" aria-label="Permalink to &quot;模版字符串&quot;">​</a></h5><p><strong>使用反引号(\`)包裹的字符串, 支持多行文本和嵌入表达式</strong></p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> name </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">world</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> str </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> \`</span><span style="color:#C3E88D;">hello </span><span style="color:#89DDFF;">\${</span><span style="color:#BABED8;">name</span><span style="color:#89DDFF;">}\`</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> str1 </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> \`</span><span style="color:#C3E88D;">hello </span><span style="color:#89DDFF;">\${</span><span style="color:#BABED8;">name </span><span style="color:#89DDFF;">?</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">world</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;"> :</span><span style="color:#89DDFF;"> &#39;&#39;}\`</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(str) </span><span style="color:#676E95;font-style:italic;">// hello world</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(str) </span><span style="color:#676E95;font-style:italic;">// hello world</span></span></code></pre></div><h5 id="模版标签函数" tabindex="-1">模版标签函数 <a class="header-anchor" href="#模版标签函数" aria-label="Permalink to &quot;模版标签函数&quot;">​</a></h5><p><strong>允许定义自定义的字符串处理函数,以处理模版字符串</strong></p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> customTag </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> (</span><span style="color:#BABED8;font-style:italic;">strings</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> ...</span><span style="color:#BABED8;font-style:italic;">values</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">  console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">strings</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> // [&#39;Hello, &#39;, &#39;!&#39;]</span></span>
<span class="line"><span style="color:#BABED8;">  console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">values</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">  // [&#39;World&#39;]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  return</span><span style="color:#BABED8;"> strings</span><span style="color:#F07178;">[</span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">+</span><span style="color:#BABED8;"> values</span><span style="color:#F07178;">[</span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toUpperCase</span><span style="color:#F07178;">() </span><span style="color:#89DDFF;">+</span><span style="color:#BABED8;"> strings</span><span style="color:#F07178;">[</span><span style="color:#F78C6C;">1</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> name </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">world</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> result </span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;"> customTag</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">hello, </span><span style="color:#89DDFF;">\${</span><span style="color:#BABED8;">name</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">!</span><span style="color:#89DDFF;">\`</span><span style="color:#BABED8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(result) </span><span style="color:#676E95;font-style:italic;">// hello WORLD!</span></span></code></pre></div><h5 id="string-prototype-includes" tabindex="-1"><code>String.prototype.includes()</code> <a class="header-anchor" href="#string-prototype-includes" aria-label="Permalink to &quot;\`String.prototype.includes()\`&quot;">​</a></h5><p><strong>判断字符串是否包含指定字符, 返回布尔值</strong></p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> str </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">hello world</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(str</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">includes</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">world</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)) </span><span style="color:#676E95;font-style:italic;">// true</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(str</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">includes</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">foo</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)) </span><span style="color:#676E95;font-style:italic;">// false</span></span></code></pre></div><h5 id="string-prototype-startwith-string-prototype-endwith" tabindex="-1"><code>String.prototype.startWith()</code>/<code>String.prototype.endWith()</code> <a class="header-anchor" href="#string-prototype-startwith-string-prototype-endwith" aria-label="Permalink to &quot;\`String.prototype.startWith()\`/\`String.prototype.endWith()\`&quot;">​</a></h5><p><strong>判断字符串是否以指定的字符开始/结束, 返回布尔值</strong></p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> str </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">hello world</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 开始</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(str</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">startWith</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">hello</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)) </span><span style="color:#676E95;font-style:italic;">// true</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(str</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">startWith</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">foo</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)) </span><span style="color:#676E95;font-style:italic;">// false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 结束</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(str</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">endWith</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">world</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)) </span><span style="color:#676E95;font-style:italic;">// true</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(str</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">endWith</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">foo</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)) </span><span style="color:#676E95;font-style:italic;">// false</span></span></code></pre></div><h5 id="string-propotype-repeat" tabindex="-1"><code>String.propotype.repeat()</code> <a class="header-anchor" href="#string-propotype-repeat" aria-label="Permalink to &quot;\`String.propotype.repeat()\`&quot;">​</a></h5><p><strong>将字符串指定次数，返回新的字符串</strong></p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> str </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">hello world</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(str</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">repeat</span><span style="color:#BABED8;">(</span><span style="color:#F78C6C;">2</span><span style="color:#BABED8;">)) </span><span style="color:#676E95;font-style:italic;">// &#39;hello worldhello world&#39;</span></span></code></pre></div><h5 id="string-prototype-fromcodepoint" tabindex="-1"><code>String.prototype.fromCodePoint()</code> <a class="header-anchor" href="#string-prototype-fromcodepoint" aria-label="Permalink to &quot;\`String.prototype.fromCodePoint()\`&quot;">​</a></h5><p><strong>根据给定的码点创建一个字符串，它可以将一个或者多个码点转换为相应的字符</strong></p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(String</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">formCodePoint</span><span style="color:#BABED8;">(</span><span style="color:#F78C6C;">65</span><span style="color:#BABED8;">)) </span><span style="color:#676E95;font-style:italic;">// A</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(String</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">formCodePoint</span><span style="color:#BABED8;">(</span><span style="color:#F78C6C;">97</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;"> 98</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;"> 99</span><span style="color:#BABED8;">)) </span><span style="color:#676E95;font-style:italic;">// abc</span></span></code></pre></div><h5 id="string-prototype-raw" tabindex="-1"><code>String.prototype.raw()</code> <a class="header-anchor" href="#string-prototype-raw" aria-label="Permalink to &quot;\`String.prototype.raw()\`&quot;">​</a></h5><p><strong>用于获取一个模版字符串的原始字符串形式，忽略其中的转义字符</strong></p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> path </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">C:</span><span style="color:#BABED8;">\\\\</span><span style="color:#C3E88D;">Users</span><span style="color:#BABED8;">\\\\</span><span style="color:#C3E88D;">hhh</span><span style="color:#BABED8;">\\\\</span><span style="color:#C3E88D;">Documents</span><span style="color:#BABED8;">\\\\</span><span style="color:#C3E88D;">file.txt</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(String</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">raw</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">The file is located at </span><span style="color:#89DDFF;">\${</span><span style="color:#BABED8;">path</span><span style="color:#89DDFF;">}\`</span><span style="color:#BABED8;">))</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// The file is located at C:\\Users\\hhh\\Documents\\file.txt</span></span></code></pre></div><h5 id="string-prototype-codepointat" tabindex="-1"><code>String.prototype.codePointAt()</code> <a class="header-anchor" href="#string-prototype-codepointat" aria-label="Permalink to &quot;\`String.prototype.codePointAt()\`&quot;">​</a></h5><p><strong>用于返回指定位置的字符的码点</strong></p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> str </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">abc</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(str</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">codePointAt</span><span style="color:#BABED8;">(</span><span style="color:#F78C6C;">0</span><span style="color:#BABED8;">)) </span><span style="color:#676E95;font-style:italic;">// 97</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(str</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">codePointAt</span><span style="color:#BABED8;">(</span><span style="color:#F78C6C;">1</span><span style="color:#BABED8;">)) </span><span style="color:#676E95;font-style:italic;">// 98</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(str</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">codePointAt</span><span style="color:#BABED8;">(</span><span style="color:#F78C6C;">2</span><span style="color:#BABED8;">)) </span><span style="color:#676E95;font-style:italic;">// 99</span></span></code></pre></div><h5 id="string-prototype-normalize" tabindex="-1"><code>String.prototype.normalize()</code> <a class="header-anchor" href="#string-prototype-normalize" aria-label="Permalink to &quot;\`String.prototype.normalize()\`&quot;">​</a></h5><p><strong>用于将字符串的<code>Unicode</code> 标准化形式，它主要用于处理 <code>Unicode</code> 字符串的表达形式</strong></p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> str </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">c</span><span style="color:#BABED8;">\\u0327</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(str</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">normalize</span><span style="color:#BABED8;">()) </span><span style="color:#676E95;font-style:italic;">// c</span></span></code></pre></div><h3 id="数组类型的扩展" tabindex="-1">数组类型的扩展 <a class="header-anchor" href="#数组类型的扩展" aria-label="Permalink to &quot;数组类型的扩展&quot;">​</a></h3><h5 id="扩展运算符" tabindex="-1">扩展运算符(<code>...</code>) <a class="header-anchor" href="#扩展运算符" aria-label="Permalink to &quot;扩展运算符(\`...\`)&quot;">​</a></h5><p><strong>扩展运算符类似 rest 参数的逆运算， 将一个数组转为用逗号分隔的参数序列</strong></p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">...</span><span style="color:#BABED8;">[</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;"> 2</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;"> 3</span><span style="color:#BABED8;">])</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 1 2 3</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> ...</span><span style="color:#BABED8;">[</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;"> 3</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;"> 4</span><span style="color:#BABED8;">]</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;"> 5</span><span style="color:#BABED8;">)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 1, 2, 3, 4, 5</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">[</span><span style="color:#89DDFF;">...</span><span style="color:#BABED8;">document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">querySelectorAll</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">div</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)]</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// [&lt;div&gt;, &lt;div&gt;, &lt;div&gt;] 代表标签下的所有元素</span></span></code></pre></div><p><strong>该运算符主要用于函数调用</strong></p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 可以扩展函数参数</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> push </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> (</span><span style="color:#BABED8;font-style:italic;">arr</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> ...</span><span style="color:#BABED8;font-style:italic;">items</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">  arr</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">...</span><span style="color:#BABED8;">items</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> add </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> (</span><span style="color:#BABED8;font-style:italic;">x</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> y</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  return</span><span style="color:#BABED8;"> x</span><span style="color:#89DDFF;"> +</span><span style="color:#BABED8;"> y</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> numbers </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> [</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;"> 2</span><span style="color:#BABED8;">]</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 可以在调用时扩展实际传入的参数</span></span>
<span class="line"><span style="color:#82AAFF;">add</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">...</span><span style="color:#BABED8;">numbers)</span></span></code></pre></div><p><strong>扩展运算符后面还可以放置表达式</strong></p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> arr </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> [ </span><span style="color:#89DDFF;">...</span><span style="color:#BABED8;">(x </span><span style="color:#89DDFF;">&gt;</span><span style="color:#F78C6C;"> 0</span><span style="color:#89DDFF;"> ?</span><span style="color:#BABED8;"> [</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">a</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">] </span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> [])</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">b</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 如果扩展运算符后面是一个空数组，则不会有任何效果</span></span>
<span class="line"><span style="color:#BABED8;">[</span><span style="color:#89DDFF;">...</span><span style="color:#BABED8;">[]</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;"> 1</span><span style="color:#BABED8;">] </span><span style="color:#676E95;font-style:italic;">// [1]</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">注意</p><p>只有在函数调用时， 扩展运算符才能放在圆括号中，否则会报错</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">...</span><span style="color:#BABED8;">[</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;"> 2</span><span style="color:#BABED8;">])</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// Uncaught SyntaxErrot: Unexpected number</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">((</span><span style="color:#89DDFF;">...</span><span style="color:#BABED8;">[</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;"> 2</span><span style="color:#BABED8;">]))</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// Uncaught SyntaxError: Unexpected number</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">...</span><span style="color:#BABED8;">[</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;"> 2</span><span style="color:#BABED8;">]) </span><span style="color:#676E95;font-style:italic;">// 1 2</span></span></code></pre></div></div><p><strong>替代函数的 apply() 方法</strong></p><p>由于扩展运算符可以展开数组，所以不再需要<code>apply()</code> 方法转为函数的参数了</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#676E95;font-style:italic;">// ES5 写法</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#82AAFF;"> fun</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">x</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> y</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> z</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // ...</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#BABED8;"> args </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> [</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;"> 1</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;"> 2</span><span style="color:#BABED8;">]</span></span>
<span class="line"><span style="color:#BABED8;">fun</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">apply</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">null,</span><span style="color:#BABED8;"> args)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// ES6 写法</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> func </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> (</span><span style="color:#BABED8;font-style:italic;">x</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> y</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> z</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // ...</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> args </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> [</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;"> 1</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;"> 2</span><span style="color:#BABED8;">]</span></span>
<span class="line"><span style="color:#82AAFF;">func</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">...</span><span style="color:#BABED8;">args)</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">扩展运算符的应用</p><ul><li>下面是扩展运算符取代 <code>apply()</code> 方法的一个实际的例子， 应用 <code>Math.max()</code> 方法， 简化求出一个数组最大元素的写法</li></ul><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#676E95;font-style:italic;">// ES5 写法</span></span>
<span class="line"><span style="color:#BABED8;">Math</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">max</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">apply</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">null,</span><span style="color:#BABED8;"> [</span><span style="color:#F78C6C;">14</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;"> 3</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;"> 17</span><span style="color:#BABED8;">])</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// ES6 写法</span></span>
<span class="line"><span style="color:#BABED8;">Math</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">max</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">...</span><span style="color:#BABED8;">[</span><span style="color:#F78C6C;">14</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;"> 3</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;"> 17</span><span style="color:#BABED8;">])</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 两者都等同于</span></span>
<span class="line"><span style="color:#BABED8;">Math</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">max</span><span style="color:#BABED8;">(</span><span style="color:#F78C6C;">14</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;"> 3</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;"> 17</span><span style="color:#BABED8;">)</span></span></code></pre></div><ul><li>通过<code>push()</code>函数，将一个数组添加到另一个数组的尾部</li></ul><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#676E95;font-style:italic;">// ES5 写法</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#BABED8;"> arr1 </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> [</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;"> 1</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;"> 2</span><span style="color:#BABED8;">]</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#BABED8;"> arr2 </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> [</span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;"> 4</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;"> 5</span><span style="color:#BABED8;">]</span></span>
<span class="line"><span style="color:#FFCB6B;">Array</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">push</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">apply</span><span style="color:#BABED8;">(arr1</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> arr2)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//ES6 写法</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> arr1 </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> [</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;"> 1</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;"> 2</span><span style="color:#BABED8;">]</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> arr2 </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> [</span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;"> 4</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;"> 5</span><span style="color:#BABED8;">]</span></span>
<span class="line"><span style="color:#BABED8;">arr1</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">...</span><span style="color:#BABED8;">arr2)</span></span></code></pre></div></div><h5 id="array-prototype-from" tabindex="-1"><code>Array.prototype.from</code> <a class="header-anchor" href="#array-prototype-from" aria-label="Permalink to &quot;\`Array.prototype.from\`&quot;">​</a></h5><p><strong>该方法用于将两类对象转为真正的数组：类似数组的对象（array-like object）和可遍历（iterable）的对象（包括 ES6 新增的数据结构 Set 和 Map）</strong></p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> arrayLike </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> {</span><span style="color:#F78C6C;"> 0</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">a</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;"> 1</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">b</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;"> 2</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">c</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> length</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 3</span><span style="color:#89DDFF;"> }</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> arr </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> Array</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">from</span><span style="color:#BABED8;">(arrayLike)</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(arr) </span><span style="color:#676E95;font-style:italic;">// [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]</span></span></code></pre></div><p><strong>该方法还可以接收第二个参数，作用类似于数组的<code>map()</code> 方法， 用来对每个元素进行处理，将处理后的值放入返回的数组</strong></p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#BABED8;">Array</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">from</span><span style="color:#BABED8;">(arrayLike</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> x</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#BABED8;"> x </span><span style="color:#89DDFF;">*</span><span style="color:#BABED8;"> x)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 等同于</span></span>
<span class="line"><span style="color:#BABED8;">Array</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">from</span><span style="color:#BABED8;">(arrayLike)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">map</span><span style="color:#BABED8;">(</span><span style="color:#BABED8;font-style:italic;">x</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#BABED8;"> x </span><span style="color:#89DDFF;">*</span><span style="color:#BABED8;"> x)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">Array</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">from</span><span style="color:#BABED8;">([</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;"> 2</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;"> 3</span><span style="color:#BABED8;">]</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> (</span><span style="color:#BABED8;font-style:italic;">x</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#BABED8;"> x </span><span style="color:#89DDFF;">*</span><span style="color:#BABED8;"> x)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// [1, 4, 9]</span></span></code></pre></div><h5 id="array-prototype-of" tabindex="-1"><code>Array.prototype.of</code> <a class="header-anchor" href="#array-prototype-of" aria-label="Permalink to &quot;\`Array.prototype.of\`&quot;">​</a></h5><p><strong>根据传入的参数创建一个新数组</strong></p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> arr </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> Array</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">of</span><span style="color:#BABED8;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;"> 2</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;"> 3</span><span style="color:#BABED8;">)</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(arr) </span><span style="color:#676E95;font-style:italic;">// [1, 2, 3]</span></span></code></pre></div><details class="details custom-block"><summary><code>Array()</code>与 <code>Array.of()</code> 区别</summary><p><code>Array.of()</code>方法的主要目的，是弥补数组构造函数<code>Array()</code>的不足。 因为参数个数不同，会导致<code>Array()</code>的行为有差异</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#82AAFF;">Array</span><span style="color:#BABED8;">() </span><span style="color:#676E95;font-style:italic;">// []</span></span>
<span class="line"><span style="color:#82AAFF;">Array</span><span style="color:#BABED8;">(</span><span style="color:#F78C6C;">3</span><span style="color:#BABED8;">) </span><span style="color:#676E95;font-style:italic;">// [空值, 空值, 空值]</span></span>
<span class="line"><span style="color:#82AAFF;">Array</span><span style="color:#BABED8;">(</span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;"> 11</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;"> 8</span><span style="color:#BABED8;">) </span><span style="color:#676E95;font-style:italic;">// [3, 11, 8]</span></span></code></pre></div><p>上面代码中，<code>Array()</code> 方法没有参数、一个参数、三个参数时， 返回的结果不一样， 只有当参数不少于两个时，<code>Array()</code>才会返回由参数组成的新数组，参数只有一个正整数时，实际上是指定数组的长度</p><p><code>Array.of*()</code> 基本上可以用来替代<code>Array()</code> 或 <code>new Array()</code>, 并且不存在由于参数不同而导致的重载。它的行为非常统一</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#BABED8;">Array</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">of</span><span style="color:#BABED8;">() </span><span style="color:#676E95;font-style:italic;">// []</span></span>
<span class="line"><span style="color:#BABED8;">Array</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">of</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">undefined</span><span style="color:#BABED8;">) </span><span style="color:#676E95;font-style:italic;">// [undefined]</span></span>
<span class="line"><span style="color:#BABED8;">Array</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">of</span><span style="color:#BABED8;">(</span><span style="color:#F78C6C;">1</span><span style="color:#BABED8;">) </span><span style="color:#676E95;font-style:italic;">// [1]</span></span>
<span class="line"><span style="color:#BABED8;">Array</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">of</span><span style="color:#BABED8;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;"> 2</span><span style="color:#BABED8;">) </span><span style="color:#676E95;font-style:italic;">// [1, 2]</span></span></code></pre></div></details><h5 id="array-prototype-find-、array-prototype-findindex" tabindex="-1"><code>Array.prototype.find()</code>、<code>Array.prototype.findIndex()</code> <a class="header-anchor" href="#array-prototype-find-、array-prototype-findindex" aria-label="Permalink to &quot;\`Array.prototype.find()\`、\`Array.prototype.findIndex()\`&quot;">​</a></h5><p><strong><code>find()</code> 方法 返回数组中满足条件的第一个元素</strong></p><p><strong><code>findIndex()</code>方法 返回数组中满足条件的第一个元素的索引</strong></p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#676E95;font-style:italic;">// find</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> arr </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> [</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;"> 2</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;"> 3</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;"> 4</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;"> 5</span><span style="color:#BABED8;">]</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> found </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> arr</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">find</span><span style="color:#BABED8;">(</span><span style="color:#BABED8;font-style:italic;">e</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#BABED8;"> e </span><span style="color:#89DDFF;">&gt;</span><span style="color:#F78C6C;"> 3</span><span style="color:#BABED8;">)</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(found) </span><span style="color:#676E95;font-style:italic;">// 4</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// findIndex</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> arr </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> [</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;"> 2</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;"> 3</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;"> 4</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;"> 5</span><span style="color:#BABED8;">]</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> found </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> arr</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">find</span><span style="color:#BABED8;">(</span><span style="color:#BABED8;font-style:italic;">e</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#BABED8;"> e </span><span style="color:#89DDFF;">&gt;</span><span style="color:#F78C6C;"> 3</span><span style="color:#BABED8;">)</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(found) </span><span style="color:#676E95;font-style:italic;">// 3</span></span></code></pre></div><h5 id="array-prototype-fill" tabindex="-1"><code>Array.prototype.fill()</code> <a class="header-anchor" href="#array-prototype-fill" aria-label="Permalink to &quot;\`Array.prototype.fill()\`&quot;">​</a></h5><p><strong>使用固定值填充一个数组中从起始索引（默认为 0）到终止索引（默认为 array.length）内的全部元素</strong></p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> arr </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> [</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;"> 2</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;"> 3</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;"> 4</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;"> 5</span><span style="color:#BABED8;">]</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 使用 0 填充 从下标为1到下标为3的区间</span></span>
<span class="line"><span style="color:#BABED8;">arr</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">fill</span><span style="color:#BABED8;">(</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;"> 1</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;"> 3</span><span style="color:#BABED8;">)</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(arr) </span><span style="color:#676E95;font-style:italic;">// [1, 0, 0, 4, 5]</span></span></code></pre></div><h5 id="array-prototype-copywithin" tabindex="-1"><code>Array.prototype.copyWithin()</code> <a class="header-anchor" href="#array-prototype-copywithin" aria-label="Permalink to &quot;\`Array.prototype.copyWithin()\`&quot;">​</a></h5><p><strong>用于将数组中的一部分元素复制到指定位置，覆盖原有的元素</strong></p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> arr </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> [</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;"> 2</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;"> 3</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;"> 4</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;"> 5</span><span style="color:#BABED8;">]</span></span>
<span class="line"><span style="color:#BABED8;">arr</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">copyWithin</span><span style="color:#BABED8;">(</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;"> 3</span><span style="color:#BABED8;">) </span><span style="color:#676E95;font-style:italic;">// 将索引为3及其之后的元素复制到索引为0的位置</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(arr)</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> // 输出：[4, 5, 3, 4, 5]</span></span></code></pre></div><h5 id="array-prototype-keys-、array-prototype-values-、array-prototype-entries" tabindex="-1"><code>Array.prototype.keys()</code>、<code>Array.prototype.values()</code>、<code>Array.prototype.entries()</code> <a class="header-anchor" href="#array-prototype-keys-、array-prototype-values-、array-prototype-entries" aria-label="Permalink to &quot;\`Array.prototype.keys()\`、\`Array.prototype.values()\`、\`Array.prototype.entries()\`&quot;">​</a></h5><p>ES6 提供三个新的方法——<code>entries()</code>，<code>keys()</code>和<code>values()</code>——用于遍历数组。它们都返回一个遍历器对象, 可以用for...of循环进行遍历， 唯一的区别是<code>keys()</code>是对键名的遍历、<code>values()</code>是对键值的遍历，<code>entries()</code>是对键值对的遍历</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#BABED8;"> (</span><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> index </span><span style="color:#89DDFF;">of</span><span style="color:#BABED8;"> [</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">a</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">b</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">]</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">keys</span><span style="color:#BABED8;">()) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">  console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">index</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 0</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#BABED8;"> (</span><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> elem </span><span style="color:#89DDFF;">of</span><span style="color:#BABED8;"> [</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">a</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">b</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">]</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">values</span><span style="color:#BABED8;">()) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">  console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">elem</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// &#39;a&#39;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// &#39;b&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#BABED8;"> (</span><span style="color:#C792EA;">let</span><span style="color:#89DDFF;"> [</span><span style="color:#BABED8;">index</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> elem</span><span style="color:#89DDFF;">]</span><span style="color:#89DDFF;"> of</span><span style="color:#BABED8;"> [</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">a</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">b</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">]</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">entries</span><span style="color:#BABED8;">()) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;"> console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">index</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> elem</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 0 &quot;a&quot;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 1 &quot;b&quot;</span></span></code></pre></div><p><strong>数组空位</strong></p><p>ES6中对待数组空位的方式有所改变。空位指的是数组中某个位置没有任何值，例如<code>[1, , 3]</code>中的第二个元素是个空位， 在ES6之前，对待数组空位的方式是跳过它们，不进行任何操作。但在ES6中，空位被视为<code>undefined</code>的值。例如，使用ES6的数组方法时，空位会被当作<code>undefined</code>处理。</p><h3 id="对象类型的扩展" tabindex="-1">对象类型的扩展 <a class="header-anchor" href="#对象类型的扩展" aria-label="Permalink to &quot;对象类型的扩展&quot;">​</a></h3><h5 id="属性的简洁表示法" tabindex="-1">属性的简洁表示法 <a class="header-anchor" href="#属性的简洁表示法" aria-label="Permalink to &quot;属性的简洁表示法&quot;">​</a></h5><p><strong>ES6 允许在大括号里面，直接写入变量和函数，作为对象的属性和方法，这样的书写更加简洁</strong></p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> foo </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">bar</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> baz </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> {</span><span style="color:#BABED8;"> foo </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(baz) </span><span style="color:#676E95;font-style:italic;">// { foo: &#39;bar&#39; }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 等同于 </span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> baz </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> {</span><span style="color:#F07178;"> foo</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> foo </span><span style="color:#89DDFF;">}</span></span></code></pre></div><p><strong>除了属性简写，方法也可以简写</strong></p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> o </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">  method</span><span style="color:#89DDFF;">()</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    return</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">hello</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 等同于</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> o </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#82AAFF;">  method</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;"> function</span><span style="color:#89DDFF;">()</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    return</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">hello</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h5 id="属性名表达式" tabindex="-1">属性名表达式 <a class="header-anchor" href="#属性名表达式" aria-label="Permalink to &quot;属性名表达式&quot;">​</a></h5><p>Javascript 定义对象的属性， 有两种方法</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 方法一</span></span>
<span class="line"><span style="color:#BABED8;">obj</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">foo </span><span style="color:#89DDFF;">=</span><span style="color:#FF9CAC;"> true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 方法二</span></span>
<span class="line"><span style="color:#BABED8;">obj[</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">a</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;"> +</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">bc</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">] </span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;"> 123</span></span></code></pre></div><p>但是，如果使用字面量方式定义对象（使用大括号），在 ES5 中只能使用方法一（标识符）定义属性。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#BABED8;"> obj </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">  foo</span><span style="color:#89DDFF;">:</span><span style="color:#FF9CAC;"> true</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  abc</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 123</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span></code></pre></div><p>ES6中 对象定义属性名的方式也有了变化, ES6 允许字面量定义对象时，用方法二（表达式）作为对象的属性名，即把表达式放在方括号内。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> propKey </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">foo</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> obj </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">  [</span><span style="color:#BABED8;">propKey</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">:</span><span style="color:#FF9CAC;"> true</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  [</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">a</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;"> +</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#F07178;">bc</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 123</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h5 id="object-is-value1-value2" tabindex="-1"><code>Object.is(value1, value2)</code> <a class="header-anchor" href="#object-is-value1-value2" aria-label="Permalink to &quot;\`Object.is(value1, value2)\`&quot;">​</a></h5><p><strong>用于比较两个值是否相同</strong></p><p>与&quot;===&quot;操作符的行为类似，但有两个区别：一是Object.is(NaN, NaN)返回true，而&quot;===&quot;操作符返回false；二是Object.is(+0, -0)返回false，而&quot;===&quot;操作符返回true。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">is</span><span style="color:#BABED8;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;"> 1</span><span style="color:#BABED8;">))</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> // true</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">is</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">NaN,</span><span style="color:#89DDFF;"> NaN</span><span style="color:#BABED8;">))</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> // true</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">is</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">+</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> -</span><span style="color:#F78C6C;">0</span><span style="color:#BABED8;">))</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> // false</span></span></code></pre></div><h5 id="object-assign-target-sources" tabindex="-1"><code>Object.assign(target, ...sources)</code> <a class="header-anchor" href="#object-assign-target-sources" aria-label="Permalink to &quot;\`Object.assign(target, ...sources)\`&quot;">​</a></h5><p><strong>将一个或多个源对象的属性复制到目标对象中。它返回目标对象。如果多个源对象具有相同的属性，则后面的对象的属性将覆盖前面的对象的属性</strong></p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> target </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> {</span><span style="color:#F07178;"> a</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 1</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> b</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 2</span><span style="color:#89DDFF;"> };</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> source </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> {</span><span style="color:#F07178;"> b</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 3</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> c</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 4</span><span style="color:#89DDFF;"> };</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> result </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">assign</span><span style="color:#BABED8;">(target</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> source)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(result)</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> // { a: 1, b: 3, c: 4 }</span></span></code></pre></div><h5 id="object-getprototypeof-obj" tabindex="-1"><code>Object.getPrototypeOf(obj)</code> <a class="header-anchor" href="#object-getprototypeof-obj" aria-label="Permalink to &quot;\`Object.getPrototypeOf(obj)\`&quot;">​</a></h5><p>用于获取对象的原型。它返回指定对象的原型。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> obj </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> {};</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> prototype </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getPrototypeOf</span><span style="color:#BABED8;">(obj)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(prototype)</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> // {}</span></span></code></pre></div><h5 id="object-setprototypeof-obj-prototype" tabindex="-1"><code>Object.setPrototypeOf(obj, prototype)</code> <a class="header-anchor" href="#object-setprototypeof-obj-prototype" aria-label="Permalink to &quot;\`Object.setPrototypeOf(obj, prototype)\`&quot;">​</a></h5><p>用于设置对象的原型。它将指定对象的原型设置为另一个对象或null。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> obj </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> {};</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> prototype </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> {</span><span style="color:#F07178;"> a</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 1</span><span style="color:#89DDFF;"> };</span></span>
<span class="line"><span style="color:#BABED8;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setPrototypeOf</span><span style="color:#BABED8;">(obj</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> prototype)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(obj</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">a)</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> // 1</span></span></code></pre></div><h3 id="正则的扩展" tabindex="-1">正则的扩展 <a class="header-anchor" href="#正则的扩展" aria-label="Permalink to &quot;正则的扩展&quot;">​</a></h3><h5 id="regexp构造函数的扩展" tabindex="-1"><code>RegExp构造函数的扩展</code> <a class="header-anchor" href="#regexp构造函数的扩展" aria-label="Permalink to &quot;\`RegExp构造函数的扩展\`&quot;">​</a></h5><p>在ES6之前，RegExp构造函数不允许使用第二个参数添加修饰符。在ES6中，如果RegExp构造函数第一个参数是一个正则对象，那么可以使用第二个参数指定修饰符。 而且，返回的正则表达式会忽略原有的正则表达式的修饰符，只使用新指定的修饰符</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">new</span><span style="color:#82AAFF;"> RegExp</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">abc</span><span style="color:#89DDFF;">/</span><span style="color:#F78C6C;">ig</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">i</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">flags)</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">// &quot;i&quot;</span></span></code></pre></div><h5 id="flags属性" tabindex="-1"><code>Flags属性</code> <a class="header-anchor" href="#flags属性" aria-label="Permalink to &quot;\`Flags属性\`&quot;">​</a></h5><p>用于返回正则表达式的修饰符</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> regex </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> /</span><span style="color:#C3E88D;">abc</span><span style="color:#89DDFF;">/</span><span style="color:#F78C6C;">gi</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(regex</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">flags)</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> // &quot;gi&quot;</span></span></code></pre></div><h5 id="u修饰符" tabindex="-1"><code>u修饰符</code> <a class="header-anchor" href="#u修饰符" aria-label="Permalink to &quot;\`u修饰符\`&quot;">​</a></h5><p>用于处理大于<code>\\uFFFF</code>的Unicode字符。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">/</span><span style="color:#89DDFF;font-style:italic;">^</span><span style="color:#C3E88D;">\\S</span><span style="color:#89DDFF;font-style:italic;">$</span><span style="color:#89DDFF;">/</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">test</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">𠮷</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">))</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">// false</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">/</span><span style="color:#89DDFF;font-style:italic;">^</span><span style="color:#C3E88D;">\\S</span><span style="color:#89DDFF;font-style:italic;">$</span><span style="color:#89DDFF;">/</span><span style="color:#F78C6C;">u</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">test</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">𠮷</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">))</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">// true</span></span></code></pre></div><h5 id="y修饰符" tabindex="-1"><code>y修饰符</code> <a class="header-anchor" href="#y修饰符" aria-label="Permalink to &quot;\`y修饰符\`&quot;">​</a></h5><p>也称为“粘连”修饰符，用于指定只从目标字符串的当前位置开始匹配</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> regex </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> /</span><span style="color:#C3E88D;">abc</span><span style="color:#89DDFF;">/</span><span style="color:#F78C6C;">y</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(regex</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">exec</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">abcabc</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">))</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> // [ &#39;abc&#39;, index: 0, input: &#39;abcabc&#39;, groups: undefined ]</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(regex</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">exec</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">abcabc</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">))</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> // [ &#39;abc&#39;, index: 3, input: &#39;abcabc&#39;, groups: undefined ] 因为第二次匹配从上一次匹配的结束位置开始</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(regex</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">exec</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">abcabc</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">))</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> // null</span></span></code></pre></div><h5 id="regexp-prototype-sticky-regexp-prototype-unicode" tabindex="-1"><code>RegExp.prototype.sticky</code>/<code>RegExp.prototype.unicode</code> <a class="header-anchor" href="#regexp-prototype-sticky-regexp-prototype-unicode" aria-label="Permalink to &quot;\`RegExp.prototype.sticky\`/\`RegExp.prototype.unicode\`&quot;">​</a></h5><p>表示是否有y修饰符/表示是否有u修饰符</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">hello\\d</span><span style="color:#89DDFF;">/</span><span style="color:#F78C6C;">y</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">sticky)</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">//true</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">hello\\d</span><span style="color:#89DDFF;">/</span><span style="color:#F78C6C;">u</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">unicode)</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">//true</span></span></code></pre></div><h5 id="正则方法调用变更" tabindex="-1">正则方法调用变更 <a class="header-anchor" href="#正则方法调用变更" aria-label="Permalink to &quot;正则方法调用变更&quot;">​</a></h5><p>字符串对象的<code>match()</code>、<code>replace()</code>、<code>search()</code>、<code>split()</code>内部调用转为调用RegExp实例对应的<code>RegExp.prototype[Symbol.方法]</code></p><h3 id="函数类型的扩展" tabindex="-1">函数类型的扩展 <a class="header-anchor" href="#函数类型的扩展" aria-label="Permalink to &quot;函数类型的扩展&quot;">​</a></h3><h5 id="基本用法" tabindex="-1">基本用法 <a class="header-anchor" href="#基本用法" aria-label="Permalink to &quot;基本用法&quot;">​</a></h5><p>ES6 之前，不能直接为函数的参数指定默认值，只能采用变通的方法。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#82AAFF;"> func</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">x</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> y</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">  y</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> y</span><span style="color:#89DDFF;"> ||</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">World</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">  console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">x</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> y</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">func</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Hello</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">) </span><span style="color:#676E95;font-style:italic;">// Hello World</span></span>
<span class="line"><span style="color:#82AAFF;">func</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Hello</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">China</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">) </span><span style="color:#676E95;font-style:italic;">// Hello China</span></span>
<span class="line"><span style="color:#82AAFF;">func</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Hello</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &#39;&#39;</span><span style="color:#BABED8;">) </span><span style="color:#676E95;font-style:italic;">// Hello World</span></span></code></pre></div><p>ES6 允许为函数的参数设置默认值，即直接写在参数定义的后面</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> func </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> (</span><span style="color:#BABED8;font-style:italic;">x</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> y</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">world</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">x</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> y</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">func</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Hello</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">) </span><span style="color:#676E95;font-style:italic;">// Hello World</span></span>
<span class="line"><span style="color:#82AAFF;">func</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Hello</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">China</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">) </span><span style="color:#676E95;font-style:italic;">// Hello China</span></span>
<span class="line"><span style="color:#82AAFF;">func</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Hello</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &#39;&#39;</span><span style="color:#BABED8;">) </span><span style="color:#676E95;font-style:italic;">// Hello</span></span></code></pre></div><blockquote><p>注意: 参数变量是默认声明的， 所以不能使用<code>let</code>或<code>const</code>再次声明</p></blockquote><h3 id="运算符的扩展" tabindex="-1">运算符的扩展 <a class="header-anchor" href="#运算符的扩展" aria-label="Permalink to &quot;运算符的扩展&quot;">​</a></h3><h5 id="es6-新增了一个指数运算符" tabindex="-1">ES6 新增了一个指数运算符(<code>**</code>) <a class="header-anchor" href="#es6-新增了一个指数运算符" aria-label="Permalink to &quot;ES6 新增了一个指数运算符(\`**\`)&quot;">​</a></h5><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;"> **</span><span style="color:#F78C6C;"> 2</span><span style="color:#676E95;font-style:italic;"> // 4</span></span>
<span class="line"><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;"> **</span><span style="color:#F78C6C;"> 3</span><span style="color:#676E95;font-style:italic;"> // 8</span></span></code></pre></div><p>这个运算符的一个特点是右结合，而不是常见的左结合。多个指数运算符连用时，是从最右边开始计算的。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;"> **</span><span style="color:#F78C6C;"> 3</span><span style="color:#89DDFF;"> **</span><span style="color:#F78C6C;"> 2</span><span style="color:#676E95;font-style:italic;">  // 相当于 2 ** (3 ** 2)</span></span></code></pre></div>`,122),e=[p];function t(c,r,y,D,F,i){return a(),n("div",null,e)}const E=s(o,[["render",t]]);export{A as __pageData,E as default};
