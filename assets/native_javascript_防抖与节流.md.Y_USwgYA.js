import{_ as a}from"./chunks/CustomLink.YSvj3KpE.js";import{_ as n,o as l,c as p,J as o,a8 as e}from"./chunks/framework.Qf1t7Yq5.js";const d=JSON.parse('{"title":"防抖与节流","description":"","frontmatter":{},"headers":[],"relativePath":"native/javascript/防抖与节流.md","filePath":"native/javascript/防抖与节流.md","lastUpdated":1703237841000}'),t={name:"native/javascript/防抖与节流.md"},c=e(`<h1 id="防抖与节流" tabindex="-1">防抖与节流 <a class="header-anchor" href="#防抖与节流" aria-label="Permalink to &quot;防抖与节流&quot;">​</a></h1><p>防抖与节流本质上是优化高频率代码的一种手段， 如浏览器的 <code>resize</code>、<code>scroll</code>、<code>keypress</code>、 <code>mousemove</code>等事件在触发时，会不断调用绑定在事件上的回调函数， 极大的浪费资源，降低页面性能</p><p>为了优化体验，需要对这类事件进行调用次数限制，对此我们就可以采用 *防抖(debounce)*和 *节流(throttle)*的方式来减少调用频率</p><h3 id="节流-throttle" tabindex="-1">节流(throttle) <a class="header-anchor" href="#节流-throttle" aria-label="Permalink to &quot;节流(throttle)&quot;">​</a></h3><p><strong>定义</strong></p><p>节流是指程序在n秒内只运行一次，若在这个时间段内重复触发，则只生效一次</p><h5 id="节流实现方式" tabindex="-1">节流实现方式 <a class="header-anchor" href="#节流实现方式" aria-label="Permalink to &quot;节流实现方式&quot;">​</a></h5><p>声明一个变量当标志位，记录当前代码是否在执行，如果正在执行，取消这次方法的执行，直接 retun， 如果有空闲，正常触发方法执行</p><ul><li><p>时间戳写法</p><p>事件会立即执行，停止触发后没有办法再次执行</p></li></ul><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> throttleDate </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> (</span><span style="color:#BABED8;font-style:italic;">fn</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> delay</span><span style="color:#89DDFF;"> =</span><span style="color:#F78C6C;"> 500</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;">  let</span><span style="color:#BABED8;"> oldtTme</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> Date</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">now</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  return</span><span style="color:#C792EA;"> function</span><span style="color:#89DDFF;"> (...</span><span style="color:#BABED8;font-style:italic;">args</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;">    let</span><span style="color:#BABED8;"> newTime</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> Date</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">now</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">newTime</span><span style="color:#89DDFF;"> -</span><span style="color:#BABED8;"> oldTime</span><span style="color:#89DDFF;"> &gt;=</span><span style="color:#BABED8;"> delay</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">      fn</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">apply</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">null,</span><span style="color:#BABED8;"> args</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#BABED8;">      oldTime</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> Date</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">now</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span><span style="color:#F07178;"> </span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><ul><li><p>定时器写法</p><p>delay 毫秒后第一次执行，第二次事件停止触发后依然会再一次执行</p></li></ul><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> throttleInterval </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> (</span><span style="color:#BABED8;font-style:italic;">fn</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> delay</span><span style="color:#89DDFF;"> =</span><span style="color:#F78C6C;"> 500</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;">  let</span><span style="color:#BABED8;"> timer</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> null</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  return</span><span style="color:#C792EA;"> function</span><span style="color:#89DDFF;"> (...</span><span style="color:#BABED8;font-style:italic;">args</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">timer</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">      timer</span><span style="color:#89DDFF;"> =</span><span style="color:#82AAFF;"> setTimeout</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">        fn</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">apply</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this,</span><span style="color:#BABED8;"> args</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#BABED8;">        timer</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> null</span></span>
<span class="line"><span style="color:#89DDFF;">      },</span><span style="color:#BABED8;"> delay</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span><span style="color:#F07178;"> </span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><ul><li>两者结合</li></ul><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> throttled </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> (</span><span style="color:#BABED8;font-style:italic;">fn</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> delay</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;">  let</span><span style="color:#BABED8;"> timer</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> null</span></span>
<span class="line"><span style="color:#C792EA;">  let</span><span style="color:#BABED8;"> startTime</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> Date</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">now</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  return</span><span style="color:#C792EA;"> function</span><span style="color:#89DDFF;"> ()</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;">    let</span><span style="color:#BABED8;"> curTime</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> Date</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">now</span><span style="color:#F07178;">() </span><span style="color:#676E95;font-style:italic;">// 当前时间</span></span>
<span class="line"><span style="color:#C792EA;">    let</span><span style="color:#BABED8;"> remaining</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> delay</span><span style="color:#89DDFF;"> -</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">curTime</span><span style="color:#89DDFF;"> -</span><span style="color:#BABED8;"> startTime</span><span style="color:#F07178;">) </span><span style="color:#676E95;font-style:italic;">// 从上一次到现在，还剩下多少剩余时间</span></span>
<span class="line"><span style="color:#C792EA;">    let</span><span style="color:#BABED8;"> context</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> this</span></span>
<span class="line"><span style="color:#C792EA;">    let</span><span style="color:#BABED8;"> args</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> arguments</span></span>
<span class="line"><span style="color:#82AAFF;">    clearTimeout</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">timer</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">remaining</span><span style="color:#89DDFF;"> &lt;=</span><span style="color:#F78C6C;"> 0</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">      fn</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">apply</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">context</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> args</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#BABED8;">      startTime</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> Date</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">now</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span><span style="color:#89DDFF;font-style:italic;"> else</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">      timer</span><span style="color:#89DDFF;"> =</span><span style="color:#82AAFF;"> setTimeout</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">fn</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> remaining</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h3 id="防抖-debounce" tabindex="-1">防抖(debounce) <a class="header-anchor" href="#防抖-debounce" aria-label="Permalink to &quot;防抖(debounce)&quot;">​</a></h3><p>防抖是指要在n秒后开始执行程序, 若在这个时间段内被重复触发，则重新开始计时</p><h5 id="防抖实现方式" tabindex="-1">防抖实现方式 <a class="header-anchor" href="#防抖实现方式" aria-label="Permalink to &quot;防抖实现方式&quot;">​</a></h5><p>需要一个延时定时器来辅助实现，延迟执行需要执行的代码，如果方法多次触发，把上次记录的延迟执行代码用 clearTimeout 清除掉， 重新开始计时， 如果计时完毕，没有方法来访问触发， 则执行代码</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> debounce </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> (</span><span style="color:#BABED8;font-style:italic;">func</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> wait</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;"> let</span><span style="color:#BABED8;"> timeout</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;"> return</span><span style="color:#C792EA;"> function</span><span style="color:#89DDFF;"> ()</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;">  let</span><span style="color:#BABED8;"> context</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> this</span><span style="color:#676E95;font-style:italic;"> // 保存this指向</span></span>
<span class="line"><span style="color:#C792EA;">  let</span><span style="color:#BABED8;"> args</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> arguments</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> // 参数对象</span></span>
<span class="line"><span style="color:#82AAFF;">  clearTimeout</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">timeout</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#BABED8;">  timeout</span><span style="color:#89DDFF;"> =</span><span style="color:#82AAFF;"> setTimeout</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">()</span><span style="color:#C792EA;">=&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">    fn</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">apply</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">context</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> args</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">  },</span><span style="color:#BABED8;"> wait</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;"> }</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><ul><li>立即执行版本</li></ul><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> debounce </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> (</span><span style="color:#BABED8;font-style:italic;">func</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> wait</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> immediate</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;">  let</span><span style="color:#BABED8;"> timeout</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  return</span><span style="color:#C792EA;"> function</span><span style="color:#89DDFF;"> ()</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;">    let</span><span style="color:#BABED8;"> context</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> this</span></span>
<span class="line"><span style="color:#C792EA;">    let</span><span style="color:#BABED8;"> args</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> arguments</span></span>
<span class="line"><span style="color:#F07178;">    </span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">timeout</span><span style="color:#F07178;">) </span><span style="color:#82AAFF;">clearTimeout</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">timeout</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> // timeout 不为null</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">immediate</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#C792EA;">      let</span><span style="color:#BABED8;"> callNow</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> !</span><span style="color:#BABED8;">timeout</span><span style="color:#676E95;font-style:italic;"> // 第一次会立即执行，以后只有事件执行后才会再次触发</span></span>
<span class="line"><span style="color:#BABED8;">      timeout</span><span style="color:#89DDFF;"> =</span><span style="color:#82AAFF;"> setTimeout</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">        timeout</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> null</span></span>
<span class="line"><span style="color:#89DDFF;">      }.</span><span style="color:#BABED8;"> wait</span><span style="color:#F07178;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">      if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">callNow</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">        func</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">apply</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">context</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> args</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">      }</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span><span style="color:#89DDFF;font-style:italic;"> else</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">      timeout</span><span style="color:#89DDFF;"> =</span><span style="color:#82AAFF;"> setTimeout</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">        func</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">apply</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">context</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> args</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">      },</span><span style="color:#BABED8;"> wait</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h3 id="区别" tabindex="-1">区别 <a class="header-anchor" href="#区别" aria-label="Permalink to &quot;区别&quot;">​</a></h3><p><strong>相同点</strong></p><ul><li>都可以通过 <code>setTimeout</code> 实现</li><li>目的都是，降低回调执行频率，节省计算资源</li></ul><p><strong>差异</strong></p><ul><li>防抖是在一段连续操作结束后，处理回调，利用<code>clearTimeout</code>和 <code>setTimeout</code> 来实现；而节流是在一段连续操作中，每一段时间只执行一次，频率较高的事件中使用来提高性能</li><li>防抖关注一定事件内连续触发的事件，只在最后执行一次，而函数节流一段时间内只执行一次</li></ul><h3 id="应用场景" tabindex="-1">应用场景 <a class="header-anchor" href="#应用场景" aria-label="Permalink to &quot;应用场景&quot;">​</a></h3><ul><li><p><strong>防抖</strong></p><ul><li>搜索框搜索输入，只需要用户最后一次输入完，再发送请求</li><li>手机号、邮箱验证输入检测</li><li>窗口大小<code>resize</code>， 只需要在窗口完成调整后，再计算窗口大小，防止重复渲染</li></ul></li><li><p><strong>节流</strong></p><ul><li>滚动加载，加载更多或滚到底部监听</li><li>搜索框的搜索联想功能</li></ul></li></ul><h2 id="来源" tabindex="-1">来源 <a class="header-anchor" href="#来源" aria-label="Permalink to &quot;来源&quot;">​</a></h2>`,29);function r(y,D,F,i,B,A){const s=a;return l(),p("div",null,[c,o(s,{title:"防抖与节流",href:"https://vue3js.cn/interview/JavaScript/debounce_throttle.html#%E4%BA%8C%E3%80%81%E5%8C%BA%E5%88%AB"})])}const m=n(t,[["render",r]]);export{d as __pageData,m as default};
