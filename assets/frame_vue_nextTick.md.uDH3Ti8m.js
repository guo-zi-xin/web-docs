import{_ as l}from"./chunks/CustomLink.HhFLulSs.js";import{_ as a,o as p,c as o,J as n,a8 as e,ae as t,af as c}from"./chunks/framework.QttzOlP4.js";const C=JSON.parse('{"title":"NextTick","description":"","frontmatter":{},"headers":[],"relativePath":"frame/vue/nextTick.md","filePath":"frame/vue/nextTick.md","lastUpdated":1702017785000}'),r={name:"frame/vue/nextTick.md"},F=e('<h1 id="nexttick" tabindex="-1">NextTick <a class="header-anchor" href="#nexttick" aria-label="Permalink to &quot;NextTick&quot;">​</a></h1><p>NextTick 是一个用于在下次 DOM 更新循环结束之后执行回调函数的方法。其内部原理涉及到 <code>Vue.js</code> 的异步更新队列以及浏览器的事件循环机制。</p><ul><li><p>在 Vue2 中，nextTick 的实现原理基于浏览器的异步任务队列和微任务队列。Vue2 默认使用微任务，在没有原生 Promise 和 MutationObserver 的情况下才会改用 setTimeout。</p></li><li><p>在 Vue3 中，nextTick 的实现原理基于 MutationObserver 和 Promise.resolve().then()。如果浏览器不支持原生 Promise，则使用 setTimeout 来模拟 Promise 的行为，并在回调函数执行前添加一个空的定时器来强制推迟执行。</p></li></ul><h3 id="异步任务队列" tabindex="-1">异步任务队列 <a class="header-anchor" href="#异步任务队列" aria-label="Permalink to &quot;异步任务队列&quot;">​</a></h3><p>浏览器中，每个宏任务结束后都会检查微任务队列， 如果有任务则依次执行，当所有微任务执行完成后，才会执行下一个宏任务。 因此可以通过将任务作为微任务添加到微任务队列中，来确保任务在所有宏任务执行完毕后立即执行</p><div class="info custom-block"><p class="custom-block-title">Javascript的事件运行机制</p><ul><li><p><strong>进程与线程</strong></p><ul><li>进程(<code>process</code>): 资源分配最小单位， 进程是应用的执行实例，是操作系统进行资源分配和调度的一个独立单位， 如果把计算机CPU必做一个工厂的话， 那么进程就相当于工厂中的车间， 代表CPU所能处理的单个任务</li><li>线程(<code>thread</code>): 线程是进程内部的一个执行单元，是被系统独立调度和分派的基本单位， 系统创建好进程后， 实际上就启动执行了该进程的主执行线程， 线程则相当于车间里的工人， 一个车间会有多个工人在工作， 所以一个进程可以包含多个线程</li><li><strong>浏览器是多线程的， 所以它可以一次能够处理多个事件，比如渲染页面，脚本执行，事件处理等等</strong></li><li><strong>JS则是单线程的， 浏览器只给JS分配了一个线程</strong></li></ul></li><li><p><strong>执行栈与任务队列</strong></p><ul><li>执行栈：执行栈使用到的是数据结构中的栈结构，它是一个存储函数调用的栈结构， 遵循<strong>先进后出</strong>的原则， 它主要负责跟踪所有要执行的代码。每当一个函数执行完成时， 就会从堆栈中探出(pop)这个执行完成的函数， 如果有代码需要进去执行的话， 就进行push操作</li><li>任务队列：任务队列使用到的是数据结构中的队列结构， 它用来保存异步任务，遵循 <strong>先进先出</strong>原则， 它主要负责将新的任务发送到队列中进行处理</li></ul><p>执行顺序： 先执行同步任务， 执行完接着执行微任务， 最后执行宏任务。 这个过程会不断重复</p></li></ul><img src="'+t+'" alt="任务执行顺序"><ul><li><strong>事件循环机制</strong></li></ul><img src="'+c+`" alt="事件循环机制"><p>**宏任务(<code>microtask</code>)<strong>与</strong>微任务(<code>macrotask</code>)**是指在事件循环中两种不同类型的任务</p><ul><li><p><strong>宏任务</strong></p><ul><li><code>script</code>全局代码</li><li><code>setTimeout</code> 一次性定时器</li><li><code>setInterval</code> 持续性定时器</li><li><code>Node中的 setImmediate</code></li><li><code>I/O</code></li><li><code>UI-rendering</code>的交互事件</li></ul></li><li><p><strong>微任务</strong></p><ul><li><code>Promise.then(回调)</code></li><li><code>MutaionObserver</code></li><li><code>process.nextTick()</code></li><li><code>async await</code></li></ul></li></ul></div><h3 id="vue2" tabindex="-1"><strong>Vue2</strong> <a class="header-anchor" href="#vue2" aria-label="Permalink to &quot;**Vue2**&quot;">​</a></h3><p>看下面一个例子，比如当DOM内容改变后， 我们需要获取的最新高度</p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">  &lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;{{</span><span style="color:#BABED8;">name</span><span style="color:#89DDFF;">}}&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#82AAFF;">  data</span><span style="color:#BABED8;">() </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    return</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">      name</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#89DDFF;">  },</span></span>
<span class="line"><span style="color:#82AAFF;">  mounted</span><span style="color:#BABED8;">() </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">    console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this.</span><span style="color:#BABED8;">$el</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">clientHeight</span><span style="color:#F07178;">) </span><span style="color:#676E95;font-style:italic;">// 0</span></span>
<span class="line"><span style="color:#89DDFF;">    this.</span><span style="color:#BABED8;">name</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">我的胃来食</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 在执行this.name = ‘我的胃来食’的时候， 就会触发\`Watcher\`更新，</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    //  watcher会把自己放到一个队列</span></span>
<span class="line"><span style="color:#BABED8;">    console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this.</span><span style="color:#BABED8;">$el</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">clientHeight</span><span style="color:#F07178;">) </span><span style="color:#676E95;font-style:italic;">// 0</span></span>
<span class="line"><span style="color:#89DDFF;">    this.</span><span style="color:#82AAFF;">$nextTick</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">()</span><span style="color:#C792EA;">=&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">      console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this.</span><span style="color:#BABED8;">$el</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">clientHeight</span><span style="color:#F07178;">) </span><span style="color:#676E95;font-style:italic;">// 18</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><p>在watcher放到队列中后， 然后调用<code>nextTick()</code> 响应式派发更新的源码在这一块是这样的， 地址 <code>src/core/observer/scheduler.js</code></p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#C792EA;"> function</span><span style="color:#82AAFF;"> queueWatcher</span><span style="color:#89DDFF;"> (</span><span style="color:#BABED8;font-style:italic;">watcher</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> Watcher</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;">  ...</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 因为每次派发更新都会引起渲染，所以把所有watcher都放到nextTick里调用</span></span>
<span class="line"><span style="color:#82AAFF;">  nextTick</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">flushSchedulerQueue</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><blockquote><p>这里参数<code>flushSchedulerQueue</code>方法会被放到事件循环，主线程任务的行完成后就会执行这个函数， 对watcher队列排序、遍历执行watcher对应的run方法， 然后render， 更新视图</p><p>也就是说<code>this.name = &#39;我的胃来食&#39;</code>的时候， 任务队列可以简单理解成这样 <code>[flushSchedulerQueue]</code></p><p>然后下一行<code>console.log(...)</code> 由于会更新视图的任务 <code>flushSchedulerQueue</code>在任务队列里没有执行，所以无法拿到更新后的视图</p><p>然后执行到<code>this.$nextTick(fn)</code>的时候， 添加一个异步任务，这时的任务队列可以简单理解成这样： <code>[flushSchedulerQueue, fn]</code></p><p>然后同步任务就执行完了， 接着按顺序执行任务队列里的任务， 第一个任务执行就会更新视图， 后面自然而然地就得到更新后的视图了</p></blockquote><h4 id="nexttick源码" tabindex="-1">nextTick源码 <a class="header-anchor" href="#nexttick源码" aria-label="Permalink to &quot;nextTick源码&quot;">​</a></h4><ul><li><p>vue2中nextTick源码 路径： <code>src/core/util/next-tick.js</code></p><ul><li>这段源码分为两个部分， 一是判断当前环境能使用的最合适的<code>API</code>并保存异步函数， 二是调用异步函数执行回调队列</li></ul></li><li><p>环境判断</p><p>主要是判断用哪个宏任务或微任务， 因为宏任务耗费的时间是大于微任务的， 所以先使用微任务， 判断顺序如下</p><ul><li><code>Promise</code></li><li><code>MutationObserver</code></li><li><code>setimmediate</code></li><li><code>setTimeout</code></li></ul></li></ul><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#C792EA;"> let</span><span style="color:#BABED8;"> isUsingMicroTask </span><span style="color:#89DDFF;">=</span><span style="color:#FF9CAC;"> false</span><span style="color:#676E95;font-style:italic;">  // 是否启用微任务开关</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> callbacks </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> [] </span><span style="color:#676E95;font-style:italic;">// 回调队列</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> pending </span><span style="color:#89DDFF;">=</span><span style="color:#FF9CAC;"> false</span><span style="color:#676E95;font-style:italic;"> // 异步控制开关， 标记是否在执行回调函数</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 该方法负责执行队列中的全部回调</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#82AAFF;"> flushCallbacks</span><span style="color:#89DDFF;"> ()</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 重置异步开关</span></span>
<span class="line"><span style="color:#BABED8;">  pending</span><span style="color:#89DDFF;"> =</span><span style="color:#FF9CAC;"> false</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 防止nextTick里有nextTick出现的问题</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 所以执行之前就先备份并清空回调队列</span></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> copies</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> callbacks</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">slice</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#BABED8;">  callbacks</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">length</span><span style="color:#89DDFF;"> =</span><span style="color:#F78C6C;"> 0</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 执行任务队列</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  for</span><span style="color:#F07178;"> (</span><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> i</span><span style="color:#89DDFF;"> =</span><span style="color:#F78C6C;"> 0</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> i</span><span style="color:#89DDFF;"> &lt;</span><span style="color:#BABED8;"> copies</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">length</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> i</span><span style="color:#89DDFF;">++</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">    copies</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">i</span><span style="color:#F07178;">]()</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> timeFunc </span><span style="color:#676E95;font-style:italic;">// 用来保存调用异步任务方法</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 判断当前环境是否支持原生 Promise</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#BABED8;"> (</span><span style="color:#89DDFF;">typeof</span><span style="color:#FFCB6B;"> Promise</span><span style="color:#89DDFF;"> !==</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">undefined</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;"> &amp;&amp;</span><span style="color:#82AAFF;"> isNative</span><span style="color:#BABED8;">(</span><span style="color:#FFCB6B;">Promise</span><span style="color:#BABED8;">)) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 保存一个异步任务</span></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> p</span><span style="color:#89DDFF;"> =</span><span style="color:#FFCB6B;"> Promise</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">resolve</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#82AAFF;">  timeFunc</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> ()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 执行回调函数</span></span>
<span class="line"><span style="color:#BABED8;">    p</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">then</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">flushCallback</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // ios 中可能会出现一个回调被推入微任务队列，但是队列没有刷新的情况</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 所以用一个空的计时器来强制刷新任务队列</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">isIos</span><span style="color:#F07178;">) </span><span style="color:#82AAFF;">setTimeout</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">noop</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#BABED8;">  isUsingMicroTask</span><span style="color:#89DDFF;"> =</span><span style="color:#FF9CAC;"> true</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#89DDFF;font-style:italic;"> else</span><span style="color:#89DDFF;font-style:italic;"> if</span><span style="color:#BABED8;"> (</span></span>
<span class="line"><span style="color:#89DDFF;">  !</span><span style="color:#BABED8;">isIE </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#89DDFF;"> typeof</span><span style="color:#BABED8;"> MutationObserver </span><span style="color:#89DDFF;">!==</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">undefined</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;"> &amp;&amp;</span><span style="color:#BABED8;"> </span></span>
<span class="line"><span style="color:#BABED8;">  (</span></span>
<span class="line"><span style="color:#82AAFF;">    isNative</span><span style="color:#BABED8;">(MutationObserver) </span><span style="color:#89DDFF;">||</span></span>
<span class="line"><span style="color:#BABED8;">     MutationObserver</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toString</span><span style="color:#BABED8;">() </span><span style="color:#89DDFF;">===</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">[object MutationObserverConstructor]</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span></span>
<span class="line"><span style="color:#BABED8;">  ) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 不支持 Promise 的话， 在支持MutationObserver的非 IE 环境下</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 如 PhantomJS ios7 Android 4.4</span></span>
<span class="line"><span style="color:#C792EA;">  let</span><span style="color:#BABED8;"> counter</span><span style="color:#89DDFF;"> =</span><span style="color:#F78C6C;"> 1</span></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> observer</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> new</span><span style="color:#82AAFF;"> MutationObserver</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">flushCallbacks</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> textNode</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">createTextNode</span><span style="color:#F07178;">(</span><span style="color:#82AAFF;">String</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">counter</span><span style="color:#F07178;">))</span></span>
<span class="line"><span style="color:#BABED8;">  observer</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">observe</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">textNode</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> {</span><span style="color:#F07178;"> characterData</span><span style="color:#89DDFF;">:</span><span style="color:#FF9CAC;"> true</span><span style="color:#89DDFF;"> }</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#82AAFF;">  timerFunc</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> ()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">    counter</span><span style="color:#89DDFF;"> =</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">counter</span><span style="color:#89DDFF;"> +</span><span style="color:#F78C6C;"> 1</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">%</span><span style="color:#F78C6C;"> 2</span></span>
<span class="line"><span style="color:#BABED8;">    textNode</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">data</span><span style="color:#89DDFF;"> =</span><span style="color:#82AAFF;"> String</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">counter</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#BABED8;">  isUsingMicroTask</span><span style="color:#89DDFF;"> =</span><span style="color:#FF9CAC;"> true</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#89DDFF;font-style:italic;"> else</span><span style="color:#89DDFF;font-style:italic;"> if</span><span style="color:#BABED8;"> (</span><span style="color:#89DDFF;">typeof</span><span style="color:#BABED8;"> setImmediate </span><span style="color:#89DDFF;">!==</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">undefined</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;"> &amp;&amp;</span><span style="color:#82AAFF;"> isNative</span><span style="color:#BABED8;">(setImmediate)) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 使用setTmmediate 虽然也是宏任务， 但是比setTimeout更好</span></span>
<span class="line"><span style="color:#82AAFF;">  timerFunc</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> ()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#82AAFF;">    setImmediate</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">flushCallback</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#89DDFF;font-style:italic;"> else</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 以上都不支持的情况下， 使用setTimeout</span></span>
<span class="line"><span style="color:#82AAFF;">  timerFunc</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> ()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#82AAFF;">    setTimeout</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">flushCallbacks</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;"> 0</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>环境判断结束就会得到一个延迟回调函数<code>timeFunc</code> 然后进入核心的 nextTick</p><ul><li><p><strong>nextTick方法</strong></p><p>这里的主要逻辑是</p><ul><li>把传入的回调函数放入回调队列<code>callbacks</code>,</li><li>执行保存的异步任务 <code>timeFunc</code>， 就会遍历 <code>callbacks</code> 执行相应的回调函数了</li></ul></li></ul><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 这三行是使用了 Typescript中的 函数重载</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//  这里是 nextTick 方法的函数重载定义 ，用于在异步更新 DOM 之后执行回调函数。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 这一行表示如果调用nextTick并且不传递任何参数，它会返回一个Promise&lt;void&gt;，用于处理异步操作</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#C792EA;"> function</span><span style="color:#82AAFF;"> nextTick</span><span style="color:#89DDFF;">():</span><span style="color:#FFCB6B;"> Promise</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">void</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 这一行表示 如果调用nextTick并传递一个回调函数和一个上下文（this），</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 那么这个回调函数将以指定的上下文执行</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#C792EA;"> function</span><span style="color:#82AAFF;"> nextTick</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;(</span><span style="color:#89DDFF;font-style:italic;">this</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;">cb</span><span style="color:#89DDFF;">:(</span><span style="color:#89DDFF;font-style:italic;">this</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> ...</span><span style="color:#BABED8;font-style:italic;">args</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> any</span><span style="color:#BABED8;">[]</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#FFCB6B;"> any</span><span style="color:#89DDFF;">):</span><span style="color:#FFCB6B;"> void</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 这一行表示 ，如果调用nextTick并传递一个回调函数和一个上下文（ctx），</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 那么这个回调函数将以指定的上下文执行。</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#C792EA;"> function</span><span style="color:#82AAFF;"> nextTick</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;(</span><span style="color:#82AAFF;">cb</span><span style="color:#89DDFF;">:(</span><span style="color:#89DDFF;font-style:italic;">this</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> ...</span><span style="color:#BABED8;font-style:italic;">args</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;">any</span><span style="color:#BABED8;">[]</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#FFCB6B;"> any</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> ctx</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">):</span><span style="color:#FFCB6B;"> void</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * </span><span style="color:#89DDFF;font-style:italic;">@</span><span style="color:#C792EA;font-style:italic;">internal</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#C792EA;"> function</span><span style="color:#82AAFF;"> nextTick</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">cb</span><span style="color:#89DDFF;">?:(...</span><span style="color:#BABED8;font-style:italic;">args</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;">any</span><span style="color:#BABED8;">[]</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#FFCB6B;"> any</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> ctx</span><span style="color:#89DDFF;">?:</span><span style="color:#FFCB6B;">object</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;">  let</span><span style="color:#BABED8;"> _resolve</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 把回调函数放入回调队列</span></span>
<span class="line"><span style="color:#BABED8;">  callbacks</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">cb</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">      try</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">        cb</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">call</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">ctx</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">      }</span><span style="color:#89DDFF;font-style:italic;"> catch</span><span style="color:#89DDFF;"> (</span><span style="color:#BABED8;font-style:italic;">e</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> any</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#82AAFF;">        handleError</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">e</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> ctx</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">nextTick</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">      }</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span><span style="color:#89DDFF;font-style:italic;"> else</span><span style="color:#89DDFF;font-style:italic;"> if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">_resolve</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#82AAFF;">      _resolve</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">ctx</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">!</span><span style="color:#BABED8;">pending</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 如果异步开关是开的， 就关闭， 表示正在执行回调函数，然后执行回调函数</span></span>
<span class="line"><span style="color:#BABED8;">    pending</span><span style="color:#89DDFF;"> =</span><span style="color:#FF9CAC;"> true</span></span>
<span class="line"><span style="color:#82AAFF;">    timeFunc</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 如果没有提供回调，并支持Promise， 那么就返回Promise</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 这里的 Promise 是让我们在不穿参数的情况下使用的， </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 具体使用： this.$nextTick().then(()=&gt; { ... })</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // sflow-disable-time</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">!</span><span style="color:#BABED8;">cb</span><span style="color:#89DDFF;"> &amp;&amp;</span><span style="color:#89DDFF;"> typeof</span><span style="color:#FFCB6B;"> Promise</span><span style="color:#89DDFF;"> !==</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">undefined</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    return</span><span style="color:#89DDFF;"> new</span><span style="color:#FFCB6B;"> Promise</span><span style="color:#F07178;">(</span><span style="color:#BABED8;font-style:italic;">resolve</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">      _resolve</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> resolve</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h3 id="vue3" tabindex="-1">Vue3 <a class="header-anchor" href="#vue3" aria-label="Permalink to &quot;Vue3&quot;">​</a></h3><p>vue3的例子如下：</p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">  &lt;</span><span style="color:#F07178;">div</span><span style="color:#C792EA;"> ref</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">test</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;{{</span><span style="color:#BABED8;">name</span><span style="color:#89DDFF;">}}&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">  &lt;</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;"> @</span><span style="color:#C792EA;">click</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">handleClick</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;">按钮</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#C792EA;"> lang</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">ts</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C792EA;"> setup</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  import</span><span style="color:#89DDFF;"> {</span><span style="color:#BABED8;"> ref</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> nextTick</span><span style="color:#89DDFF;"> }</span><span style="color:#89DDFF;font-style:italic;"> from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> name </span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;"> ref</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">我的胃来食</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> test </span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;"> ref</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">null</span><span style="color:#BABED8;">)</span></span>
<span class="line"><span style="color:#C792EA;">  async</span><span style="color:#C792EA;"> function</span><span style="color:#82AAFF;"> handleClick</span><span style="color:#89DDFF;">()</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">    name</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">value</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">测试</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#BABED8;">    console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">test</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">value</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">innerText</span><span style="color:#F07178;">) </span><span style="color:#676E95;font-style:italic;">// 我的胃来食</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    await</span><span style="color:#82AAFF;"> nextTick</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#BABED8;">    console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">test</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">value</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">innerText</span><span style="color:#F07178;">) </span><span style="color:#676E95;font-style:italic;">// 测试</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><h4 id="vue3-nexttick源码" tabindex="-1">Vue3 nextTick源码 <a class="header-anchor" href="#vue3-nexttick源码" aria-label="Permalink to &quot;Vue3 nextTick源码&quot;">​</a></h4><ul><li>源码地址： <code>packages/runtime-core/src/sheduler.ts</code></li></ul><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> resolvedPromise</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> Promise</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">any</span><span style="color:#89DDFF;">&gt;</span><span style="color:#89DDFF;"> =</span><span style="color:#FFCB6B;"> Promise</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">ressolve</span><span style="color:#BABED8;">()</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> currentFlushPromise</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> Promise</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">void</span><span style="color:#89DDFF;">&gt;</span><span style="color:#89DDFF;"> |</span><span style="color:#FFCB6B;"> null</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> null</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#C792EA;"> function</span><span style="color:#82AAFF;"> nextTick</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;"> =</span><span style="color:#FFCB6B;"> void</span><span style="color:#89DDFF;">&gt;(</span><span style="color:#89DDFF;font-style:italic;">this</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> fn</span><span style="color:#89DDFF;">?:(</span><span style="color:#89DDFF;font-style:italic;">this</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#FFCB6B;"> void</span><span style="color:#89DDFF;">):</span><span style="color:#FFCB6B;"> Promise</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">void</span><span style="color:#89DDFF;">&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> p</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> currentFlushPromise</span><span style="color:#89DDFF;"> ||</span><span style="color:#BABED8;"> resolvePromise</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  return</span><span style="color:#BABED8;"> fn</span><span style="color:#89DDFF;"> ?</span><span style="color:#BABED8;"> p</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">then</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this</span><span style="color:#89DDFF;"> ?</span><span style="color:#BABED8;"> fn</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">bind</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> fn</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> p</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>可以看出nextTick接受一个函数为参数，同时会创建一个微任务</p><p>在页面调用<code>nextTick</code>的时候，会执行该函数， 把我们的参数 <code>fn</code> 赋值给p.then(fn) 在队列的任务完成后， fn就执行了</p><p>由于加了几个维护队列的方法， 所以执行顺序是这样的：</p><p><code>queueJob</code> -&gt; <code>queueFlush</code> -&gt; <code>flushJobs</code> -&gt; <code>nextTick参数的 fn</code></p><ul><li><code>queueJob()</code> 这个方法负责维护主任务队列，接受一个函数做为参数，为 待入队 任务， 会将参数<code>push</code> 到 <code>queue</code>队列中， 有唯一性判断。 会在当前宏任务之行结束后，清空队列</li></ul><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> queue</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> SchedulerJob</span><span style="color:#BABED8;">[] </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> []</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#C792EA;"> function</span><span style="color:#82AAFF;"> queueJob</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">job</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> SchedulerJob</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 主任务队列为空 或者 有正在执行的任务并且没有在主任务队列中 &amp;&amp; job 不能和当前正在执行任务以及后面带执行任务相同 </span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  if</span><span style="color:#F07178;"> ((</span><span style="color:#89DDFF;">!</span><span style="color:#BABED8;">queue</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">length</span><span style="color:#89DDFF;">||</span><span style="color:#89DDFF;"> !</span><span style="color:#BABED8;">queue</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">includes</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">job</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> isFlushing</span><span style="color:#89DDFF;"> &amp;&amp;</span><span style="color:#BABED8;"> job</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">allowRecurse</span><span style="color:#89DDFF;"> ?</span><span style="color:#BABED8;"> flushIndex</span><span style="color:#89DDFF;"> +</span><span style="color:#F78C6C;"> 1</span><span style="color:#89DDFF;"> :</span><span style="color:#BABED8;"> flushIndex</span><span style="color:#F07178;">))</span></span>
<span class="line"><span style="color:#89DDFF;">  &amp;&amp;</span><span style="color:#BABED8;"> job</span><span style="color:#89DDFF;"> !==</span><span style="color:#BABED8;"> currentPreFlushParentJob</span></span>
<span class="line"><span style="color:#F07178;">  ) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 可以入队就添加到主任务队列</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">job</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">id</span><span style="color:#89DDFF;">  ==</span><span style="color:#89DDFF;"> null</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">      queue</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">job</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span><span style="color:#89DDFF;font-style:italic;"> else</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">      // 否则就插入到头部</span></span>
<span class="line"><span style="color:#BABED8;">      queue</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">splice</span><span style="color:#F07178;">(</span><span style="color:#82AAFF;">findInsertionIndex</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">job</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">id</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;"> 0</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> job</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 创建微任务</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><ul><li><code>queueFlush()</code> 这个方法负责尝试创建微任务，等待任务队列执行</li></ul><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> isFlushing </span><span style="color:#89DDFF;">=</span><span style="color:#FF9CAC;"> false</span><span style="color:#676E95;font-style:italic;"> // 是否正在执行</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> isFlushPending </span><span style="color:#89DDFF;">=</span><span style="color:#FF9CAC;"> false</span><span style="color:#676E95;font-style:italic;"> // 是否正在等待执行</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> resolvePromise</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> Promise</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">any</span><span style="color:#89DDFF;">&gt;</span><span style="color:#89DDFF;"> =</span><span style="color:#FFCB6B;"> Promise</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">resolve</span><span style="color:#BABED8;">() </span><span style="color:#676E95;font-style:italic;">// 微任务创建器</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> currentFlushPromise</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> Promise</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">void</span><span style="color:#89DDFF;">&gt;</span><span style="color:#89DDFF;"> |</span><span style="color:#FFCB6B;"> null</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> null</span><span style="color:#676E95;font-style:italic;"> // 当前任务</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#82AAFF;"> queueFlush</span><span style="color:#89DDFF;">()</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 当前没有微任务</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">!</span><span style="color:#BABED8;">isFlushing</span><span style="color:#89DDFF;"> &amp;&amp;</span><span style="color:#89DDFF;"> !</span><span style="color:#BABED8;">isFlushPending</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 避免在事件循环周期内多次创建新的微任务</span></span>
<span class="line"><span style="color:#BABED8;">    isFlushPending</span><span style="color:#89DDFF;"> =</span><span style="color:#FF9CAC;"> true</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 创建微任务，把flushJobs推入到任务队列等待执行</span></span>
<span class="line"><span style="color:#BABED8;">    currentFlushPromise</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> resolvedPromise</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">then</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">flushJobs</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><ul><li><p><code>flushJobs</code></p><p>这个方法负责处理队列任务， 主要逻辑如下</p><ul><li>先处理前置任务队列</li><li>根据<code>id</code>排队队列</li><li>遍历执行队列任务</li><li>执行完毕后清空并重置队列</li><li>执行后置队列任务</li><li>如果还有就递归继续执行</li></ul></li></ul><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#82AAFF;"> flushJobs</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">seen</span><span style="color:#89DDFF;">?:</span><span style="color:#FFCB6B;"> CountMap</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">  isFlushPending</span><span style="color:#89DDFF;"> =</span><span style="color:#FF9CAC;"> false</span><span style="color:#676E95;font-style:italic;"> // 是否正在等待执行</span></span>
<span class="line"><span style="color:#BABED8;">  isFlushing</span><span style="color:#89DDFF;"> =</span><span style="color:#FF9CAC;"> true</span><span style="color:#676E95;font-style:italic;"> // 正在执行</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">__DEV__</span><span style="color:#F07178;">) </span><span style="color:#BABED8;">seen</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> seen</span><span style="color:#89DDFF;"> ||</span><span style="color:#89DDFF;"> new</span><span style="color:#82AAFF;"> Map</span><span style="color:#F07178;">() </span><span style="color:#676E95;font-style:italic;">// 开发环境下</span></span>
<span class="line"><span style="color:#82AAFF;">  flushPreFlushCbs</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">seen</span><span style="color:#F07178;">) </span><span style="color:#676E95;font-style:italic;">// 执行前置任务队列</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 根据 id 排序队列， 以确保</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 1. 从父到子， 因为父级总是在子级前面先创建</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 2. 如果符组件更新期间卸载了组件， 就可以跳过</span></span>
<span class="line"><span style="color:#BABED8;">  queue</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">sort</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">a</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> b</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#82AAFF;"> getId</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">a</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">-</span><span style="color:#82AAFF;"> getId</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">b</span><span style="color:#F07178;">))</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  try</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 遍历主任务队列，批量执行更新任务</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    for</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">flushindex</span><span style="color:#89DDFF;"> =</span><span style="color:#F78C6C;"> 0</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> flushindex</span><span style="color:#89DDFF;"> &lt;</span><span style="color:#BABED8;"> queue</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">length</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> flushIndex</span><span style="color:#89DDFF;">++</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#C792EA;">      const</span><span style="color:#BABED8;"> job</span><span style="color:#89DDFF;"> =</span><span style="color:#82AAFF;"> queue</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">flushIndex</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">      if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">job</span><span style="color:#89DDFF;"> &amp;&amp;</span><span style="color:#BABED8;"> job</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">active</span><span style="color:#89DDFF;"> !==</span><span style="color:#FF9CAC;"> false</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">        if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">__DEV__</span><span style="color:#89DDFF;"> &amp;&amp;</span><span style="color:#82AAFF;"> checkRecursiveUpdates</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">seen</span><span style="color:#89DDFF;">!,</span><span style="color:#BABED8;"> job</span><span style="color:#F07178;">)) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">          continue</span></span>
<span class="line"><span style="color:#89DDFF;">        }</span></span>
<span class="line"><span style="color:#82AAFF;">        callWithErrorHandling</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">job</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> null,</span><span style="color:#BABED8;"> ErrorCodes</span><span style="color:#89DDFF;">,.</span><span style="color:#BABED8;">SCHEDULER</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">      }</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span><span style="color:#89DDFF;font-style:italic;"> finally</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">    flushIndex</span><span style="color:#89DDFF;"> =</span><span style="color:#F78C6C;"> 0</span><span style="color:#676E95;font-style:italic;"> // 队列任务执行完， 重置队列索引</span></span>
<span class="line"><span style="color:#BABED8;">    queue</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">length</span><span style="color:#89DDFF;"> =</span><span style="color:#F78C6C;"> 0</span><span style="color:#676E95;font-style:italic;"> // 清空队列</span></span>
<span class="line"><span style="color:#82AAFF;">    flushPostFlushCbs</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">seen</span><span style="color:#F07178;">) </span><span style="color:#676E95;font-style:italic;">// 执行后置队列任务</span></span>
<span class="line"><span style="color:#BABED8;">    isFlushing</span><span style="color:#89DDFF;"> =</span><span style="color:#FF9CAC;"> false</span><span style="color:#676E95;font-style:italic;"> // 重置队列执行状态</span></span>
<span class="line"><span style="color:#BABED8;">    currnetFlushPromise</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> null</span><span style="color:#676E95;font-style:italic;"> // 重置当前微任务为 null</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 如果住任务队列， 前置和后置任务队列还没有被清空，就继续递归执行</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">queue</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">length</span><span style="color:#89DDFF;"> ||</span><span style="color:#BABED8;"> pendingPreFlushCbs</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">length</span><span style="color:#89DDFF;"> ||</span><span style="color:#BABED8;"> pendingPostFlushCbs</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">length</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#82AAFF;">      flushJobs</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">seen</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><ul><li><code>flushPreFlushCbs()</code> 这个方法负责执行前置任务队列</li></ul><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#C792EA;"> function</span><span style="color:#82AAFF;"> flushPreFlushCbs</span><span style="color:#89DDFF;"> (</span><span style="color:#BABED8;font-style:italic;">seen</span><span style="color:#89DDFF;">?:</span><span style="color:#FFCB6B;">CountMap</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> parentJob</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> SchedulerJob</span><span style="color:#89DDFF;">|</span><span style="color:#FFCB6B;"> null</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> null)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 如果待处理的队列不为空</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">pendingPreFlushCbs</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">length</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">    currentPreFlushParentJob</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> parentJob</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 保存队列中去重后的任务为当前活动的队列</span></span>
<span class="line"><span style="color:#BABED8;">    activePreFlushCbs</span><span style="color:#89DDFF;"> =</span><span style="color:#F07178;"> [</span><span style="color:#89DDFF;">...new</span><span style="color:#82AAFF;"> Set</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">pendingPreFlushCbs</span><span style="color:#F07178;">)]</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 清空队列</span></span>
<span class="line"><span style="color:#BABED8;">    pendingPreFlushCbs</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">length</span><span style="color:#89DDFF;"> =</span><span style="color:#F78C6C;"> 0</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 开发环境下</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">__DEV__</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span><span style="color:#BABED8;"> seen</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> seen</span><span style="color:#89DDFF;"> ||</span><span style="color:#89DDFF;"> new</span><span style="color:#82AAFF;"> Map</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 遍历执行队列里的任务</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    for</span><span style="color:#F07178;"> ( </span><span style="color:#BABED8;">preFlushIndex</span><span style="color:#89DDFF;"> =</span><span style="color:#F78C6C;"> 0</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> preFlushIndex</span><span style="color:#89DDFF;"> &lt;</span><span style="color:#BABED8;"> activePreFlushCbs</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">length</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> preFlushIndex</span><span style="color:#89DDFF;">++</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">      // 开发环境下</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">      if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">__DEV__</span><span style="color:#89DDFF;"> &amp;&amp;</span><span style="color:#82AAFF;"> checkRecursiveUpdates</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">seen</span><span style="color:#89DDFF;">!,</span><span style="color:#BABED8;"> activePreFlushCbs</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">preFlushIndex</span><span style="color:#F07178;">])) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">        continue</span></span>
<span class="line"><span style="color:#89DDFF;">      }</span></span>
<span class="line"><span style="color:#BABED8;">      activePreFlushCbs</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">preFlushIndex</span><span style="color:#F07178;">]()</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 清空当前活动的任务队列</span></span>
<span class="line"><span style="color:#BABED8;">    activePreFlushCbs</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> null</span></span>
<span class="line"><span style="color:#BABED8;">    preFlushIndex</span><span style="color:#89DDFF;"> =</span><span style="color:#F78C6C;"> 0</span></span>
<span class="line"><span style="color:#BABED8;">    currentPreFlushParentJob</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> null</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 递归执行， 直到清空前置任务队列， 再往下执行异步更新队列任务</span></span>
<span class="line"><span style="color:#82AAFF;">    flushPreFlushCbs</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">seen</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> parentJob</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><ul><li><code>flushPostFlushCbs()</code> 这个方法负责执行后置任务队列</li></ul><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> activePostFlushCbs</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> SchedulerJob</span><span style="color:#BABED8;">[] </span><span style="color:#89DDFF;">|</span><span style="color:#FFCB6B;"> null</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> null</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#C792EA;"> function</span><span style="color:#82AAFF;"> flushPostFlushCbs</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">seen</span><span style="color:#89DDFF;">?:</span><span style="color:#FFCB6B;">CountMap</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 如果待处理的队列不为空</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">pendingPostFlushCbs</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">length</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 保存队列中去重后的任务</span></span>
<span class="line"><span style="color:#C792EA;">    const</span><span style="color:#BABED8;"> deduped</span><span style="color:#89DDFF;"> =</span><span style="color:#F07178;"> [</span><span style="color:#89DDFF;">...new</span><span style="color:#82AAFF;"> Set</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">pendingPostFlushCbs</span><span style="color:#F07178;">)]</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 清空队列</span></span>
<span class="line"><span style="color:#BABED8;">    pendingPostFlushCbs</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">length</span><span style="color:#89DDFF;"> =</span><span style="color:#F78C6C;"> 0</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 如果当店已经有活动的队列， 就添加到执行队列的末尾，并返回</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">activePostFlushCbs</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">      activePostFlushCbs</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">...</span><span style="color:#BABED8;">deduped</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">      return</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 赋值为当前活动队列</span></span>
<span class="line"><span style="color:#BABED8;">    activePostFlushCbs</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> deduped</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 开发环境下</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">__DEV__</span><span style="color:#F07178;">) </span><span style="color:#BABED8;">seen</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> seen</span><span style="color:#89DDFF;"> ||</span><span style="color:#89DDFF;"> new</span><span style="color:#82AAFF;"> Map</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 排列队列</span></span>
<span class="line"><span style="color:#BABED8;">    activePostFlushCbs</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">sort</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">a</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> b</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#82AAFF;"> getId</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">a</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">-</span><span style="color:#82AAFF;"> getId</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">b</span><span style="color:#F07178;">))</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 遍历执行队列里的任务</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    for</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">postFlushIndex</span><span style="color:#89DDFF;"> =</span><span style="color:#F78C6C;"> 0</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> postFlushIndex</span><span style="color:#89DDFF;"> &lt;</span><span style="color:#BABED8;"> activePostFlushCbs</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">length</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> postFlushIndex</span><span style="color:#89DDFF;">++</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">      if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">__DEV__</span><span style="color:#89DDFF;"> &amp;&amp;</span><span style="color:#82AAFF;"> checkRecursiveUpdates</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">seen</span><span style="color:#89DDFF;">!,</span><span style="color:#BABED8;"> activePostFlushCbs</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">postFlushIndex</span><span style="color:#F07178;">])) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">        continue</span></span>
<span class="line"><span style="color:#89DDFF;">      }</span></span>
<span class="line"><span style="color:#BABED8;">      activePostFlushCbs</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">postFlushIndex</span><span style="color:#F07178;">]()</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 清空当前活动的任务队列</span></span>
<span class="line"><span style="color:#BABED8;">    activePostFlushCbs</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> null</span></span>
<span class="line"><span style="color:#BABED8;">    postFlushIndex</span><span style="color:#89DDFF;"> =</span><span style="color:#F78C6C;"> 0</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h3 id="引用" tabindex="-1">引用 <a class="header-anchor" href="#引用" aria-label="Permalink to &quot;引用&quot;">​</a></h3>`,39);function y(D,i,B,A,E,u){const s=l;return p(),o("div",null,[F,n(s,{title:"一次弄懂 Vue2 和 Vue3 的 nextTick 实现原理",href:"https://juejin.cn/post/7021688091513454622?from=search-suggest"}),n(s,{title:"vue2源码nextTick",href:"https://github.com/vuejs/vue/blob/main/src/core/util/next-tick.ts"}),n(s,{title:"vue3源码nextTick",href:"https://github.com/vuejs/core/blob/main/packages/runtime-core/src/scheduler.ts"})])}const h=a(r,[["render",y]]);export{C as __pageData,h as default};
