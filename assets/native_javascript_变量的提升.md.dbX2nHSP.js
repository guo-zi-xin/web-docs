import{_ as s,o as a,c as n,a8 as o}from"./chunks/framework.QttzOlP4.js";const A=JSON.parse('{"title":"变量的提升","description":"","frontmatter":{},"headers":[],"relativePath":"native/javascript/变量的提升.md","filePath":"native/javascript/变量的提升.md","lastUpdated":1700734386000}'),l={name:"native/javascript/变量的提升.md"},p=o(`<h1 id="变量的提升" tabindex="-1">变量的提升 <a class="header-anchor" href="#变量的提升" aria-label="Permalink to &quot;变量的提升&quot;">​</a></h1><p>关于变量的提升，先看下面一个例子</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#BABED8;"> x </span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;"> 5</span><span style="color:#89DDFF;"> ;</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(x) </span><span style="color:#676E95;font-style:italic;">// 此时打印出来的是5;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#BABED8;"> a</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">hello world</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#BABED8;"> a</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(a)</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> //你以为打印的是undefined? 错! 打印的是&#39;hello world&#39;</span></span></code></pre></div><p>再来看一个例子:</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(a)</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> //现在你以为它会报错? 不存在的! 打印undefined!</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#BABED8;"> a</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">hello world</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>此时, 就有一个疑问, 怎么会是这样? 不应该报错吗? 经查阅 此时涉及到<strong>变量的提升：</strong></p><ul><li><p>JavaScript 中，函数及变量的声明都将被提升到函数的最顶部。</p></li><li><p>JavaScript 中，变量可以在使用后声明，也就是变量可以先使用再声明。</p></li></ul><p>也就是说, 当你声明一个变量时 变量先会提升到最顶端 默认为<code>undefined</code>;</p><ul><li><p>第一个例子中 我们先声明了<code>a; var a = &#39;hello world&#39;;</code>此时提升到顶部的是 <code>a = undefined</code> ;</p></li><li><p>第二次 var 的 <code>a</code>也会提升到顶部 也为<code>undefined</code> , 之下的 才是<code>a = &#39;hello world&#39;;</code>所以此时打印的是<code>&#39;hello world&#39;</code>;</p></li><li><p>第二个例子中也是如此, 先提升到顶部 为<code>undefined</code> 再去给<code>a</code>赋值 赋值结果为<code>&#39;hello world&#39;</code>所以打印的是<code>&#39;hello world&#39;</code>, 实际的运行结果为</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">  var</span><span style="color:#BABED8;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> undefined;</span></span>
<span class="line"><span style="color:#BABED8;">  a   </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">hello world</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">  console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(a)</span><span style="color:#89DDFF;">;</span></span></code></pre></div></li></ul><p>介绍完<code>变量</code>就应该介绍<code>函数</code>的<strong>变量的提升了:</strong> 首先先看一个例子:</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#BABED8;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;"> 1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#82AAFF;"> fn</span><span style="color:#89DDFF;">()</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">    console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">a</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> //这个a会打印1吗? 不会! 打印出来undefined!</span></span>
<span class="line"><span style="color:#C792EA;">    var</span><span style="color:#BABED8;"> a</span><span style="color:#89DDFF;"> =</span><span style="color:#F78C6C;"> 1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">    console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">a</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> //此时的a才会打印1</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#82AAFF;">fn</span><span style="color:#BABED8;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(a)</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">//这个a 也会打印1</span></span></code></pre></div><p>为什么会这样呢?</p><p>由于函数的局部作用域的问题 ,全局变量访问不到函数内部的变量 所以会打印<code>undefined</code>; 就拿这个例子来说, 由于在下面var了一个变量<code>a = 1</code>; 但是由于变量的提升, 它会先赋值为<code>undefined</code>, 并且提升到函数体内部的顶端, 也就是说此时的<code>a</code>为<code>undefined</code>, 虽然全局作用域里边已经声明了变量<code>a</code> ,但是由于函数体内部的变量的提升 , 从先后顺序来讲, 它会现访问到全局的作用域里的<code>a = 1</code>, 在函数体内部又重新给<code>a</code>赋值了<code>undefined</code>, 所以第一个打印的是<code>undefined</code>; 第二次打印出来一个<code>1</code>, 完全是因为在函数体内部声明了一个变量<code>a = 1</code>, 直接打印就会打印出<code>1</code>; 至于函数体外边的<code>console.log(a)</code>, 那就更简单了, 由于在全局已经声明了变量<code>a</code> ,所以在全局作用域中打印出来的就是<code>1</code>.</p><p>还有一个例子:</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#82AAFF;">fn</span><span style="color:#BABED8;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#BABED8;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;"> 1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(a)</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">//这个打印1</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#82AAFF;"> fn</span><span style="color:#89DDFF;">()</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">    a</span><span style="color:#89DDFF;"> =</span><span style="color:#F78C6C;"> 2</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">   console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">a</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> //这个a打印2</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(a)</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> //这个a打印1</span></span></code></pre></div><p>我们来简单分析一下:</p><ul><li>首先 第一个打印项 由于全局声明好了<code>a = 1</code>; 所以第一个<code>a</code>打印就为<code>1</code>; 虽然在声明变量的前边调用了函数 但是通过变量的提升 后面的值会覆盖前面的 最后一个刚好是<code>a = 1</code> 所以打印结果为<code>1</code>;</li><li>第二个打印项打印出<code>2</code> 是因为在函数体内, 将<code>2</code> 赋值给了变量 <code>a</code> 由于变量<code>a</code>在全局中已经声明了 所以不会报错 并且打印结果为<code>2</code>;</li><li>至于第三个打印项, 就是简单的变量的提升了, 由于全局中<code>a</code>最终的值为<code>1</code>; 所以打印结果也为<code>1</code>。</li></ul><p>总之, <strong>无论作用域中的声明出现在什么地方，都将在代码本身被执行前首先进行处理，可以将这个过程形象地想象成所有的声明（变量和函数）都会被“移动”到各自作用域的最顶端</strong>，这个过程被称为<code>变量的提升</code>。</p>`,18),e=[p];function c(t,r,d,y,i,F){return a(),n("div",null,e)}const B=s(l,[["render",c]]);export{A as __pageData,B as default};
