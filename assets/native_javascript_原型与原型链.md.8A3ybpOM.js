import{_ as s}from"./chunks/CustomLink.HhFLulSs.js";import{_ as a,o as e,c as n,J as t,a8 as p,aB as c}from"./chunks/framework.QttzOlP4.js";const g=JSON.parse('{"title":"原型与原型链","description":"","frontmatter":{},"headers":[],"relativePath":"native/javascript/原型与原型链.md","filePath":"native/javascript/原型与原型链.md","lastUpdated":1703149784000}'),l={name:"native/javascript/原型与原型链.md"},r=p('<h1 id="原型与原型链" tabindex="-1">原型与原型链 <a class="header-anchor" href="#原型与原型链" aria-label="Permalink to &quot;原型与原型链&quot;">​</a></h1><img src="'+c+`" alt="原型与原型链"><p>注：上图中 <code>P1</code>是构造函数 <code>Parent()</code>的一个实例</p><h3 id="前置知识" tabindex="-1">前置知识 <a class="header-anchor" href="#前置知识" aria-label="Permalink to &quot;前置知识&quot;">​</a></h3><ol><li>Javascript中对象分为 <strong>函数对象</strong>和 <strong>普通对象</strong>, 每个对象都有 <code>__proto__</code> 属性, 但是只有函数才会有 <code>prototype</code> 属性</li><li>Object、Function 都是JavaScript内置的<strong>函数</strong>, 类似的我们还有 Array、RegExp、Date、Boolean、Number、String</li><li>属性<code>__proto__</code>是一个对象， 它有两个属性, <code>constructor</code> 和 <code>__proto__</code></li><li>原型对象 prototype 有一个默认的 constructor 属性, 用于记录实例是由哪个构造函数创建</li></ol><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> Parent </span><span style="color:#89DDFF;">=</span><span style="color:#C792EA;"> function</span><span style="color:#89DDFF;"> ()</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 定义一个函数，那么它只是一个普通的函数</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#BABED8;">  p1 </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> new</span><span style="color:#82AAFF;"> Parent</span><span style="color:#BABED8;">()</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 这时 Parent就不是一个普通的函数了，它现在是一个构造函数，因为通过 new 关键字调用了它</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 创建了一个Parent构造函数的实例 p1</span></span></code></pre></div><h5 id="prototype属性" tabindex="-1"><code>prototype</code>属性 <a class="header-anchor" href="#prototype属性" aria-label="Permalink to &quot;\`prototype\`属性&quot;">​</a></h5><p><code>prototype</code>是函数独有的属性，从图中可以看到它从一个对象指向另一个对象，代表这个对象是这个函数的原型对象，这个对象也是当前函数所创建的实例的原型对象</p><p><code>prototype</code>设计之初就是为了实现继承，让由特定函数创建的所有实例共享属性和方法，也可以说是让某一个构造函数实例化的所有对象都可以找到公共的方法和属性。有了<code>prototype</code>属性， 我们不需要 为每个实例创建重复的属性方法，而是将属性方法创建在构造函数的原型对象上(prototype),那些不需要共享的方法才被创建在构造函数之中。</p><p>继续引用上面的代码, 当我们想要为 Parent 实例化的所有实例添加一个共享的属性时:</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#FFCB6B;">Parent</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">name </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">我是原型属性， 所有实例都可以读取到我</span><span style="color:#89DDFF;">&#39;</span></span></code></pre></div><p>这就是原型属性，可以在上面添加原型方法，那么问题来了, p1 是如何知道他的原型对象上有这个方法呢， 这就提到了<code>__proto__</code>属性～</p><h5 id="proto-属性" tabindex="-1"><code>__proto__</code>属性 <a class="header-anchor" href="#proto-属性" aria-label="Permalink to &quot;\`__proto__\`属性&quot;">​</a></h5><p><code>__proto__</code>属性是对象独有的(包括函数), 从图中我们可以看到<code>__proto__</code>属性是从一个对象指向另一个对象，即从一个对象指向该对象的原型对象(也可以理解为父对象)。显然它的含义就是告诉我们一个对象原型对象是谁</p><p>从<code>prototype</code>中我们可以知道 <code>Parent.prototype</code>上添加的属性方法叫做原型属性和原型方法，该构造函数的实例都可以访问调用。那么这个构造函数的原型对象上的属性和方法， 怎么和构造函数的实例联系在一起的呢？就是通过<code>__proto__</code>属性， 每个对象都有<code>__proto__</code>属性，该属性指向的就是该对象的原型对象</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#BABED8;">p1</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">__proto__ </span><span style="color:#89DDFF;">===</span><span style="color:#FFCB6B;"> Parent</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">prototype</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> // true</span></span></code></pre></div><p><code>__proto__</code>通常被称为隐式类型， <code>prototype</code>被称为显式类型， 那么我们可以说一个对象的隐式原型指向了该对象的构造函数的显式原型。 我们通过在显式原型上定义的属性方法， 通过隐式原型传递给了构造函数的实例。这样一来实例就很容易能够访问到构造函数原型上的方法和属性了。</p><p>我们之前也说过 <code>__proto__</code>属性是对象(包括函数)独有的，那么<code>Parent.prototype</code>也是对象，它有隐式原型么，又指向谁呢？</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#FFCB6B;">Parent</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">__proto__ </span><span style="color:#89DDFF;">===</span><span style="color:#FFCB6B;"> Object</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">prototype</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> // true</span></span></code></pre></div><p>可以看到，构造函数的原型对象上的隐式原型指向了 Object 的原型对象，那么Parent的原型对象就继承了Object的原型对象。由此我们可以验证一个结论，万物继承自 Object.prototype 这也就是为什么 我们可以实例化一个对象，并且可以调用该对象上没有的属性和方法了：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 我们并没有在Parent中定义任何方法和属性，但是我们可以调用</span></span>
<span class="line"><span style="color:#BABED8;">p1</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toString</span><span style="color:#BABED8;">()</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> // hasOwnProperty 等等一些方法</span></span></code></pre></div><p>我们可以调用很多我们没有定义的方法，这些方法从哪里来的呢？ 现在引出 <em>原型链</em>的概念，当我们调用<code>p1.toString()</code>的时候， 先在<code>p1</code>对象本身寻找，没有找到则通过<code>p1.__proto__</code> 找到了原型对象<code>Parent.prototype</code>， 也没有找到， 然后又通过<code>Parent.prototype.__proto__</code>找到了上一层原型对象<code>Object.prototype</code>,在这一层找到了 <em>toString</em> 方法， 返回该方法供<code>p1</code> 使用</p><p>当然如果直到 <code>Object.prototype</code>上也没有找到，就在<code>Object.prototype.__proto__</code>中寻找， 但是 <code>Obnject.prototype.__proto__</code>为<em>null</em>， 所以返回了 <em>undefined</em>。 这也就是为什么当访问对象中一个不存在的属性的时候， 返回 <em>undefined</em>了</p><h5 id="constructor属性" tabindex="-1"><code>constructor</code>属性 <a class="header-anchor" href="#constructor属性" aria-label="Permalink to &quot;\`constructor\`属性&quot;">​</a></h5><p><code>constructor</code>是对象才有的属性，从图中看到它是从一个对象指向一个函数的。指向的函数就是该对象的构造函数，每个对象都有构造函数，就好比上面的<code>p1</code>就是一个对象， 那么<code>p1</code>的构造函数是谁呢？</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(p1</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">constructor) </span><span style="color:#676E95;font-style:italic;">// ƒ Parent()()</span></span></code></pre></div><p>通过输出可以看到，很显然<code>p1</code>的构造函数是 Praent 函数， 我们有说过函数也是对象， 那 Parent 函数是不是也有构造函数呢？显然是有的：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(Parent</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">constructor) </span><span style="color:#676E95;font-style:italic;">// ƒ Function() { [native code] }</span></span></code></pre></div><p>通过输出看到 Parent 函数的构造函数是 Function() 这点也不奇怪，因为我们每次定义函数其实都是调用了new Function(), 下面两种效果是一样的:</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> func1 </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> new</span><span style="color:#82AAFF;"> Function</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">msg</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> alert</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">msg</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">))</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#82AAFF;"> func1</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">msg</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#82AAFF;">  alert</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">msg</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>那么我们再回来看一下，再次打印 Function.constructor</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(Function</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">constructor) </span><span style="color:#676E95;font-style:italic;">// ƒ Function() { [native code] }</span></span></code></pre></div><p>可以看到Function函数的构造函数就是本身了，那我们也可以说 Function时所有函数的构造函数。</p><p>到这里我们已经对 constructor 属性有了一个初步认识，它的作用是从一个对象指向一个函数，这个函数就是该对象的构造函数，通过例子我们可以看到， <code>p1</code>的 <code>constructor</code>属性指向了 <code>Parent</code>， 那么 <code>Parent</code>就是<code>p1</code>的构造函数。</p><p>同样<code>Parent</code>的 <code>constructor</code>属性指向了<code>Function</code>, 那么 <code>Function</code>就是<code>Parent</code>的构造函数， 然后又验证了<code>Function</code>就是根构造函数。</p><h2 id="引用" tabindex="-1">引用 <a class="header-anchor" href="#引用" aria-label="Permalink to &quot;引用&quot;">​</a></h2>`,36);function i(d,y,F,D,_,u){const o=s;return e(),n("div",null,[r,t(o,{title:"JavaScript原型&原型链",href:"https://segmentfault.com/a/1190000021232132"})])}const m=a(l,[["render",i]]);export{g as __pageData,m as default};
