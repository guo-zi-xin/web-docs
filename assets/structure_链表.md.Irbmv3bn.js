import{_ as n}from"./chunks/CustomLink.YSvj3KpE.js";import{_ as a,o as l,c as p,J as o,a8 as t,aU as e,aV as c,aW as r,aX as y,aY as D}from"./chunks/framework.Qf1t7Yq5.js";const g=JSON.parse('{"title":"链表","description":"","frontmatter":{},"headers":[],"relativePath":"structure/链表.md","filePath":"structure/链表.md","lastUpdated":1700734386000}'),F={name:"structure/链表.md"},i=t('<h1 id="链表" tabindex="-1">链表 <a class="header-anchor" href="#链表" aria-label="Permalink to &quot;链表&quot;">​</a></h1><h3 id="定义" tabindex="-1">定义 <a class="header-anchor" href="#定义" aria-label="Permalink to &quot;定义&quot;">​</a></h3><p>计算机科学中，<code>链表</code>是一种数据结构，是一组由节点组成的<code>集合</code>， 每个节点都有一个指针和指向它的下一个节点, 最后一个指针指向<code>null</code>。</p><p><code>链表</code>与 <code>数组</code>不同， <code>链表</code>中的元素不是按照它们在内存中的的物理顺序存储的，相反， 每个元素都包含一个指向下一个元素的引用。</p><img src="'+e+'" alt="链表结构"><h3 id="特点" tabindex="-1">特点 <a class="header-anchor" href="#特点" aria-label="Permalink to &quot;特点&quot;">​</a></h3><ul><li><code>链表</code>在<code>添加</code>或<code>移除</code>元素的时候不需要移动其他元素, 这样<code>添加</code>,<code>移除</code>的时间复杂度就为<strong>O(1)</strong>, 而<code>数组</code>在<code>添加</code>或<code>移除</code>元素时，因为需要<strong>移动其他元素</strong>来进行<code>插入</code>操作， 所以从<code>数组</code>的<em>起点</em>或<em>中间</em>插入或移除元素具有很高的成本</li></ul><img src="'+c+`" alt="链表插入"><ul><li><p><code>链表</code>在访问一个元素时， 需要从七点开始迭代整个链表直到找到所需的元素， 因此 访问的时间复杂度就在<strong>O(1)</strong>-<strong>O(n)<strong>之间; 而<code>数组</code>在访问一个元素时， 可以直接</strong>通过索引</strong>来访问， 成本就很低</p><ul><li><p>单向链表与数组各个操作时间复杂度对比</p><p>链表操作</p><table><thead><tr><th style="text-align:left;">链表操作</th><th style="text-align:left;">最大时间复杂度</th></tr></thead><tbody><tr><td style="text-align:left;">search(访问)</td><td style="text-align:left;">O(n)</td></tr><tr><td style="text-align:left;">insert(插入)</td><td style="text-align:left;">O(1)</td></tr><tr><td style="text-align:left;">remove(删除)</td><td style="text-align:left;">O(1)</td></tr><tr><td style="text-align:left;">append(添加)</td><td style="text-align:left;">O(1)</td></tr></tbody></table><p>数组操作</p><table><thead><tr><th style="text-align:left;">数组操作</th><th>最大时间复杂度</th></tr></thead><tbody><tr><td style="text-align:left;">search(访问)</td><td>O(1)</td></tr><tr><td style="text-align:left;">insert(插入)</td><td>O(n)</td></tr><tr><td style="text-align:left;">remove(删除)</td><td>O(n)</td></tr><tr><td style="text-align:left;">append(添加)</td><td>O(1)</td></tr></tbody></table></li></ul></li></ul><h4 id="链表节点" tabindex="-1">链表节点 <a class="header-anchor" href="#链表节点" aria-label="Permalink to &quot;链表节点&quot;">​</a></h4><p><code>链表节点</code>表示链表中的一个元素，它包含一个值和一个指向下一个节点的引用。它的实现可以参考下面代码：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">  class</span><span style="color:#FFCB6B;"> Node</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;">     constructor</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">value</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;">      this.</span><span style="color:#BABED8;">value</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> value</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">      this.</span><span style="color:#BABED8;">next</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> null;</span></span>
<span class="line"><span style="color:#89DDFF;">     }</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span></code></pre></div><h4 id="链表实现" tabindex="-1">链表实现 <a class="header-anchor" href="#链表实现" aria-label="Permalink to &quot;链表实现&quot;">​</a></h4><p><code>链表</code>提供了一系列方法来操作链表， 如<strong>开头插入节点(<code>preappend</code>)</strong>、<strong>末尾插入节点(<code>append</code>)</strong>、<strong>在指定位置插入节点(<code>insert</code>)</strong>、<strong>删除节点(<code>delete</code>)</strong>、**查找节点(<code>find</code>)**等， 以下是实现代码：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">  class</span><span style="color:#FFCB6B;"> LinkedList</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;">    constructor</span><span style="color:#89DDFF;">()</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;">      this.</span><span style="color:#BABED8;">head</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> null;</span></span>
<span class="line"><span style="color:#89DDFF;">      this.</span><span style="color:#BABED8;">tail</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> null;</span></span>
<span class="line"><span style="color:#89DDFF;">      this.</span><span style="color:#BABED8;">length</span><span style="color:#89DDFF;"> =</span><span style="color:#F78C6C;"> 0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 在链表尾部添加新节点</span></span>
<span class="line"><span style="color:#F07178;">    append</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">value</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;">      const</span><span style="color:#BABED8;"> newNode</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> new</span><span style="color:#82AAFF;"> Node</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">value</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">      if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">!this.</span><span style="color:#BABED8;">head</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        this.</span><span style="color:#BABED8;">head</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> newNode</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">        this.</span><span style="color:#BABED8;">tail</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> newNode</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">      }</span><span style="color:#89DDFF;font-style:italic;"> else</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;">        this.</span><span style="color:#BABED8;">tail</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">next</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> newNode</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">        this.</span><span style="color:#BABED8;">tail</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> newNode</span></span>
<span class="line"><span style="color:#89DDFF;">      }</span></span>
<span class="line"><span style="color:#89DDFF;">      this.</span><span style="color:#BABED8;">length</span><span style="color:#89DDFF;">++</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 在链表指定位置插入新节点</span></span>
<span class="line"><span style="color:#F07178;">    insertAt</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">value</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> index</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">      if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">index</span><span style="color:#89DDFF;"> &lt;</span><span style="color:#F78C6C;"> 0</span><span style="color:#89DDFF;"> ||</span><span style="color:#BABED8;"> index</span><span style="color:#89DDFF;"> &gt;</span><span style="color:#89DDFF;"> this.</span><span style="color:#BABED8;">length</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">        throw</span><span style="color:#89DDFF;"> new</span><span style="color:#82AAFF;"> Error</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Index out of range</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">      }</span></span>
<span class="line"><span style="color:#C792EA;">      const</span><span style="color:#BABED8;"> newNode</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> new</span><span style="color:#82AAFF;"> Node</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">value</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">      if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">index</span><span style="color:#89DDFF;"> ===</span><span style="color:#F78C6C;"> 0</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">        newNode</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">next</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> this.</span><span style="color:#BABED8;">head</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">        this.</span><span style="color:#BABED8;">head</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> newNode</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">        if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">!this.</span><span style="color:#BABED8;">tail</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">          this.</span><span style="color:#BABED8;">tail</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> newNode</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">        }</span></span>
<span class="line"><span style="color:#89DDFF;">      }</span><span style="color:#89DDFF;font-style:italic;"> else</span><span style="color:#89DDFF;font-style:italic;"> if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">index</span><span style="color:#89DDFF;"> ===</span><span style="color:#89DDFF;"> this.</span><span style="color:#BABED8;">length</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        this.</span><span style="color:#BABED8;">tail</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">next</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> newNode</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">        this.</span><span style="color:#BABED8;">tail</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> newNode</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">      }</span><span style="color:#89DDFF;font-style:italic;"> else</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;">        let</span><span style="color:#BABED8;"> currentNode</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> this.</span><span style="color:#BABED8;">head</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">        let</span><span style="color:#BABED8;"> preNode</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> null;</span></span>
<span class="line"><span style="color:#C792EA;">        let</span><span style="color:#BABED8;"> currentIndex</span><span style="color:#89DDFF;"> =</span><span style="color:#F78C6C;"> 0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">        while</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">currentIndex</span><span style="color:#89DDFF;"> &lt;</span><span style="color:#BABED8;"> index</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">          prevNode</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> currentNode</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">          currentNode</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> currentNode</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">next</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">          currentNext</span><span style="color:#89DDFF;">++;</span></span>
<span class="line"><span style="color:#89DDFF;">        }</span></span>
<span class="line"><span style="color:#BABED8;">        prevNode</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">next</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> newNode</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">        newNode</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">next</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> currentNode</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">      }</span></span>
<span class="line"><span style="color:#89DDFF;">      this.</span><span style="color:#BABED8;">length</span><span style="color:#89DDFF;">++;</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 获取指定位置节点的值</span></span>
<span class="line"><span style="color:#F07178;">    getAt</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">index</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">      if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">index</span><span style="color:#89DDFF;"> &lt;</span><span style="color:#F78C6C;"> 0</span><span style="color:#89DDFF;"> ||</span><span style="color:#BABED8;"> index</span><span style="color:#89DDFF;"> &gt;=</span><span style="color:#89DDFF;"> this.</span><span style="color:#BABED8;">length</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">        throw</span><span style="color:#89DDFF;"> new</span><span style="color:#82AAFF;"> Error</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Index out of range</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">      }</span></span>
<span class="line"><span style="color:#C792EA;">      let</span><span style="color:#BABED8;"> currentNode</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> this.</span><span style="color:#BABED8;">head</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">      let</span><span style="color:#BABED8;"> currentIndex</span><span style="color:#89DDFF;"> =</span><span style="color:#F78C6C;"> 0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">      while</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">currentIndex</span><span style="color:#89DDFF;"> &lt;</span><span style="color:#BABED8;"> index</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">        currentNode</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> currentNode</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">next</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">        currentIndex</span><span style="color:#89DDFF;">++;</span></span>
<span class="line"><span style="color:#89DDFF;">      }</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">      return</span><span style="color:#BABED8;"> currentNode</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">value</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 删除指定位置的节点</span></span>
<span class="line"><span style="color:#F07178;">    removeAt</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">index</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">      if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">index</span><span style="color:#89DDFF;"> &lt;</span><span style="color:#F78C6C;"> 0</span><span style="color:#89DDFF;"> ||</span><span style="color:#BABED8;"> index</span><span style="color:#89DDFF;"> &gt;=</span><span style="color:#89DDFF;"> this.</span><span style="color:#BABED8;">length</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">        throw</span><span style="color:#89DDFF;"> new</span><span style="color:#82AAFF;"> Error</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Index out of range</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">      }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">      let</span><span style="color:#BABED8;"> currentNode</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> this.</span><span style="color:#BABED8;">head</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">      let</span><span style="color:#BABED8;"> prevNode</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> null;</span></span>
<span class="line"><span style="color:#C792EA;">      let</span><span style="color:#BABED8;"> currentIndex</span><span style="color:#89DDFF;"> =</span><span style="color:#F78C6C;"> 0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">      if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">index</span><span style="color:#89DDFF;"> ===</span><span style="color:#F78C6C;"> 0</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        this.</span><span style="color:#BABED8;">head</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> currentNode</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">next</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">        if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">this.</span><span style="color:#BABED8;">length</span><span style="color:#89DDFF;"> ===</span><span style="color:#F78C6C;"> 1</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">          this.</span><span style="color:#BABED8;">tail</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> null;</span></span>
<span class="line"><span style="color:#89DDFF;">        }</span></span>
<span class="line"><span style="color:#89DDFF;">      }</span><span style="color:#89DDFF;font-style:italic;"> else</span><span style="color:#89DDFF;font-style:italic;"> if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">index</span><span style="color:#89DDFF;"> ===</span><span style="color:#89DDFF;"> this.</span><span style="color:#BABED8;">length</span><span style="color:#89DDFF;"> -</span><span style="color:#F78C6C;"> 1</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">        while</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">currentIndex</span><span style="color:#89DDFF;"> &lt;</span><span style="color:#BABED8;"> index</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">          prevNode</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> currentNode</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">          currentNode</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> currentNode</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">next</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">          currentIndex</span><span style="color:#89DDFF;">++;</span></span>
<span class="line"><span style="color:#89DDFF;">        }</span></span>
<span class="line"><span style="color:#BABED8;">        prevNode</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">next</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> null;</span></span>
<span class="line"><span style="color:#89DDFF;">        this.</span><span style="color:#BABED8;">tail</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> prevNode</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">      }</span><span style="color:#89DDFF;font-style:italic;"> else</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">        while</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">currentIndex</span><span style="color:#89DDFF;"> &lt;</span><span style="color:#BABED8;"> index</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">          prevNode</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> currentNode</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">          currentNode</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> currentNode</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">next</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">          currentIndex</span><span style="color:#89DDFF;">++;</span></span>
<span class="line"><span style="color:#89DDFF;">        }</span></span>
<span class="line"><span style="color:#BABED8;">        prevNode</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">next</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> currentNode</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">next</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">      }</span></span>
<span class="line"><span style="color:#89DDFF;">      this.</span><span style="color:#BABED8;">length</span><span style="color:#89DDFF;">--;</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 遍历链表并将节点值以数字形式返回</span></span>
<span class="line"><span style="color:#F07178;">    toArray</span><span style="color:#89DDFF;">()</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;">      const</span><span style="color:#BABED8;"> result</span><span style="color:#89DDFF;"> =</span><span style="color:#F07178;"> []</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">      let</span><span style="color:#BABED8;"> currentNode</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> this.</span><span style="color:#BABED8;">head</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">      while</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">currentNode</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">        result</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">currentNode</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">value</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">        currentNode</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> currentNode</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">next</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">      }</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">      return</span><span style="color:#BABED8;"> result</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span></code></pre></div><h3 id="分类" tabindex="-1">分类 <a class="header-anchor" href="#分类" aria-label="Permalink to &quot;分类&quot;">​</a></h3><p><strong><code>链表</code>分为三种<code>链表</code>: <code>单向链表</code>, <code>双向链表</code>, <code>循环链表</code></strong></p><ul><li><p><strong><code>单向链表</code></strong></p><p>一个<code>单向链表</code>包含两个值： <strong>当前节点的值</strong>和指向<strong>下一个节点的链接</strong></p><img src="`+r+'" alt="单向链表"></li><li><p><strong><code>双线链表</code></strong></p><p><code>双向链表</code>有三个整数值：<strong><code>数值</code></strong>，<strong><code>向后的节点的链接</code></strong>, <strong><code>向前的节点的链接</code></strong>， 所以<code>双向链表</code>既可以<em>向前查询</em>， 也可以<em>向后查询</em></p><img src="'+y+'" alt="双向链表"></li><li><p><strong><code>循环链表</code></strong></p><p>在一个<code>循环链表</code>中, 首节点和末节点被连接在一起。这种方式在单向和双向链表中皆可实现。要转换一个循环链表，你开始于任意一个节点然后沿着列表的任一方向直到返回开始的节点。再来看另一种方法，循环链表可以被视为“无头无尾”。这种列表很利于节约数据存储缓存， 假定你在一个列表中有一个对象并且希望所有其他对象迭代在一个非特殊的排列下.</p><p>指向整个列表的指针可以被称作<code>访问指针</code>。</p></li></ul><img src="'+D+`" alt="循环链表"><h4 id="双向链表实现" tabindex="-1">双向链表实现 <a class="header-anchor" href="#双向链表实现" aria-label="Permalink to &quot;双向链表实现&quot;">​</a></h4><ul><li>Comparator 比较器</li></ul><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">  export</span><span style="color:#89DDFF;font-style:italic;"> default</span><span style="color:#C792EA;"> class</span><span style="color:#FFCB6B;"> Comparator</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * 构造函数</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * </span><span style="color:#89DDFF;font-style:italic;">@</span><span style="color:#C792EA;font-style:italic;">param</span><span style="color:#89DDFF;font-style:italic;"> {</span><span style="color:#FFCB6B;font-style:italic;">function(a:*, b:*)</span><span style="color:#89DDFF;font-style:italic;">}[</span><span style="color:#BABED8;font-style:italic;">compareFunction</span><span style="color:#89DDFF;font-style:italic;">]</span><span style="color:#676E95;font-style:italic;"> - 可以是自定义的比较函数， 该函数可以比较自定义的对象</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#C792EA;">    constructor</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">compareFunction</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;">      this.</span><span style="color:#BABED8;">compare</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> compareFunction</span><span style="color:#89DDFF;"> ||</span><span style="color:#BABED8;"> Comparator</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">defaultCompareFunction</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * 默认比较函数，假设“a”和“b”是字符串或者数字。</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * </span><span style="color:#89DDFF;font-style:italic;">@</span><span style="color:#C792EA;font-style:italic;">param</span><span style="color:#89DDFF;font-style:italic;"> {</span><span style="color:#FFCB6B;font-style:italic;">(string|number)</span><span style="color:#89DDFF;font-style:italic;">}</span><span style="color:#BABED8;font-style:italic;"> a</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * </span><span style="color:#89DDFF;font-style:italic;">@</span><span style="color:#C792EA;font-style:italic;">param</span><span style="color:#89DDFF;font-style:italic;"> {</span><span style="color:#FFCB6B;font-style:italic;">(string|number)</span><span style="color:#89DDFF;font-style:italic;">}</span><span style="color:#BABED8;font-style:italic;"> b</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * </span><span style="color:#89DDFF;font-style:italic;">@</span><span style="color:#C792EA;font-style:italic;">returns</span><span style="color:#89DDFF;font-style:italic;"> {</span><span style="color:#FFCB6B;font-style:italic;">number</span><span style="color:#89DDFF;font-style:italic;">}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#C792EA;">    static</span><span style="color:#F07178;"> defaultCompareFunction</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">a</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> b</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">      if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">a</span><span style="color:#89DDFF;"> ==</span><span style="color:#BABED8;"> b</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">        return</span><span style="color:#F78C6C;"> 0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">      }</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">      return</span><span style="color:#BABED8;"> a</span><span style="color:#89DDFF;"> &lt;</span><span style="color:#BABED8;"> b</span><span style="color:#89DDFF;"> &gt;</span><span style="color:#89DDFF;"> -</span><span style="color:#F78C6C;">1</span><span style="color:#F07178;"> : </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * 检查两个变量是否相等</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * </span><span style="color:#89DDFF;font-style:italic;">@</span><span style="color:#C792EA;font-style:italic;">param</span><span style="color:#89DDFF;font-style:italic;"> {</span><span style="color:#FFCB6B;font-style:italic;">*</span><span style="color:#89DDFF;font-style:italic;">}</span><span style="color:#BABED8;font-style:italic;"> a</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * </span><span style="color:#89DDFF;font-style:italic;">@</span><span style="color:#C792EA;font-style:italic;">param</span><span style="color:#89DDFF;font-style:italic;"> {</span><span style="color:#FFCB6B;font-style:italic;">*</span><span style="color:#89DDFF;font-style:italic;">}</span><span style="color:#BABED8;font-style:italic;"> b</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * </span><span style="color:#89DDFF;font-style:italic;">@</span><span style="color:#C792EA;font-style:italic;">return</span><span style="color:#89DDFF;font-style:italic;"> {</span><span style="color:#FFCB6B;font-style:italic;">boolean</span><span style="color:#89DDFF;font-style:italic;">}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#F07178;">    equal</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">a</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> b</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">      return</span><span style="color:#89DDFF;"> this.</span><span style="color:#82AAFF;">compare</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">a</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> b</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">===</span><span style="color:#F78C6C;"> 0</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * 检查变量“a”是否小于“b”</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * </span><span style="color:#89DDFF;font-style:italic;">@</span><span style="color:#C792EA;font-style:italic;">param</span><span style="color:#89DDFF;font-style:italic;"> {</span><span style="color:#FFCB6B;font-style:italic;">*</span><span style="color:#89DDFF;font-style:italic;">}</span><span style="color:#BABED8;font-style:italic;"> a</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * </span><span style="color:#89DDFF;font-style:italic;">@</span><span style="color:#C792EA;font-style:italic;">param</span><span style="color:#89DDFF;font-style:italic;"> {</span><span style="color:#FFCB6B;font-style:italic;">*</span><span style="color:#89DDFF;font-style:italic;">}</span><span style="color:#BABED8;font-style:italic;"> b</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * </span><span style="color:#89DDFF;font-style:italic;">@</span><span style="color:#C792EA;font-style:italic;">return</span><span style="color:#89DDFF;font-style:italic;"> {</span><span style="color:#FFCB6B;font-style:italic;">boolean</span><span style="color:#89DDFF;font-style:italic;">}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#F07178;">    lessThan</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">a</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> b</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">      return</span><span style="color:#89DDFF;"> this.</span><span style="color:#82AAFF;">compare</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">a</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> b</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F78C6C;"> 0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * 检查变量“a”是否大于“b”</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * </span><span style="color:#89DDFF;font-style:italic;">@</span><span style="color:#C792EA;font-style:italic;">param</span><span style="color:#89DDFF;font-style:italic;"> {</span><span style="color:#FFCB6B;font-style:italic;">*</span><span style="color:#89DDFF;font-style:italic;">}</span><span style="color:#BABED8;font-style:italic;"> a</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * </span><span style="color:#89DDFF;font-style:italic;">@</span><span style="color:#C792EA;font-style:italic;">param</span><span style="color:#89DDFF;font-style:italic;"> {</span><span style="color:#FFCB6B;font-style:italic;">*</span><span style="color:#89DDFF;font-style:italic;">}</span><span style="color:#BABED8;font-style:italic;"> b</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * </span><span style="color:#89DDFF;font-style:italic;">@</span><span style="color:#C792EA;font-style:italic;">return</span><span style="color:#89DDFF;font-style:italic;"> {</span><span style="color:#FFCB6B;font-style:italic;">boolean</span><span style="color:#89DDFF;font-style:italic;">}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#F07178;">    greaterThan</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">a</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> b</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">      return</span><span style="color:#89DDFF;"> this.</span><span style="color:#82AAFF;">compare</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">a</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> b</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">&gt;</span><span style="color:#F78C6C;"> 0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * 检查变量 &quot;a&quot; 是否小于或等于 &quot;b&quot;。</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * </span><span style="color:#89DDFF;font-style:italic;">@</span><span style="color:#C792EA;font-style:italic;">param</span><span style="color:#89DDFF;font-style:italic;"> {</span><span style="color:#FFCB6B;font-style:italic;">*</span><span style="color:#89DDFF;font-style:italic;">}</span><span style="color:#BABED8;font-style:italic;"> a</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * </span><span style="color:#89DDFF;font-style:italic;">@</span><span style="color:#C792EA;font-style:italic;">param</span><span style="color:#89DDFF;font-style:italic;"> {</span><span style="color:#FFCB6B;font-style:italic;">*</span><span style="color:#89DDFF;font-style:italic;">}</span><span style="color:#BABED8;font-style:italic;"> b</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * </span><span style="color:#89DDFF;font-style:italic;">@</span><span style="color:#C792EA;font-style:italic;">return</span><span style="color:#89DDFF;font-style:italic;"> {</span><span style="color:#FFCB6B;font-style:italic;">boolean</span><span style="color:#89DDFF;font-style:italic;">}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#F07178;">    lessThanOrEqual</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">a</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> b</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">      return</span><span style="color:#89DDFF;"> this.</span><span style="color:#82AAFF;">lessThan</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">a</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> b</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">||</span><span style="color:#89DDFF;"> this.</span><span style="color:#82AAFF;">equal</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">a</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> b</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * 检查变量 &quot;a&quot; 是否小于或等于 &quot;b&quot;。</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * </span><span style="color:#89DDFF;font-style:italic;">@</span><span style="color:#C792EA;font-style:italic;">param</span><span style="color:#89DDFF;font-style:italic;"> {</span><span style="color:#FFCB6B;font-style:italic;">*</span><span style="color:#89DDFF;font-style:italic;">}</span><span style="color:#BABED8;font-style:italic;"> a</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * </span><span style="color:#89DDFF;font-style:italic;">@</span><span style="color:#C792EA;font-style:italic;">param</span><span style="color:#89DDFF;font-style:italic;"> {</span><span style="color:#FFCB6B;font-style:italic;">*</span><span style="color:#89DDFF;font-style:italic;">}</span><span style="color:#BABED8;font-style:italic;"> b</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * </span><span style="color:#89DDFF;font-style:italic;">@</span><span style="color:#C792EA;font-style:italic;">return</span><span style="color:#89DDFF;font-style:italic;"> {</span><span style="color:#FFCB6B;font-style:italic;">boolean</span><span style="color:#89DDFF;font-style:italic;">}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#F07178;">    greaterThanOrEqual</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">a</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> b</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">      return</span><span style="color:#89DDFF;"> this.</span><span style="color:#82AAFF;">greaterThan</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">a</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> b</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">||</span><span style="color:#89DDFF;"> this.</span><span style="color:#82AAFF;">equal</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">a</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> b</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * 反转比较顺序</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#F07178;">    reverse</span><span style="color:#89DDFF;"> ()</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;">      const</span><span style="color:#BABED8;"> compareOriginal</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> this.</span><span style="color:#BABED8;">compare</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">      this.</span><span style="color:#82AAFF;">compare</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> (</span><span style="color:#BABED8;font-style:italic;">a</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> b</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#82AAFF;"> conmpareOriginal</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">b</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> a</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span></code></pre></div><ul><li>DoublyLinkedListNode 双向链表节点</li></ul><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">  export</span><span style="color:#89DDFF;font-style:italic;"> default</span><span style="color:#C792EA;"> class</span><span style="color:#FFCB6B;"> DoublyLinkedListNode</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;">    constructor</span><span style="color:#89DDFF;"> (</span><span style="color:#BABED8;font-style:italic;">value</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> next</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> null,</span><span style="color:#BABED8;font-style:italic;"> previous</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> null)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;">      this.</span><span style="color:#BABED8;">value</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> value</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">      this.</span><span style="color:#BABED8;">next</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> next</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">      this.</span><span style="color:#BABED8;">previous</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> previous</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    toString</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">vallback</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">      return</span><span style="color:#BABED8;"> callback</span><span style="color:#89DDFF;"> ?</span><span style="color:#82AAFF;"> callback</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this.</span><span style="color:#BABED8;">value</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;">  \`\${</span><span style="color:#89DDFF;">this.</span><span style="color:#BABED8;">value</span><span style="color:#89DDFF;">}\`</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span></code></pre></div><ul><li>DoublyLinkedList 双线链表</li></ul><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">  export</span><span style="color:#89DDFF;font-style:italic;"> default</span><span style="color:#C792EA;"> class</span><span style="color:#FFCB6B;">  DoublyLinkedList</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * </span><span style="color:#89DDFF;font-style:italic;">@</span><span style="color:#C792EA;font-style:italic;">param</span><span style="color:#89DDFF;font-style:italic;"> {</span><span style="color:#FFCB6B;font-style:italic;">Function</span><span style="color:#89DDFF;font-style:italic;">}</span><span style="color:#89DDFF;font-style:italic;"> [</span><span style="color:#BABED8;font-style:italic;">comparatorFunction</span><span style="color:#89DDFF;font-style:italic;">]</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#C792EA;">    constructor</span><span style="color:#89DDFF;"> (</span><span style="color:#BABED8;font-style:italic;">comparatorFunction</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">      /** </span><span style="color:#89DDFF;font-style:italic;">@</span><span style="color:#C792EA;font-style:italic;">var</span><span style="color:#BABED8;font-style:italic;"> DoublyLinkedListNode</span><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">      // 双向链表的头节点</span></span>
<span class="line"><span style="color:#89DDFF;">      this.</span><span style="color:#BABED8;">head</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> null</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">      /** </span><span style="color:#89DDFF;font-style:italic;">@</span><span style="color:#C792EA;font-style:italic;">var</span><span style="color:#BABED8;font-style:italic;"> DoublyLinkedisNode</span><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#89DDFF;">      this.</span><span style="color:#BABED8;">tail</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> null</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">      // 用于比较的函数</span></span>
<span class="line"><span style="color:#89DDFF;">      this.</span><span style="color:#BABED8;">compare</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> new</span><span style="color:#82AAFF;"> Comparator</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">comparatorFunction</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * </span><span style="color:#89DDFF;font-style:italic;">@</span><span style="color:#C792EA;font-style:italic;">param</span><span style="color:#89DDFF;font-style:italic;"> {</span><span style="color:#FFCB6B;font-style:italic;">*</span><span style="color:#89DDFF;font-style:italic;">}</span><span style="color:#BABED8;font-style:italic;"> value</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * </span><span style="color:#89DDFF;font-style:italic;">@</span><span style="color:#C792EA;font-style:italic;">return</span><span style="color:#89DDFF;font-style:italic;"> {</span><span style="color:#FFCB6B;font-style:italic;">DoublyLinkedList</span><span style="color:#89DDFF;font-style:italic;">}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 将新的节点插入到头部</span></span>
<span class="line"><span style="color:#F07178;">    prepend</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">value</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">      // 创建新的节点作为头部节点</span></span>
<span class="line"><span style="color:#C792EA;">      const</span><span style="color:#BABED8;"> newNode</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> new</span><span style="color:#82AAFF;"> DoublyLinkedListNode</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">value</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> this.</span><span style="color:#BABED8;">head</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">      // 如果存在头部节点， 那么它就不再是头部节点了</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">      // 因此 将其前驱节点设置为新节点(新的头部节点)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">      // 然后标记新的节点为头部节点</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">       if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">this.</span><span style="color:#BABED8;">head</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        this.</span><span style="color:#BABED8;">head</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">previous</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> newNode</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">       }</span></span>
<span class="line"><span style="color:#89DDFF;">       this.</span><span style="color:#BABED8;">head</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> newNode</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">       // 如果还没有尾部节点， 那么就让新的节点称为尾部节点</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">       if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">!this.</span><span style="color:#BABED8;">tail</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        this.</span><span style="color:#BABED8;">tail</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> newNode</span></span>
<span class="line"><span style="color:#89DDFF;">       }</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">       return</span><span style="color:#89DDFF;"> this;</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * </span><span style="color:#89DDFF;font-style:italic;">@</span><span style="color:#C792EA;font-style:italic;">param</span><span style="color:#89DDFF;font-style:italic;"> {</span><span style="color:#FFCB6B;font-style:italic;">*</span><span style="color:#89DDFF;font-style:italic;">}</span><span style="color:#BABED8;font-style:italic;"> value</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * </span><span style="color:#89DDFF;font-style:italic;">@</span><span style="color:#C792EA;font-style:italic;">return</span><span style="color:#89DDFF;font-style:italic;"> {</span><span style="color:#FFCB6B;font-style:italic;">DoublyLinkedList</span><span style="color:#89DDFF;font-style:italic;">}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 将新的及诶单追加到尾部</span></span>
<span class="line"><span style="color:#F07178;">    append</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">value</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;">  {</span></span>
<span class="line"><span style="color:#C792EA;">      const</span><span style="color:#BABED8;"> newNode</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> new</span><span style="color:#82AAFF;"> DoublyLinkedListNode</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">value</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">      // 如果还没有头部节点， 让新的节点称为头部节点</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">      if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">!this.</span><span style="color:#BABED8;">head</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        this.</span><span style="color:#BABED8;">head</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> newNode</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">        this.</span><span style="color:#BABED8;">tail</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> newNode</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">        return</span><span style="color:#89DDFF;"> this;</span></span>
<span class="line"><span style="color:#89DDFF;">      }</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">      // 将新的节点添加到链表的末尾</span></span>
<span class="line"><span style="color:#89DDFF;">      this.</span><span style="color:#BABED8;">tail</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">next</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> newNode</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">      // 将当前尾部节点添加到新节点的前驱引用</span></span>
<span class="line"><span style="color:#BABED8;">      newNode</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">previous</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> this.</span><span style="color:#BABED8;">tail</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">      // 设置新节点为链表的尾部节点</span></span>
<span class="line"><span style="color:#89DDFF;">      this.</span><span style="color:#BABED8;">tail</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> newNode</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">      return</span><span style="color:#89DDFF;"> this</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * </span><span style="color:#89DDFF;font-style:italic;">@</span><span style="color:#C792EA;font-style:italic;">param</span><span style="color:#89DDFF;font-style:italic;"> {</span><span style="color:#FFCB6B;font-style:italic;">*</span><span style="color:#89DDFF;font-style:italic;">}</span><span style="color:#BABED8;font-style:italic;"> value</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * </span><span style="color:#89DDFF;font-style:italic;">@</span><span style="color:#C792EA;font-style:italic;">return</span><span style="color:#89DDFF;font-style:italic;"> {</span><span style="color:#FFCB6B;font-style:italic;">DoublyLinkedListNode</span><span style="color:#89DDFF;font-style:italic;">}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 删除具有特定值的节点</span></span>
<span class="line"><span style="color:#F07178;">    delete</span><span style="color:#89DDFF;"> (</span><span style="color:#BABED8;font-style:italic;">value</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">      if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">!this.</span><span style="color:#BABED8;">head</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">        return</span><span style="color:#89DDFF;"> null</span></span>
<span class="line"><span style="color:#89DDFF;">      }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">      let</span><span style="color:#BABED8;"> deleteNode</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> null;</span></span>
<span class="line"><span style="color:#C792EA;">      let</span><span style="color:#BABED8;"> currentNode</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> this.</span><span style="color:#BABED8;">head</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">      while</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">currentNode</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">        if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">this.</span><span style="color:#BABED8;">compare</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">equal</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">currentNode</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">value</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> value</span><span style="color:#F07178;">)) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">          deleteNode</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> currentNode</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">          if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">deletedNode</span><span style="color:#89DDFF;"> ===</span><span style="color:#89DDFF;"> this.</span><span style="color:#BABED8;">head</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">            // 如果要删除的是头部节点...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">            // 将头部节点设置为第二个节点，它将成为新的头部节点。</span></span>
<span class="line"><span style="color:#89DDFF;">            this.</span><span style="color:#BABED8;">head</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> deletedNode</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">next</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">            // 将新头部节点的前驱设置为 null。</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">            if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">this.</span><span style="color:#BABED8;">head</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">              this.</span><span style="color:#BABED8;">head</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">previous</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> null;</span></span>
<span class="line"><span style="color:#89DDFF;">            }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">            // 如果链表中的所有节点的值都和传入的参数相同</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">            // 那么所有节点都会被删除，因此需要更新尾部节点。</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">            if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">deletedNode</span><span style="color:#89DDFF;"> ===</span><span style="color:#89DDFF;"> this.</span><span style="color:#BABED8;">tail</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">              this.</span><span style="color:#BABED8;">tail</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> null;</span></span>
<span class="line"><span style="color:#89DDFF;">            }</span></span>
<span class="line"><span style="color:#89DDFF;">          }</span><span style="color:#89DDFF;font-style:italic;"> else</span><span style="color:#89DDFF;font-style:italic;"> if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">deletedNode</span><span style="color:#89DDFF;"> ===</span><span style="color:#89DDFF;"> this.</span><span style="color:#BABED8;">tail</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">            // 如果要删除的是尾部节点...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">            // 将尾部节点设置为倒数第二个节点，它将成为新的尾部节点。</span></span>
<span class="line"><span style="color:#89DDFF;">            this.</span><span style="color:#BABED8;">tail</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> deletedNode</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">previous</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">            this.</span><span style="color:#BABED8;">tail</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">next</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> null;</span></span>
<span class="line"><span style="color:#89DDFF;">          }</span><span style="color:#89DDFF;font-style:italic;"> else</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">            // 如果要删除的是中间节点...</span></span>
<span class="line"><span style="color:#C792EA;">            const</span><span style="color:#BABED8;"> previousNode</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> deletedNode</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">previous</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">            const</span><span style="color:#BABED8;"> nextNode</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> deletedNode</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">next</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">            previousNode</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">next</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> nextNode</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">            nextNode</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">previous</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> previousNode</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">          }</span></span>
<span class="line"><span style="color:#89DDFF;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">        currentNode</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> currentNode</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">next</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">      }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">      return</span><span style="color:#BABED8;"> deletedNode</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * </span><span style="color:#89DDFF;font-style:italic;">@</span><span style="color:#C792EA;font-style:italic;">param</span><span style="color:#89DDFF;font-style:italic;"> {</span><span style="color:#FFCB6B;font-style:italic;">Object</span><span style="color:#89DDFF;font-style:italic;">}</span><span style="color:#BABED8;font-style:italic;"> findParams</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * </span><span style="color:#89DDFF;font-style:italic;">@</span><span style="color:#C792EA;font-style:italic;">param</span><span style="color:#89DDFF;font-style:italic;"> {</span><span style="color:#FFCB6B;font-style:italic;">*</span><span style="color:#89DDFF;font-style:italic;">}</span><span style="color:#BABED8;font-style:italic;"> findParams.value</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * </span><span style="color:#89DDFF;font-style:italic;">@</span><span style="color:#C792EA;font-style:italic;">param</span><span style="color:#89DDFF;font-style:italic;"> {</span><span style="color:#FFCB6B;font-style:italic;">funtion</span><span style="color:#89DDFF;font-style:italic;">}</span><span style="color:#89DDFF;font-style:italic;"> [</span><span style="color:#BABED8;font-style:italic;">findParams.callback</span><span style="color:#89DDFF;font-style:italic;">]</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * </span><span style="color:#89DDFF;font-style:italic;">@</span><span style="color:#C792EA;font-style:italic;">return</span><span style="color:#89DDFF;font-style:italic;"> {</span><span style="color:#FFCB6B;font-style:italic;">DoublyLinkedListNode</span><span style="color:#89DDFF;font-style:italic;">}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 查找具有特定值或者满足回调函数的节点</span></span>
<span class="line"><span style="color:#F07178;">    find</span><span style="color:#89DDFF;">({</span><span style="color:#BABED8;font-style:italic;">value</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> undefined,</span><span style="color:#BABED8;font-style:italic;"> callback</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> undefined})</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">      if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">!this.</span><span style="color:#BABED8;">head</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">        return</span><span style="color:#89DDFF;"> null</span></span>
<span class="line"><span style="color:#89DDFF;">      }</span></span>
<span class="line"><span style="color:#C792EA;">      let</span><span style="color:#BABED8;"> currentNode</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> this.</span><span style="color:#BABED8;">head</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">      while</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">currentNode</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">        // 如果指定了回调函数， 那么尝试通过回调函数找到节点</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">        if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">callback</span><span style="color:#89DDFF;"> &amp;&amp;</span><span style="color:#82AAFF;"> callback</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">currentNode</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">value</span><span style="color:#F07178;">)) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">            return</span><span style="color:#BABED8;"> currentNode</span></span>
<span class="line"><span style="color:#89DDFF;">        }</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">        // 如果指定了值， 那么尝试通过值找到节点</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">        if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">value</span><span style="color:#89DDFF;"> !==undefined</span><span style="color:#89DDFF;"> &amp;&amp;</span><span style="color:#89DDFF;"> this.</span><span style="color:#BABED8;">commpare</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">equal</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">currentNode</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">value</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> value</span><span style="color:#F07178;">)) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">          return</span><span style="color:#BABED8;"> currentNode</span></span>
<span class="line"><span style="color:#89DDFF;">        }</span></span>
<span class="line"><span style="color:#BABED8;">        currentNode</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> currentNode</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">next</span></span>
<span class="line"><span style="color:#89DDFF;">      }</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">      return</span><span style="color:#89DDFF;"> null</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * </span><span style="color:#89DDFF;font-style:italic;">@</span><span style="color:#C792EA;font-style:italic;">return</span><span style="color:#89DDFF;font-style:italic;"> {</span><span style="color:#FFCB6B;font-style:italic;">DoublyLinkedListNode</span><span style="color:#89DDFF;font-style:italic;">}</span><span style="color:#676E95;font-style:italic;"> </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 删除尾部节点</span></span>
<span class="line"><span style="color:#F07178;">    dealeteTail</span><span style="color:#89DDFF;"> ()</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">      if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">this.</span><span style="color:#BABED8;">tail</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">        // 没有尾部节点可以删除</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">        return</span><span style="color:#89DDFF;"> null</span></span>
<span class="line"><span style="color:#89DDFF;">      }</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">      if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">this.</span><span style="color:#BABED8;">head</span><span style="color:#89DDFF;"> ===</span><span style="color:#89DDFF;"> this.</span><span style="color:#BABED8;">tail</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">        // 链表中只有一个节点</span></span>
<span class="line"><span style="color:#C792EA;">        const</span><span style="color:#BABED8;"> deleteTail</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> this.</span><span style="color:#BABED8;">tail</span></span>
<span class="line"><span style="color:#89DDFF;">        this.</span><span style="color:#BABED8;">head</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> null</span></span>
<span class="line"><span style="color:#89DDFF;">        this.</span><span style="color:#BABED8;">tail</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> null</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">        return</span><span style="color:#BABED8;"> deleteTail</span></span>
<span class="line"><span style="color:#89DDFF;">      }</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">      // 如果链表中有很多节点</span></span>
<span class="line"><span style="color:#C792EA;">      const</span><span style="color:#BABED8;"> deleteTail</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> this.</span><span style="color:#BABED8;">tail</span></span>
<span class="line"><span style="color:#89DDFF;">      this.</span><span style="color:#BABED8;">tail</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;">  this.</span><span style="color:#BABED8;">tail</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">previous</span></span>
<span class="line"><span style="color:#89DDFF;">      this.</span><span style="color:#BABED8;">tail</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">next</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> null</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">      return</span><span style="color:#BABED8;"> deleteTail</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * </span><span style="color:#89DDFF;font-style:italic;">@</span><span style="color:#C792EA;font-style:italic;">return</span><span style="color:#89DDFF;font-style:italic;"> {</span><span style="color:#FFCB6B;font-style:italic;">DoublyLinkedListNode</span><span style="color:#89DDFF;font-style:italic;">}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 删除头部节点</span></span>
<span class="line"><span style="color:#F07178;">    deleteHead</span><span style="color:#89DDFF;">()</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#82AAFF;">      uf</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">!</span><span style="color:#BABED8;">htis</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">head</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">        return</span><span style="color:#89DDFF;"> null</span></span>
<span class="line"><span style="color:#89DDFF;">      }</span></span>
<span class="line"><span style="color:#C792EA;">      const</span><span style="color:#BABED8;"> deleteHead</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> this.</span><span style="color:#BABED8;">head</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">      if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">this.</span><span style="color:#BABED8;">head</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">next</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        this.</span><span style="color:#BABED8;">head</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;">  this.</span><span style="color:#BABED8;">head</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">next</span></span>
<span class="line"><span style="color:#89DDFF;">        this.</span><span style="color:#BABED8;">head</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">previous</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> null</span></span>
<span class="line"><span style="color:#89DDFF;">      }</span><span style="color:#89DDFF;font-style:italic;"> else</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;">        this.</span><span style="color:#BABED8;">head</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> null</span></span>
<span class="line"><span style="color:#89DDFF;">        this.</span><span style="color:#BABED8;">tail</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> null</span></span>
<span class="line"><span style="color:#89DDFF;">      }</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">      return</span><span style="color:#BABED8;"> deleteHead</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * </span><span style="color:#89DDFF;font-style:italic;">@</span><span style="color:#C792EA;font-style:italic;">return</span><span style="color:#89DDFF;font-style:italic;"> {</span><span style="color:#FFCB6B;font-style:italic;">DoublyLinkListNode[]</span><span style="color:#89DDFF;font-style:italic;">}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 将链表转换为数组</span></span>
<span class="line"><span style="color:#F07178;">    toArray</span><span style="color:#89DDFF;">()</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;">      const</span><span style="color:#BABED8;"> nodes</span><span style="color:#89DDFF;"> =</span><span style="color:#F07178;"> []</span></span>
<span class="line"><span style="color:#C792EA;">      let</span><span style="color:#BABED8;"> currentNode</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> this.</span><span style="color:#BABED8;">head</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">      while</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">currentNode</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">        nodes</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">currentNode</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">        currentNode</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> currentNode</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">next</span></span>
<span class="line"><span style="color:#89DDFF;">      }</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">      return</span><span style="color:#BABED8;"> nodes</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * </span><span style="color:#89DDFF;font-style:italic;">@</span><span style="color:#C792EA;font-style:italic;">param</span><span style="color:#89DDFF;font-style:italic;"> {</span><span style="color:#FFCB6B;font-style:italic;">*[]</span><span style="color:#89DDFF;font-style:italic;">}</span><span style="color:#BABED8;font-style:italic;"> values</span><span style="color:#676E95;font-style:italic;"> - 需要转换为链表的值的数组</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * </span><span style="color:#89DDFF;font-style:italic;">@</span><span style="color:#C792EA;font-style:italic;">return</span><span style="color:#89DDFF;font-style:italic;"> {</span><span style="color:#FFCB6B;font-style:italic;">DoublyLinkedList</span><span style="color:#89DDFF;font-style:italic;">}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 从数组创建链表</span></span>
<span class="line"><span style="color:#F07178;">    formArray</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">values</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">      values</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">forEach</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">value</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;">  this.</span><span style="color:#82AAFF;">append</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">value</span><span style="color:#F07178;">))</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">      return</span><span style="color:#89DDFF;"> this</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * </span><span style="color:#89DDFF;font-style:italic;">@</span><span style="color:#C792EA;font-style:italic;">param</span><span style="color:#89DDFF;font-style:italic;"> {</span><span style="color:#FFCB6B;font-style:italic;">function</span><span style="color:#89DDFF;font-style:italic;">}</span><span style="color:#89DDFF;font-style:italic;"> [</span><span style="color:#BABED8;font-style:italic;">callback</span><span style="color:#89DDFF;font-style:italic;">]</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * </span><span style="color:#89DDFF;font-style:italic;">@</span><span style="color:#C792EA;font-style:italic;">return</span><span style="color:#89DDFF;font-style:italic;"> {</span><span style="color:#FFCB6B;font-style:italic;">string</span><span style="color:#89DDFF;font-style:italic;">}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 将链表转换为字符串</span></span>
<span class="line"><span style="color:#F07178;">    toString</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">callback</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">      return</span><span style="color:#89DDFF;"> this.</span><span style="color:#82AAFF;">toArray</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">map</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">node</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;">=&gt;</span><span style="color:#BABED8;"> node</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toString</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">callback</span><span style="color:#F07178;">))</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toString</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * 反转链表</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * </span><span style="color:#89DDFF;font-style:italic;">@</span><span style="color:#C792EA;font-style:italic;">returns</span><span style="color:#89DDFF;font-style:italic;">  {</span><span style="color:#FFCB6B;font-style:italic;">DoublyLinkedList</span><span style="color:#89DDFF;font-style:italic;">}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#F07178;">    reverse</span><span style="color:#89DDFF;">()</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;">      let</span><span style="color:#BABED8;"> currNode</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> this.</span><span style="color:#BABED8;">head</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">      let</span><span style="color:#BABED8;"> prevNode</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> null</span></span>
<span class="line"><span style="color:#C792EA;">      let</span><span style="color:#BABED8;"> nexNode</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> null</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">      while</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">currNode</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">        // 存储下一个节点</span></span>
<span class="line"><span style="color:#BABED8;">        nextNode</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> currNode</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">next</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">        prevNode</span><span style="color:#89DDFF;">  =</span><span style="color:#BABED8;"> currNode</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">previous</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">        // 改变当前节点的下一个节点，是其链接到上一个节点</span></span>
<span class="line"><span style="color:#BABED8;">        currNode</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">next</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> prevNode</span></span>
<span class="line"><span style="color:#BABED8;">        currNode</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">previous</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> nextNode</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">        // 将prevNode和currNode节点向前移动一步</span></span>
<span class="line"><span style="color:#BABED8;">        prevNode</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> currNode</span></span>
<span class="line"><span style="color:#BABED8;">        currNOde</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> nextNode</span></span>
<span class="line"><span style="color:#89DDFF;">      }</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">      // 重置头部和尾部节点</span></span>
<span class="line"><span style="color:#89DDFF;">      this.</span><span style="color:#BABED8;">tail</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> this.</span><span style="color:#BABED8;">head</span></span>
<span class="line"><span style="color:#89DDFF;">      this.</span><span style="color:#BABED8;">head</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> prevNode</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">      return</span><span style="color:#89DDFF;"> this</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span></code></pre></div><h3 id="参考资料" tabindex="-1">参考资料 <a class="header-anchor" href="#参考资料" aria-label="Permalink to &quot;参考资料&quot;">​</a></h3>`,27);function B(E,f,A,d,u,h){const s=n;return l(),p("div",null,[i,o(s,{title:"编程时光",href:"https://www.coding-time.cn/lc/data-structures/linked-list/#%E9%93%BE%E8%A1%A8-linkedlist"})])}const m=a(F,[["render",B]]);export{g as __pageData,m as default};
