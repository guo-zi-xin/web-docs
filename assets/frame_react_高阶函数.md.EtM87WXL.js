import{_ as s,o as n,c as a,R as l}from"./chunks/framework.AonOEUEq.js";const d=JSON.parse('{"title":"高阶函数HOC(High Order Component)","description":"","frontmatter":{},"headers":[],"relativePath":"frame/react/高阶函数.md","filePath":"frame/react/高阶函数.md","lastUpdated":1708859917000}'),p={name:"frame/react/高阶函数.md"},o=l(`<h1 id="高阶函数hoc-high-order-component" tabindex="-1">高阶函数HOC(High Order Component) <a class="header-anchor" href="#高阶函数hoc-high-order-component" aria-label="Permalink to &quot;高阶函数HOC(High Order Component)&quot;">​</a></h1><p>在React中， 高阶组件(HOC) 是一个接收组件作为参数并返回一个新组建的函数。 换句话说， 它是一种组件的 转换器。高阶组件通常用于组件之间的复用逻辑， 例如状态管理、数据获取、访问控制等等。</p><p>HOC一个常见的示例就是React-Redux的<code>connect</code>函数， 它将Redux Store 连接到 React 组件， 使组件可以访问和更新 Store中的状态</p><p>高阶组件是React 中一种非常强大的模式， 可以帮助我们在组件间复用逻辑、修改Props、实现条件渲染以及额 外的功能。通过熟练掌握高阶组件的概念和使用方式， 我们可以提高代码的可维护性和可读性，构建更加强壮、 高效的应用程序。在实际项目中，我们可能会遇到各种高阶组件的应用场景，因此掌握高阶组件的使用方法对于 React开发来说至关重要。</p><h3 id="react-hook中常见的高阶函数" tabindex="-1">React Hook中常见的高阶函数 <a class="header-anchor" href="#react-hook中常见的高阶函数" aria-label="Permalink to &quot;React Hook中常见的高阶函数&quot;">​</a></h3><ul><li><p><strong>useState 高阶函数</strong></p><p><code>useState</code> 是React中最基础的Hook， 用于在函数组件中添加状态。它返回一个数组， 包含当前状态 和更新状态的函数。 这个更新函数可以接收一个新的状态值， 也可以接收一个函数来更新状态</p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#BABED8;"> React</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> {</span><span style="color:#BABED8;"> useState</span><span style="color:#89DDFF;"> }</span><span style="color:#89DDFF;font-style:italic;"> from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">react</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;">  Counter </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> ()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#89DDFF;"> [</span><span style="color:#BABED8;">count</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> setCount</span><span style="color:#89DDFF;">]</span><span style="color:#89DDFF;"> =</span><span style="color:#82AAFF;"> useState</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">number</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> increment</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> ()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#82AAFF;">    setCount</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">count</span><span style="color:#89DDFF;"> +</span><span style="color:#F78C6C;"> 1</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">  };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  return</span><span style="color:#F07178;"> (</span></span>
<span class="line"><span style="color:#89DDFF;">    &lt;&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">      &lt;</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;">Count: </span><span style="color:#89DDFF;">{</span><span style="color:#BABED8;"> count </span><span style="color:#89DDFF;">}&lt;/</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">      &lt;</span><span style="color:#F07178;">button</span><span style="color:#C792EA;"> onClick</span><span style="color:#89DDFF;">={</span><span style="color:#BABED8;">increment</span><span style="color:#89DDFF;">}&gt;</span><span style="color:#BABED8;">increment</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">    &lt;/&gt;</span></span>
<span class="line"><span style="color:#F07178;">  )</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div></li><li><p><strong>useEffect 高阶函数</strong></p><p><code>useEffect</code>用于在函数式组件中执行副作用的操作，比如订阅事件、数据获取、DOM操作等等。它接收一个函数作为参数，这个函数就是副作用代码。 <code>useEffect</code>还可以接收第二个参数，用于指定副作用操作的依赖项。</p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#BABED8;"> React</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> {</span><span style="color:#BABED8;"> useState</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> useEffect</span><span style="color:#89DDFF;"> }</span><span style="color:#89DDFF;font-style:italic;"> from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">react</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> Timer </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> ()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#89DDFF;"> [</span><span style="color:#BABED8;">time</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> setTime</span><span style="color:#89DDFF;">]</span><span style="color:#89DDFF;"> =</span><span style="color:#82AAFF;"> useState</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">number</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">  useEffect</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;">    const</span><span style="color:#BABED8;"> intervaild</span><span style="color:#89DDFF;"> =</span><span style="color:#82AAFF;"> setInterval</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#82AAFF;">      setTime</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">time</span><span style="color:#89DDFF;"> +</span><span style="color:#F78C6C;"> 1</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">    },</span><span style="color:#F78C6C;"> 1000</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">     return</span><span style="color:#89DDFF;"> ()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#82AAFF;">      clearInterval</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">intervaild</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">     }</span></span>
<span class="line"><span style="color:#89DDFF;">  },</span><span style="color:#F07178;"> [</span><span style="color:#BABED8;">time</span><span style="color:#F07178;">])</span></span>
<span class="line"><span style="color:#F07178;">  </span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  return</span><span style="color:#89DDFF;"> &lt;</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;">Time: </span><span style="color:#89DDFF;">{</span><span style="color:#BABED8;"> time </span><span style="color:#89DDFF;">}&lt;/</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div></li><li><p><strong>useContext高阶函数</strong></p><p><code>useContext</code>用于在函数式组件中访问React的上下文(context)。他接收一个上下文对象作为参数， 并返回上下文的当前值</p><p>组件嵌套不需要一层一层props传参， 可以直接实现A组件传值到C组件， 创建方法为createContext</p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#BABED8;"> React</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> {</span><span style="color:#BABED8;"> useContext</span><span style="color:#89DDFF;"> }</span><span style="color:#89DDFF;font-style:italic;"> from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">react</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#BABED8;"> MyContext </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">./Context</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> MyComponent </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> ()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> value</span><span style="color:#89DDFF;"> =</span><span style="color:#82AAFF;"> useContext</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">MyContext</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  return</span><span style="color:#89DDFF;"> &lt;</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;">Context value: </span><span style="color:#89DDFF;">{</span><span style="color:#BABED8;">value</span><span style="color:#89DDFF;">}&lt;/</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div></li></ul><h3 id="usestate-和-useref的区别" tabindex="-1">useState 和 useRef的区别 <a class="header-anchor" href="#usestate-和-useref的区别" aria-label="Permalink to &quot;useState 和 useRef的区别&quot;">​</a></h3><p>两者最大的区别是 <code>useState</code> 用于管理状态，useRef用于操作DOM元素。另外， useState返回的是当前状态 和一个更新状态的函数，而 <code>useRef</code> 返回的是一个全局可以访问和修改的 Ref 对象。</p><p>useState用于保存和更新组件的状态，而 useRef 用于引用 DOM 元素或者保存值。</p><p>useState的值会被重新渲染，而 useRef的值则不会。</p><ul><li><p>useState的值在每一个render中都是独立存在的，而useRef.current则更像是相对于render函数的一个全局变量，每次它会保持render的最新状态（useState异步更新值， useRef则同步更新）</p></li><li><p>useState会触发重新渲染，useRef不触发。</p></li><li><p>useRef不仅用于DOM引用， &#39;ref&#39;对象是通用容器， 期当前属性是可变的， 并且可以保存任何职， 类似于类的实例属性</p></li><li><p>变量是决定视图图层渲染的变量，需要使用useState， 其他用途则使用 useRef</p></li><li><p>useRef特性: 可变的 ref 对象， 持久化</p></li></ul>`,11),e=[o];function t(c,r,F,D,y,i){return n(),a("div",null,e)}const B=s(p,[["render",t]]);export{d as __pageData,B as default};
