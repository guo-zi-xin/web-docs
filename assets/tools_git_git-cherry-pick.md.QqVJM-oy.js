import{_ as s,o as a,c as l,a8 as n}from"./chunks/framework.QttzOlP4.js";const d=JSON.parse('{"title":"git cherry-pick 使用","description":"","frontmatter":{},"headers":[],"relativePath":"tools/git/git-cherry-pick.md","filePath":"tools/git/git-cherry-pick.md","lastUpdated":1711372342000}'),p={name:"tools/git/git-cherry-pick.md"},o=n(`<h1 id="git-cherry-pick-使用" tabindex="-1">git cherry-pick 使用 <a class="header-anchor" href="#git-cherry-pick-使用" aria-label="Permalink to &quot;git cherry-pick 使用&quot;">​</a></h1><h2 id="定义" tabindex="-1">定义 <a class="header-anchor" href="#定义" aria-label="Permalink to &quot;定义&quot;">​</a></h2><p>cherry-pick: 翻译为筛选，是git版本控制系统中很重要的一个命令， 它允许你将任意分支上的某个或者某些特定提交(<code>commit hash</code>标识)的更改应用于当前所在分支，而不是进行完整分支的合并。执行 <code>cherry-pick</code>后， git 会在目标提交的更改在当前分支上重新创建一个新的提交，保持了原有提交的 内容，但生成了新的提交ID</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#C3E88D;"> cherry-pick</span><span style="color:#89DDFF;"> &lt;</span><span style="color:#C3E88D;">commit-has</span><span style="color:#BABED8;">h</span><span style="color:#89DDFF;">&gt;</span><span style="color:#676E95;font-style:italic;">  # commit hash 为提交的具体节点， 比如 61ab26</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">注意</p><p>使用 <code>git cherry-pick</code>需要注意： 需要保证工作区是干净的(没有对HEAD提交的修改)</p><p>当不清楚如何应用更改时，会发生以下情况：</p><ol><li><p>当前的分支和 <code>HEAD</code> 指针保持在最后一次成功提交的位置。</p></li><li><p><code>CHERRY_PICK_HEAD</code> 引用被设置为 指向难以应用的修改的提交。</p></li><li><p>在索引文件和工作区中， 更改应用得很干净的路径都会被更新。</p></li><li><p>对于冲突的路径，索引文件最多记录三个版本，如gitmerge[1]的“TRUE MERGE”部分所述。工作树文件将包括一个冲突的描述，该描述被通常的冲突标记使用 <code>&lt;&lt;&lt;&lt;&lt;&lt;&lt;</code>和 <code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;</code>括起来。</p></li><li><p>不做其它修改。</p></li></ol></div><h2 id="使用场景" tabindex="-1">使用场景 <a class="header-anchor" href="#使用场景" aria-label="Permalink to &quot;使用场景&quot;">​</a></h2><ul><li><strong>跨分支移植补丁</strong></li></ul><p>假设在开发分支上修复了一个bug， 但尚未准备好合并整个分支。这时， 可以使用<code>git cherry-pick &lt;commit hash&gt;</code>来将该修复提交应用到生产分支，快速解决线上问题。</p><ul><li><strong>提取特定功能</strong></li></ul><p>在 分支A 上开发了一个新功能， 但由于计划安排暂时不能将其合并到主分支，若另一个 分支B 需要临时拥有这个功能， 可以通过<code>git cherry-pick</code> 将该功能转移到 分支B</p><ul><li><strong>解决冲突</strong></li></ul><p>当多个开发者在不同分支上工作时， 可能在不同的上下文中解决了相同的问题。通过<code>git cherry-pick</code>， 可以将一个开发者修复的解决方案单独应用到其它分支，而无需进行复杂的合并操作。</p><ul><li><strong>同步独立更改</strong></li></ul><p>即使在不同的开发路径上，也可能存在独立的、可以通用的代码的更改。 使用<code>git cherry-pick</code>， 可以迅速将这些有价值的更改推广到其它相关分支</p><h5 id="示例" tabindex="-1">示例 <a class="header-anchor" href="#示例" aria-label="Permalink to &quot;示例&quot;">​</a></h5><p><strong>假设是master分支某个提交应用到develop分支上</strong></p><ul><li><ol><li>确保已经切换到了想要应用补丁的目标分支</li></ol><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#C3E88D;"> checkout</span><span style="color:#C3E88D;"> develop</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">Switched</span><span style="color:#C3E88D;"> to</span><span style="color:#C3E88D;"> branch</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">develop</span><span style="color:#89DDFF;">&#39;</span></span></code></pre></div></li><li><ol start="2"><li>获取想要一只的提交哈希(<code>commit hash</code>) 这可以通过查看历史提交记录找到, 通过在命令行中使用<code>git log</code> 历史提交信息 或者简要查看历史提交信息 <code>git log --oneline</code>, 找出包含所需补丁的提交：</li></ol></li></ul><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#C3E88D;"> log</span><span style="color:#C3E88D;"> --graph</span><span style="color:#C3E88D;"> --oneline</span><span style="color:#676E95;font-style:italic;"> # 查询提交信息</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 查询的结果示例</span></span>
<span class="line"><span style="color:#FFCB6B;">041cd2b</span><span style="color:#C3E88D;"> feat:</span><span style="color:#C3E88D;"> git</span><span style="color:#C3E88D;"> cherry-pick用法更新</span></span>
<span class="line"><span style="color:#FFCB6B;">0cbf613</span><span style="color:#C3E88D;"> feat:</span><span style="color:#C3E88D;"> 更新watch和watchEffect的区别</span></span>
<span class="line"><span style="color:#FFCB6B;">e360bfd</span><span style="color:#C3E88D;"> fix:</span><span style="color:#C3E88D;"> 修正文案错误</span></span>
<span class="line"><span style="color:#FFCB6B;">5772f85</span><span style="color:#C3E88D;"> config:</span><span style="color:#C3E88D;"> 更新vitepress依赖版本</span></span>
<span class="line"><span style="color:#FFCB6B;">9f1aa0d</span><span style="color:#C3E88D;"> feat</span><span style="color:#C3E88D;"> 更新this指向相关</span></span></code></pre></div><ul><li><ol start="3"><li>执行 <code>git cherry-pick</code>命令，后面跟上你想要移植的提交哈希</li></ol></li></ul><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#C3E88D;"> cherry-pick</span><span style="color:#F78C6C;"> 041</span><span style="color:#C3E88D;">cd2b</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 之后合并冲突</span></span>
<span class="line"><span style="color:#FFCB6B;">Auto-merging</span><span style="color:#C3E88D;"> src/App.vue</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 合并冲突后结果</span></span>
<span class="line"><span style="color:#89DDFF;">[</span><span style="color:#BABED8;">develop </span><span style="color:#F78C6C;">55</span><span style="color:#BABED8;">b234d</span><span style="color:#89DDFF;">]</span><span style="color:#BABED8;"> git cherry-pick用法更新</span></span>
<span class="line"><span style="color:#FFCB6B;"> Date:</span><span style="color:#C3E88D;"> Fri</span><span style="color:#C3E88D;"> Mar</span><span style="color:#F78C6C;"> 8</span><span style="color:#F78C6C;"> 23</span><span style="color:#C3E88D;">:46:22</span><span style="color:#F78C6C;"> 2024</span><span style="color:#C3E88D;"> +0800</span></span>
<span class="line"><span style="color:#FFCB6B;"> 1</span><span style="color:#C3E88D;"> file</span><span style="color:#C3E88D;"> changed,</span><span style="color:#F78C6C;"> 1</span><span style="color:#C3E88D;"> insertion</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">+</span><span style="color:#89DDFF;">)</span><span style="color:#C3E88D;">,</span><span style="color:#F78C6C;"> 1</span><span style="color:#C3E88D;"> deletion</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">-</span><span style="color:#89DDFF;">)</span></span></code></pre></div><ul><li><ol start="4"><li>git 会尝试将指提交所做的所有更改应用到当前分支。 如果没有冲突， git 会自动创建一个新的提交，这个提交包含了与原始提交相同的更改，单据有新的提交哈希</li></ol></li></ul><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#676E95;font-style:italic;"># 应用develop分支前的日志如下</span></span>
<span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#C3E88D;"> log</span><span style="color:#C3E88D;"> --graph</span><span style="color:#C3E88D;"> --oneline</span></span>
<span class="line"><span style="color:#89DDFF;">*</span><span style="color:#BABED8;">   c8b94bb </span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">HEAD</span><span style="color:#BABED8;"> -</span><span style="color:#89DDFF;">&gt;</span><span style="color:#C3E88D;"> develop,</span><span style="color:#C3E88D;"> origin/develop</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> git cherry-pick用法更新</span></span>
<span class="line"><span style="color:#89DDFF;">|</span><span style="color:#BABED8;">\\</span></span>
<span class="line"><span style="color:#89DDFF;">|</span><span style="color:#FFCB6B;"> *</span><span style="color:#F78C6C;"> 0</span><span style="color:#C3E88D;">cbf613</span><span style="color:#C3E88D;"> feat:</span><span style="color:#C3E88D;"> 更新watch和watchEffect的区别</span></span>
<span class="line"><span style="color:#89DDFF;">*</span><span style="color:#89DDFF;"> |</span><span style="color:#FFCB6B;"> e360bfd</span><span style="color:#C3E88D;"> fix:</span><span style="color:#C3E88D;"> 修正文案错误</span></span>
<span class="line"><span style="color:#89DDFF;">|</span><span style="color:#FFCB6B;">/</span></span>
<span class="line"><span style="color:#82AAFF;"> ...</span></span>
<span class="line"><span style="color:#BABED8;"> </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">#应用develop分支后的日志如下：</span></span>
<span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#C3E88D;"> log</span><span style="color:#C3E88D;"> --graph</span><span style="color:#C3E88D;"> --oneline</span></span>
<span class="line"><span style="color:#89DDFF;">*</span><span style="color:#BABED8;"> 55b234d </span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">HEAD</span><span style="color:#BABED8;"> -</span><span style="color:#89DDFF;">&gt;</span><span style="color:#C3E88D;"> develop</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> 更新watch和watchEffect的区别</span></span>
<span class="line"><span style="color:#89DDFF;">*</span><span style="color:#BABED8;">   c8b94bb </span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">origin/develop</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> git cherry-pick用法更新</span></span>
<span class="line"><span style="color:#89DDFF;">|</span><span style="color:#BABED8;">\\</span></span>
<span class="line"><span style="color:#89DDFF;">|</span><span style="color:#FFCB6B;"> *</span><span style="color:#F78C6C;"> 0</span><span style="color:#C3E88D;">cbf613</span><span style="color:#C3E88D;"> feat:</span><span style="color:#C3E88D;"> 更新watch和watchEffect的区别</span></span>
<span class="line"><span style="color:#89DDFF;">*</span><span style="color:#89DDFF;"> |</span><span style="color:#FFCB6B;"> e360bfd</span><span style="color:#C3E88D;"> fix:</span><span style="color:#C3E88D;"> 修正文案错误</span></span>
<span class="line"><span style="color:#89DDFF;">|</span><span style="color:#FFCB6B;">/</span></span>
<span class="line"><span style="color:#82AAFF;">...</span></span></code></pre></div><ul><li><ol start="5"><li>如果在应用更改时出现冲突， git会暂停<code>cherry-pick</code>的动作，并提示解决冲突</li></ol></li></ul><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#C3E88D;"> cherry-pick</span><span style="color:#F78C6C;"> 041</span><span style="color:#C3E88D;">cd2b</span></span>
<span class="line"><span style="color:#FFCB6B;">Auto-merging</span><span style="color:#C3E88D;"> src/App.tsx</span></span>
<span class="line"><span style="color:#FFCB6B;">CONFLICT</span><span style="color:#BABED8;"> (content): Merge conflict </span><span style="color:#89DDFF;font-style:italic;">in</span><span style="color:#BABED8;"> src/App.vue</span></span>
<span class="line"><span style="color:#FFCB6B;">error:</span><span style="color:#C3E88D;"> could</span><span style="color:#C3E88D;"> not</span><span style="color:#C3E88D;"> apply</span><span style="color:#C3E88D;"> e360bfd...</span><span style="color:#C3E88D;"> 修正文案错误</span></span>
<span class="line"><span style="color:#FFCB6B;">hint:</span><span style="color:#C3E88D;"> After</span><span style="color:#C3E88D;"> resolving</span><span style="color:#C3E88D;"> the</span><span style="color:#C3E88D;"> conflicts,</span><span style="color:#C3E88D;"> mark</span><span style="color:#C3E88D;"> them</span><span style="color:#C3E88D;"> with</span></span>
<span class="line"><span style="color:#FFCB6B;">hint:</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">git add/rm &lt;pathspec&gt;</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">,</span><span style="color:#C3E88D;"> then</span><span style="color:#C3E88D;"> run</span></span>
<span class="line"><span style="color:#FFCB6B;">hint:</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">git cherry-pick --continue</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">.</span></span>
<span class="line"><span style="color:#FFCB6B;">hint:</span><span style="color:#C3E88D;"> You</span><span style="color:#C3E88D;"> can</span><span style="color:#C3E88D;"> instead</span><span style="color:#C3E88D;"> skip</span><span style="color:#C3E88D;"> this</span><span style="color:#C3E88D;"> commit</span><span style="color:#C3E88D;"> with</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">git cherry-pick --skip</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">.</span></span>
<span class="line"><span style="color:#FFCB6B;">hint:</span><span style="color:#C3E88D;"> To</span><span style="color:#C3E88D;"> abort</span><span style="color:#C3E88D;"> and</span><span style="color:#C3E88D;"> get</span><span style="color:#C3E88D;"> back</span><span style="color:#C3E88D;"> to</span><span style="color:#C3E88D;"> the</span><span style="color:#C3E88D;"> state</span><span style="color:#C3E88D;"> before</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">git cherry-pick</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">,</span></span>
<span class="line"><span style="color:#FFCB6B;">hint:</span><span style="color:#C3E88D;"> run</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">git cherry-pick --abort</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">.</span></span></code></pre></div><p>打开冲突文件， 手动编辑以解决冲突， 保存修改后， 执行</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#C3E88D;"> add</span><span style="color:#89DDFF;"> &lt;</span><span style="color:#C3E88D;">conflicted-fil</span><span style="color:#BABED8;">e</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><p>对所有冲突文件重复上述操作。 <strong>但是不要进行任何<code>commit</code>操作,或者会结束后续的<code>cherry-pick</code>过程， 如果进行<code>commit</code>操作，则提交内容直接应用到当前分支了</strong></p><ul><li><ol start="6"><li>解决完所有冲突后， 继续完成\`cherry-pick过程</li></ol></li></ul><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#C3E88D;"> cherry-pick</span><span style="color:#C3E88D;"> continue</span></span></code></pre></div><ul><li><ol start="7"><li>如果在解决冲突后决定不再应用次补丁， 可以取消<code>cherry-pick</code>操作</li></ol></li></ul><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#C3E88D;"> cherry-pick</span><span style="color:#C3E88D;"> --abort</span></span></code></pre></div>`,31),e=[o];function t(c,r,i,y,D,C){return a(),l("div",null,e)}const h=s(p,[["render",t]]);export{d as __pageData,h as default};
