import{_ as s,o as a,c as n,R as l}from"./chunks/framework.AonOEUEq.js";const h=JSON.parse('{"title":"虚拟DOM与Diff算法","description":"","frontmatter":{},"headers":[],"relativePath":"frame/react/虚拟DOM.md","filePath":"frame/react/虚拟DOM.md","lastUpdated":1708859917000}'),p={name:"frame/react/虚拟DOM.md"},o=l(`<h1 id="虚拟dom与diff算法" tabindex="-1">虚拟DOM与Diff算法 <a class="header-anchor" href="#虚拟dom与diff算法" aria-label="Permalink to &quot;虚拟DOM与Diff算法&quot;">​</a></h1><p><strong>虚拟DOM相当于是在JS和 真实的DOM之间加了一个缓存， 利用DOM Diff算法避免了没有必要的DOM操作， 从而提高性能。</strong></p><h3 id="结构对比" tabindex="-1">结构对比 <a class="header-anchor" href="#结构对比" aria-label="Permalink to &quot;结构对比&quot;">​</a></h3><p><code>React.createElement</code>和 <code>document.createElement</code></p><p>虚拟DOM是一个对象， 而真实的DOM是DOM结构(断点看到真实DOM中挂载了很对属性和方法。我们并不需要去关心 这些属性和方法， 都是默认的， 因为标准就这么设计的的😂) 所以从结构上来说虚拟DOM比真实的DOM轻量很多</p><h3 id="流程对比" tabindex="-1">流程对比 <a class="header-anchor" href="#流程对比" aria-label="Permalink to &quot;流程对比&quot;">​</a></h3><p>传统Web应用， 数据的变化会实时地更新到用户界面中， 于是每次数据微小的变化都会引起DOM的重新渲染</p><p>在虚拟DOM中， 是将所有的操作聚集在一块计算出所有变化后统一更新一次虚拟DOM</p><h3 id="什么是虚拟dom" tabindex="-1">什么是虚拟DOM <a class="header-anchor" href="#什么是虚拟dom" aria-label="Permalink to &quot;什么是虚拟DOM&quot;">​</a></h3><p>虚拟DOM是一个对象， 这个对象是由真实的DOM转化而来:</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#C792EA;"> className</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Index</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">  &lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;">我是我的胃来食</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">  &lt;</span><span style="color:#F07178;">ul</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">    &lt;</span><span style="color:#F07178;">li</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;">React</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">li</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">    &lt;</span><span style="color:#F07178;">li</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;">Vue</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">li</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">  &lt;/</span><span style="color:#F07178;">ul</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><p>转化后</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> virtualDom </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">  {</span></span>
<span class="line"><span style="color:#F07178;">  type</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">div</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  props</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> {</span><span style="color:#F07178;"> class</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">Index</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;"> }</span></span>
<span class="line"><span style="color:#BABED8;">  children: [</span></span>
<span class="line"><span style="color:#89DDFF;">    {</span></span>
<span class="line"><span style="color:#F07178;">      type</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">div</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">      children</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">我是我的胃来食</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">    },</span></span>
<span class="line"><span style="color:#89DDFF;">    {</span></span>
<span class="line"><span style="color:#F07178;">      type</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">ul</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#BABED8;">      children: [</span></span>
<span class="line"><span style="color:#89DDFF;">        {</span></span>
<span class="line"><span style="color:#F07178;">          type</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">li</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#BABED8;">          children: </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">React</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">        },</span></span>
<span class="line"><span style="color:#89DDFF;">        {</span></span>
<span class="line"><span style="color:#F07178;">          type</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">li</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">          children</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">Vue</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">        }</span></span>
<span class="line"><span style="color:#BABED8;">      ]</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#BABED8;">  ]</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">注</p><ul><li>type: 表示实际的标签</li><li>props: 表示标签内部的属性(除去Key 和 ref, 会形成单独的key名)</li><li>children: 表示节点内容， 依次循环</li></ul></div><h3 id="虚拟dom的优势" tabindex="-1">虚拟DOM的优势 <a class="header-anchor" href="#虚拟dom的优势" aria-label="Permalink to &quot;虚拟DOM的优势&quot;">​</a></h3><h5 id="虚拟dom可以提高效率-开发时不必关注dom-只关注业务逻辑" tabindex="-1">虚拟DOM可以提高效率，开发时不必关注DOM， 只关注业务逻辑 <a class="header-anchor" href="#虚拟dom可以提高效率-开发时不必关注dom-只关注业务逻辑" aria-label="Permalink to &quot;虚拟DOM可以提高效率，开发时不必关注DOM， 只关注业务逻辑&quot;">​</a></h5><p>性能提升(牢记浏览器在处理DOM时很慢， 处理JS时很快)， 并且虚拟DOM感受到变化的时候是通过局部更新而非整体，从而减少非常多的DOM操作， 所以性能会比真实的DOM操作提升不少</p><div class="info custom-block"><p class="custom-block-title">⛔</p><p>虚拟DOM的优势其实是在于它的diff算法和批量处理策略， 将所有的DOM 手机起来， 一起去改变真是的DOM， 但在首次渲染上，虚拟DOM会多了一层计算， 消耗一些性能， 所以有可能会比HTML慢一点。 虚拟DOM知识规划了一个最短路径， 但是还是得真是的DOM去走</p></div><h5 id="超强的兼容性" tabindex="-1">超强的兼容性 <a class="header-anchor" href="#超强的兼容性" aria-label="Permalink to &quot;超强的兼容性&quot;">​</a></h5><p>具有浏览器的兼容和跨平台的兼容</p><ul><li><p>React基于虚拟DOM实现了一套自己的事件机制，并且模拟了事件冒泡和捕获的过程， 采取事件代理批量更新等方法，从而磨平各个浏览器事件兼容性问题</p></li><li><p>对于跨平台React和 React Native 都是根据虚拟DOM画出响应平台的UI层， 只不过不同平台的画法不太一样</p></li></ul>`,21),e=[o];function t(c,D,r,F,i,y){return a(),n("div",null,e)}const m=s(p,[["render",t]]);export{h as __pageData,m as default};
